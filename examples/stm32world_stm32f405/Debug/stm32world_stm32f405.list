
stm32world_stm32f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08005d10  08005d10  00006d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006140  08006140  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006140  08006140  00007140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006148  08006148  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006148  08006148  00007148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800614c  0800614c  0000714c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006150  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          00000230  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df03  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf9  00000000  00000000  00016107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000695d  00000000  00000000  00017d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c8  00000000  00000000  0001e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007a2  00000000  00000000  0001f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fab0  00000000  00000000  0001f7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010eb6  00000000  00000000  0003f27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc89b  00000000  00000000  00050130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0010c9cb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002c80  00000000  00000000  0010ca10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0010f690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cf4 	.word	0x08005cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005cf4 	.word	0x08005cf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b084      	sub	sp, #16
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	9201      	str	r2, [sp, #4]
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <MX_GPIO_Init+0x48>)
 8000f80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f82:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000f86:	6319      	str	r1, [r3, #48]	@ 0x30
 8000f88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f8a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000f8e:	9101      	str	r1, [sp, #4]
 8000f90:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	9202      	str	r2, [sp, #8]
 8000f94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f96:	f041 0101 	orr.w	r1, r1, #1
 8000f9a:	6319      	str	r1, [r3, #48]	@ 0x30
 8000f9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f9e:	f001 0101 	and.w	r1, r1, #1
 8000fa2:	9102      	str	r1, [sp, #8]
 8000fa4:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	9203      	str	r2, [sp, #12]
 8000fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000faa:	f042 0202 	orr.w	r2, r2, #2
 8000fae:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	9303      	str	r3, [sp, #12]
 8000fb8:	9b03      	ldr	r3, [sp, #12]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fba:	b004      	add	sp, #16
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <_write>:
    if (fd == 1 || fd == 2) {
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	2801      	cmp	r0, #1
 8000fc8:	d80a      	bhi.n	8000fe0 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000fca:	b510      	push	{r4, lr}
 8000fcc:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <_write+0x28>)
 8000fd6:	f001 fef6 	bl	8002dc6 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000fda:	b920      	cbnz	r0, 8000fe6 <_write+0x22>
            return len;
 8000fdc:	4620      	mov	r0, r4
}
 8000fde:	bd10      	pop	{r4, pc}
    return -1;
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000fe4:	4770      	bx	lr
            return -1;
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fea:	e7f8      	b.n	8000fde <_write+0x1a>
 8000fec:	20000214 	.word	0x20000214

08000ff0 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <Error_Handler+0x2>

08000ff4 <MX_USART1_UART_Init>:
{
 8000ff4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000ff6:	480a      	ldr	r0, [pc, #40]	@ (8001020 <MX_USART1_UART_Init+0x2c>)
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <MX_USART1_UART_Init+0x30>)
 8000ffa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000ffc:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001000:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	2300      	movs	r3, #0
 8001004:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001006:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001008:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800100a:	220c      	movs	r2, #12
 800100c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001012:	f001 fea8 	bl	8002d66 <HAL_UART_Init>
 8001016:	b900      	cbnz	r0, 800101a <MX_USART1_UART_Init+0x26>
}
 8001018:	bd08      	pop	{r3, pc}
    Error_Handler();
 800101a:	f7ff ffe9 	bl	8000ff0 <Error_Handler>
 800101e:	bf00      	nop
 8001020:	20000214 	.word	0x20000214
 8001024:	40011000 	.word	0x40011000

08001028 <MX_I2C1_Init>:
{
 8001028:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800102a:	480a      	ldr	r0, [pc, #40]	@ (8001054 <MX_I2C1_Init+0x2c>)
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <MX_I2C1_Init+0x30>)
 800102e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_I2C1_Init+0x34>)
 8001032:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001034:	2300      	movs	r3, #0
 8001036:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001038:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800103e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001040:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001042:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001044:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001046:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001048:	f000 fe84 	bl	8001d54 <HAL_I2C_Init>
 800104c:	b900      	cbnz	r0, 8001050 <MX_I2C1_Init+0x28>
}
 800104e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001050:	f7ff ffce 	bl	8000ff0 <Error_Handler>
 8001054:	2000025c 	.word	0x2000025c
 8001058:	40005400 	.word	0x40005400
 800105c:	00061a80 	.word	0x00061a80

08001060 <SystemClock_Config>:
{
 8001060:	b500      	push	{lr}
 8001062:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001064:	2230      	movs	r2, #48	@ 0x30
 8001066:	2100      	movs	r1, #0
 8001068:	a808      	add	r0, sp, #32
 800106a:	f002 ff81 	bl	8003f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106e:	2300      	movs	r3, #0
 8001070:	9303      	str	r3, [sp, #12]
 8001072:	9304      	str	r3, [sp, #16]
 8001074:	9305      	str	r3, [sp, #20]
 8001076:	9306      	str	r3, [sp, #24]
 8001078:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <SystemClock_Config+0xa0>)
 800107e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001080:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001084:	6411      	str	r1, [r2, #64]	@ 0x40
 8001086:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001088:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <SystemClock_Config+0xa4>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a6:	2301      	movs	r3, #1
 80010a8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ae:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010b8:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010ba:	2208      	movs	r2, #8
 80010bc:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010be:	22a8      	movs	r2, #168	@ 0xa8
 80010c0:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	a808      	add	r0, sp, #32
 80010ca:	f001 fa19 	bl	8002500 <HAL_RCC_OscConfig>
 80010ce:	b998      	cbnz	r0, 80010f8 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010e0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e8:	2105      	movs	r1, #5
 80010ea:	a803      	add	r0, sp, #12
 80010ec:	f001 fc6c 	bl	80029c8 <HAL_RCC_ClockConfig>
 80010f0:	b920      	cbnz	r0, 80010fc <SystemClock_Config+0x9c>
}
 80010f2:	b015      	add	sp, #84	@ 0x54
 80010f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010f8:	f7ff ff7a 	bl	8000ff0 <Error_Handler>
    Error_Handler();
 80010fc:	f7ff ff78 	bl	8000ff0 <Error_Handler>
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <main>:
{
 8001108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 800110e:	f000 f9f7 	bl	8001500 <HAL_Init>
  SystemClock_Config();
 8001112:	f7ff ffa5 	bl	8001060 <SystemClock_Config>
  MX_GPIO_Init();
 8001116:	f7ff ff2f 	bl	8000f78 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800111a:	f7ff ff6b 	bl	8000ff4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800111e:	f7ff ff83 	bl	8001028 <MX_I2C1_Init>
    printf("\n\n\n--------\nStarting\n");
 8001122:	4849      	ldr	r0, [pc, #292]	@ (8001248 <main+0x140>)
 8001124:	f002 fe44 	bl	8003db0 <puts>
    printf("Scan i2c1\n");
 8001128:	4848      	ldr	r0, [pc, #288]	@ (800124c <main+0x144>)
 800112a:	f002 fe41 	bl	8003db0 <puts>
    for (uint8_t i = 0; i < 128; i++) {
 800112e:	2400      	movs	r4, #0
 8001130:	e005      	b.n	800113e <main+0x36>
            printf("-- ");
 8001132:	4847      	ldr	r0, [pc, #284]	@ (8001250 <main+0x148>)
 8001134:	f002 fdcc 	bl	8003cd0 <iprintf>
 8001138:	e010      	b.n	800115c <main+0x54>
    for (uint8_t i = 0; i < 128; i++) {
 800113a:	3401      	adds	r4, #1
 800113c:	b2e4      	uxtb	r4, r4
 800113e:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8001142:	d115      	bne.n	8001170 <main+0x68>
        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 5) == HAL_OK) {
 8001144:	2305      	movs	r3, #5
 8001146:	2203      	movs	r2, #3
 8001148:	0061      	lsls	r1, r4, #1
 800114a:	4842      	ldr	r0, [pc, #264]	@ (8001254 <main+0x14c>)
 800114c:	f001 f90e 	bl	800236c <HAL_I2C_IsDeviceReady>
 8001150:	2800      	cmp	r0, #0
 8001152:	d1ee      	bne.n	8001132 <main+0x2a>
            printf("%2x ", i);
 8001154:	4621      	mov	r1, r4
 8001156:	4840      	ldr	r0, [pc, #256]	@ (8001258 <main+0x150>)
 8001158:	f002 fdba 	bl	8003cd0 <iprintf>
        if (i > 0 && (i + 1) % 16 == 0)
 800115c:	2c00      	cmp	r4, #0
 800115e:	d0ec      	beq.n	800113a <main+0x32>
 8001160:	1c63      	adds	r3, r4, #1
 8001162:	f013 0f0f 	tst.w	r3, #15
 8001166:	d1e8      	bne.n	800113a <main+0x32>
            printf("\n");
 8001168:	200a      	movs	r0, #10
 800116a:	f002 fdc3 	bl	8003cf4 <putchar>
 800116e:	e7e4      	b.n	800113a <main+0x32>
    printf("\n");
 8001170:	200a      	movs	r0, #10
 8001172:	f002 fdbf 	bl	8003cf4 <putchar>
    if (bmp085_init(&bmp085, &hi2c1, BMP085_DEFAULT_ADDR) != BMP085_Ok) {
 8001176:	2277      	movs	r2, #119	@ 0x77
 8001178:	4936      	ldr	r1, [pc, #216]	@ (8001254 <main+0x14c>)
 800117a:	4838      	ldr	r0, [pc, #224]	@ (800125c <main+0x154>)
 800117c:	f001 ff14 	bl	8002fa8 <bmp085_init>
 8001180:	b910      	cbnz	r0, 8001188 <main+0x80>
    for (uint8_t i = 0; i < 128; i++) {
 8001182:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001186:	e03e      	b.n	8001206 <main+0xfe>
        printf("BMP095 Error!\n");
 8001188:	4835      	ldr	r0, [pc, #212]	@ (8001260 <main+0x158>)
 800118a:	f002 fe11 	bl	8003db0 <puts>
 800118e:	e7f8      	b.n	8001182 <main+0x7a>
                printf("Err\n");
 8001190:	4834      	ldr	r0, [pc, #208]	@ (8001264 <main+0x15c>)
 8001192:	f002 fe0d 	bl	8003db0 <puts>
 8001196:	e040      	b.n	800121a <main+0x112>
            printf("Tick %lu - temp = %0.1f°C / %0.1f°F pres = %0.0f Pa / %0.1f mbar %0.2f inHg\n", now / 1000, temperature, temperature * 1.8 + 32, pressure, pressure * 0.01, pressure * 0.00029529983071445);
 8001198:	9808      	ldr	r0, [sp, #32]
 800119a:	f7ff f9d5 	bl	8000548 <__aeabi_f2d>
 800119e:	4606      	mov	r6, r0
 80011a0:	460f      	mov	r7, r1
 80011a2:	a323      	add	r3, pc, #140	@ (adr r3, 8001230 <main+0x128>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa26 	bl	80005f8 <__aeabi_dmul>
 80011ac:	4680      	mov	r8, r0
 80011ae:	4689      	mov	r9, r1
 80011b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80011b2:	f7ff f9c9 	bl	8000548 <__aeabi_f2d>
 80011b6:	4682      	mov	sl, r0
 80011b8:	468b      	mov	fp, r1
 80011ba:	4d2b      	ldr	r5, [pc, #172]	@ (8001268 <main+0x160>)
 80011bc:	fba5 3504 	umull	r3, r5, r5, r4
 80011c0:	09ad      	lsrs	r5, r5, #6
 80011c2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001238 <main+0x130>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fa16 	bl	80005f8 <__aeabi_dmul>
 80011cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80011d0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001240 <main+0x138>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	4650      	mov	r0, sl
 80011d8:	4659      	mov	r1, fp
 80011da:	f7ff fa0d 	bl	80005f8 <__aeabi_dmul>
 80011de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011e2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80011e6:	2200      	movs	r2, #0
 80011e8:	4b20      	ldr	r3, [pc, #128]	@ (800126c <main+0x164>)
 80011ea:	4640      	mov	r0, r8
 80011ec:	4649      	mov	r1, r9
 80011ee:	f7ff f84d 	bl	800028c <__adddf3>
 80011f2:	e9cd 0100 	strd	r0, r1, [sp]
 80011f6:	4632      	mov	r2, r6
 80011f8:	463b      	mov	r3, r7
 80011fa:	4629      	mov	r1, r5
 80011fc:	481c      	ldr	r0, [pc, #112]	@ (8001270 <main+0x168>)
 80011fe:	f002 fd67 	bl	8003cd0 <iprintf>
            next_tick = now + 1000;
 8001202:	f504 727a 	add.w	r2, r4, #1000	@ 0x3e8
        now = uwTick;
 8001206:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <main+0x16c>)
 8001208:	681c      	ldr	r4, [r3, #0]
        if (now >= next_tick) {
 800120a:	42a2      	cmp	r2, r4
 800120c:	d8fb      	bhi.n	8001206 <main+0xfe>
            if (bmp085_get_temperature(&bmp085, &temperature) != BMP085_Ok) {
 800120e:	a908      	add	r1, sp, #32
 8001210:	4812      	ldr	r0, [pc, #72]	@ (800125c <main+0x154>)
 8001212:	f001 fedb 	bl	8002fcc <bmp085_get_temperature>
 8001216:	2800      	cmp	r0, #0
 8001218:	d1ba      	bne.n	8001190 <main+0x88>
            if (bmp085_get_pressure(&bmp085, &pressure) != BMP085_Ok) {
 800121a:	a909      	add	r1, sp, #36	@ 0x24
 800121c:	480f      	ldr	r0, [pc, #60]	@ (800125c <main+0x154>)
 800121e:	f001 ff3d 	bl	800309c <bmp085_get_pressure>
 8001222:	2800      	cmp	r0, #0
 8001224:	d0b8      	beq.n	8001198 <main+0x90>
                printf("Err\n");
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <main+0x15c>)
 8001228:	f002 fdc2 	bl	8003db0 <puts>
 800122c:	e7b4      	b.n	8001198 <main+0x90>
 800122e:	bf00      	nop
 8001230:	cccccccd 	.word	0xcccccccd
 8001234:	3ffccccc 	.word	0x3ffccccc
 8001238:	1d8d02ae 	.word	0x1d8d02ae
 800123c:	3f335a4f 	.word	0x3f335a4f
 8001240:	47ae147b 	.word	0x47ae147b
 8001244:	3f847ae1 	.word	0x3f847ae1
 8001248:	08005d14 	.word	0x08005d14
 800124c:	08005d2c 	.word	0x08005d2c
 8001250:	08005d40 	.word	0x08005d40
 8001254:	2000025c 	.word	0x2000025c
 8001258:	08005d38 	.word	0x08005d38
 800125c:	200001f0 	.word	0x200001f0
 8001260:	08005d44 	.word	0x08005d44
 8001264:	08005d54 	.word	0x08005d54
 8001268:	10624dd3 	.word	0x10624dd3
 800126c:	40400000 	.word	0x40400000
 8001270:	08005d58 	.word	0x08005d58
 8001274:	200002b4 	.word	0x200002b4

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2100      	movs	r1, #0
 800127c:	9100      	str	r1, [sp, #0]
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_MspInit+0x34>)
 8001280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001286:	645a      	str	r2, [r3, #68]	@ 0x44
 8001288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800128a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	9101      	str	r1, [sp, #4]
 8001294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001296:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800129a:	641a      	str	r2, [r3, #64]	@ 0x40
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	b002      	add	sp, #8
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b0:	b530      	push	{r4, r5, lr}
 80012b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	2300      	movs	r3, #0
 80012b6:	9303      	str	r3, [sp, #12]
 80012b8:	9304      	str	r3, [sp, #16]
 80012ba:	9305      	str	r3, [sp, #20]
 80012bc:	9306      	str	r3, [sp, #24]
 80012be:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80012c0:	6802      	ldr	r2, [r0, #0]
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <HAL_I2C_MspInit+0x64>)
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012c8:	b009      	add	sp, #36	@ 0x24
 80012ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	2500      	movs	r5, #0
 80012ce:	9501      	str	r5, [sp, #4]
 80012d0:	4c11      	ldr	r4, [pc, #68]	@ (8001318 <HAL_I2C_MspInit+0x68>)
 80012d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80012da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e4:	23c0      	movs	r3, #192	@ 0xc0
 80012e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f0:	2304      	movs	r3, #4
 80012f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	a903      	add	r1, sp, #12
 80012f6:	4809      	ldr	r0, [pc, #36]	@ (800131c <HAL_I2C_MspInit+0x6c>)
 80012f8:	f000 f9ac 	bl	8001654 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fc:	9502      	str	r5, [sp, #8]
 80012fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001300:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001304:	6423      	str	r3, [r4, #64]	@ 0x40
 8001306:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	9b02      	ldr	r3, [sp, #8]
}
 8001310:	e7da      	b.n	80012c8 <HAL_I2C_MspInit+0x18>
 8001312:	bf00      	nop
 8001314:	40005400 	.word	0x40005400
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b500      	push	{lr}
 8001322:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	2300      	movs	r3, #0
 8001326:	9303      	str	r3, [sp, #12]
 8001328:	9304      	str	r3, [sp, #16]
 800132a:	9305      	str	r3, [sp, #20]
 800132c:	9306      	str	r3, [sp, #24]
 800132e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001330:	6802      	ldr	r2, [r0, #0]
 8001332:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001336:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800133a:	429a      	cmp	r2, r3
 800133c:	d002      	beq.n	8001344 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800133e:	b009      	add	sp, #36	@ 0x24
 8001340:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001344:	2100      	movs	r1, #0
 8001346:	9101      	str	r1, [sp, #4]
 8001348:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800134c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800134e:	f042 0210 	orr.w	r2, r2, #16
 8001352:	645a      	str	r2, [r3, #68]	@ 0x44
 8001354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001356:	f002 0210 	and.w	r2, r2, #16
 800135a:	9201      	str	r2, [sp, #4]
 800135c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	9102      	str	r1, [sp, #8]
 8001360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	631a      	str	r2, [r3, #48]	@ 0x30
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001372:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001376:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001380:	2307      	movs	r3, #7
 8001382:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	a903      	add	r1, sp, #12
 8001386:	4802      	ldr	r0, [pc, #8]	@ (8001390 <HAL_UART_MspInit+0x70>)
 8001388:	f000 f964 	bl	8001654 <HAL_GPIO_Init>
}
 800138c:	e7d7      	b.n	800133e <HAL_UART_MspInit+0x1e>
 800138e:	bf00      	nop
 8001390:	40020000 	.word	0x40020000

08001394 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler>

08001396 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler>

08001398 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <MemManage_Handler>

0800139a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler>

0800139c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler>

0800139e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 f8c5 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bd08      	pop	{r3, pc}

080013ac <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80013ac:	2001      	movs	r0, #1
 80013ae:	4770      	bx	lr

080013b0 <_kill>:

int _kill(int pid, int sig)
{
 80013b0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013b2:	f002 fe2f 	bl	8004014 <__errno>
 80013b6:	2316      	movs	r3, #22
 80013b8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80013ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013be:	bd08      	pop	{r3, pc}

080013c0 <_exit>:

void _exit (int status)
{
 80013c0:	b508      	push	{r3, lr}
  _kill(status, -1);
 80013c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013c6:	f7ff fff3 	bl	80013b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ca:	e7fe      	b.n	80013ca <_exit+0xa>

080013cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	460c      	mov	r4, r1
 80013d0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	2500      	movs	r5, #0
 80013d4:	e006      	b.n	80013e4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80013d6:	f3af 8000 	nop.w
 80013da:	4621      	mov	r1, r4
 80013dc:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80013e2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	42b5      	cmp	r5, r6
 80013e6:	dbf6      	blt.n	80013d6 <_read+0xa>
  }

  return len;
}
 80013e8:	4630      	mov	r0, r6
 80013ea:	bd70      	pop	{r4, r5, r6, pc}

080013ec <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013f0:	4770      	bx	lr

080013f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80013f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80013f8:	2000      	movs	r0, #0
 80013fa:	4770      	bx	lr

080013fc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80013fc:	2001      	movs	r0, #1
 80013fe:	4770      	bx	lr

08001400 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001400:	2000      	movs	r0, #0
 8001402:	4770      	bx	lr

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b510      	push	{r4, lr}
 8001406:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <_sbrk+0x38>)
 800140a:	490d      	ldr	r1, [pc, #52]	@ (8001440 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800140c:	480d      	ldr	r0, [pc, #52]	@ (8001444 <_sbrk+0x40>)
 800140e:	6800      	ldr	r0, [r0, #0]
 8001410:	b140      	cbz	r0, 8001424 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	480c      	ldr	r0, [pc, #48]	@ (8001444 <_sbrk+0x40>)
 8001414:	6800      	ldr	r0, [r0, #0]
 8001416:	4403      	add	r3, r0
 8001418:	1a52      	subs	r2, r2, r1
 800141a:	4293      	cmp	r3, r2
 800141c:	d806      	bhi.n	800142c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800141e:	4a09      	ldr	r2, [pc, #36]	@ (8001444 <_sbrk+0x40>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001422:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001424:	4807      	ldr	r0, [pc, #28]	@ (8001444 <_sbrk+0x40>)
 8001426:	4c08      	ldr	r4, [pc, #32]	@ (8001448 <_sbrk+0x44>)
 8001428:	6004      	str	r4, [r0, #0]
 800142a:	e7f2      	b.n	8001412 <_sbrk+0xe>
    errno = ENOMEM;
 800142c:	f002 fdf2 	bl	8004014 <__errno>
 8001430:	230c      	movs	r3, #12
 8001432:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001438:	e7f3      	b.n	8001422 <_sbrk+0x1e>
 800143a:	bf00      	nop
 800143c:	20020000 	.word	0x20020000
 8001440:	00000400 	.word	0x00000400
 8001444:	200002b0 	.word	0x200002b0
 8001448:	20000408 	.word	0x20000408

0800144c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4a03      	ldr	r2, [pc, #12]	@ (800145c <SystemInit+0x10>)
 800144e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001452:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001456:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001498 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001464:	f7ff fff2 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146a:	490d      	ldr	r1, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001480:	4c0a      	ldr	r4, [pc, #40]	@ (80014ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800148e:	f002 fdc7 	bl	8004020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff fe39 	bl	8001108 <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014a4:	08006150 	.word	0x08006150
  ldr r2, =_sbss
 80014a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014ac:	20000404 	.word	0x20000404

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_InitTick+0x40>)
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80014c4:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <HAL_InitTick+0x44>)
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014cc:	f000 f8ae 	bl	800162c <HAL_SYSTICK_Config>
 80014d0:	b968      	cbnz	r0, 80014ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	2c0f      	cmp	r4, #15
 80014d4:	d901      	bls.n	80014da <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
 80014d8:	e00a      	b.n	80014f0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014da:	2200      	movs	r2, #0
 80014dc:	4621      	mov	r1, r4
 80014de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e2:	f000 f893 	bl	800160c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_InitTick+0x48>)
 80014e8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
}
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	bf00      	nop
 80014f4:	20000004 	.word	0x20000004
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008

08001500 <HAL_Init>:
{
 8001500:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_Init+0x30>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800150a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800151a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f863 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f7ff ffc6 	bl	80014b4 <HAL_InitTick>
  HAL_MspInit();
 8001528:	f7ff fea6 	bl	8001278 <HAL_MspInit>
}
 800152c:	2000      	movs	r0, #0
 800152e:	bd08      	pop	{r3, pc}
 8001530:	40023c00 	.word	0x40023c00

08001534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001534:	4a03      	ldr	r2, [pc, #12]	@ (8001544 <HAL_IncTick+0x10>)
 8001536:	6811      	ldr	r1, [r2, #0]
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_IncTick+0x14>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	440b      	add	r3, r1
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200002b4 	.word	0x200002b4
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800154c:	4b01      	ldr	r3, [pc, #4]	@ (8001554 <HAL_GetTick+0x8>)
 800154e:	6818      	ldr	r0, [r3, #0]
}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200002b4 	.word	0x200002b4

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b538      	push	{r3, r4, r5, lr}
 800155a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff fff6 	bl	800154c <HAL_GetTick>
 8001560:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001566:	d002      	beq.n	800156e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <HAL_Delay+0x24>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	f7ff ffed 	bl	800154c <HAL_GetTick>
 8001572:	1b40      	subs	r0, r0, r5
 8001574:	42a0      	cmp	r0, r4
 8001576:	d3fa      	bcc.n	800156e <HAL_Delay+0x16>
  {
  }
}
 8001578:	bd38      	pop	{r3, r4, r5, pc}
 800157a:	bf00      	nop
 800157c:	20000004 	.word	0x20000004

08001580 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001580:	2800      	cmp	r0, #0
 8001582:	db08      	blt.n	8001596 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	0109      	lsls	r1, r1, #4
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800158c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001590:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001594:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	f000 000f 	and.w	r0, r0, #15
 800159a:	0109      	lsls	r1, r1, #4
 800159c:	b2c9      	uxtb	r1, r1
 800159e:	4b01      	ldr	r3, [pc, #4]	@ (80015a4 <__NVIC_SetPriority+0x24>)
 80015a0:	5419      	strb	r1, [r3, r0]
  }
}
 80015a2:	4770      	bx	lr
 80015a4:	e000ed14 	.word	0xe000ed14

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015aa:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ae:	f1c0 0c07 	rsb	ip, r0, #7
 80015b2:	f1bc 0f04 	cmp.w	ip, #4
 80015b6:	bf28      	it	cs
 80015b8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015bc:	1d03      	adds	r3, r0, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d90f      	bls.n	80015e2 <NVIC_EncodePriority+0x3a>
 80015c2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80015c8:	fa0e f00c 	lsl.w	r0, lr, ip
 80015cc:	ea21 0100 	bic.w	r1, r1, r0
 80015d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d2:	fa0e fe03 	lsl.w	lr, lr, r3
 80015d6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80015da:	ea41 0002 	orr.w	r0, r1, r2
 80015de:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	2300      	movs	r3, #0
 80015e4:	e7ee      	b.n	80015c4 <NVIC_EncodePriority+0x1c>
	...

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e8:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f4:	0200      	lsls	r0, r0, #8
 80015f6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015fa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001604:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160c:	b510      	push	{r4, lr}
 800160e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <HAL_NVIC_SetPriority+0x1c>)
 8001612:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001614:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001618:	f7ff ffc6 	bl	80015a8 <NVIC_EncodePriority>
 800161c:	4601      	mov	r1, r0
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff ffae 	bl	8001580 <__NVIC_SetPriority>
}
 8001624:	bd10      	pop	{r4, pc}
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	3801      	subs	r0, #1
 800162e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001632:	d20b      	bcs.n	800164c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001634:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001638:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <HAL_SYSTICK_Config+0x24>)
 800163c:	21f0      	movs	r1, #240	@ 0xf0
 800163e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001642:	2000      	movs	r0, #0
 8001644:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	2207      	movs	r2, #7
 8001648:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800164c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001654:	2300      	movs	r3, #0
 8001656:	2b0f      	cmp	r3, #15
 8001658:	f200 80e9 	bhi.w	800182e <HAL_GPIO_Init+0x1da>
{
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	e065      	b.n	800172e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001662:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001664:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001668:	2403      	movs	r4, #3
 800166a:	fa04 f40e 	lsl.w	r4, r4, lr
 800166e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001672:	68cc      	ldr	r4, [r1, #12]
 8001674:	fa04 f40e 	lsl.w	r4, r4, lr
 8001678:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800167a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001682:	684a      	ldr	r2, [r1, #4]
 8001684:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001688:	409a      	lsls	r2, r3
 800168a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800168c:	6042      	str	r2, [r0, #4]
 800168e:	e05c      	b.n	800174a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001690:	08dc      	lsrs	r4, r3, #3
 8001692:	3408      	adds	r4, #8
 8001694:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001698:	f003 0507 	and.w	r5, r3, #7
 800169c:	00ad      	lsls	r5, r5, #2
 800169e:	f04f 0e0f 	mov.w	lr, #15
 80016a2:	fa0e fe05 	lsl.w	lr, lr, r5
 80016a6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016aa:	690a      	ldr	r2, [r1, #16]
 80016ac:	40aa      	lsls	r2, r5
 80016ae:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80016b2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80016b6:	e05c      	b.n	8001772 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b8:	2207      	movs	r2, #7
 80016ba:	e000      	b.n	80016be <HAL_GPIO_Init+0x6a>
 80016bc:	2200      	movs	r2, #0
 80016be:	fa02 f20e 	lsl.w	r2, r2, lr
 80016c2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	3402      	adds	r4, #2
 80016c6:	4d5a      	ldr	r5, [pc, #360]	@ (8001830 <HAL_GPIO_Init+0x1dc>)
 80016c8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016cc:	4a59      	ldr	r2, [pc, #356]	@ (8001834 <HAL_GPIO_Init+0x1e0>)
 80016ce:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	ea6f 020c 	mvn.w	r2, ip
 80016d4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016d8:	684e      	ldr	r6, [r1, #4]
 80016da:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80016de:	d001      	beq.n	80016e4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80016e0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80016e4:	4c53      	ldr	r4, [pc, #332]	@ (8001834 <HAL_GPIO_Init+0x1e0>)
 80016e6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80016e8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ee:	684e      	ldr	r6, [r1, #4]
 80016f0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80016f4:	d001      	beq.n	80016fa <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80016f6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80016fa:	4c4e      	ldr	r4, [pc, #312]	@ (8001834 <HAL_GPIO_Init+0x1e0>)
 80016fc:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80016fe:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001700:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001704:	684e      	ldr	r6, [r1, #4]
 8001706:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800170a:	d001      	beq.n	8001710 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800170c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001710:	4c48      	ldr	r4, [pc, #288]	@ (8001834 <HAL_GPIO_Init+0x1e0>)
 8001712:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001714:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001716:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001718:	684d      	ldr	r5, [r1, #4]
 800171a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800171e:	d001      	beq.n	8001724 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001720:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001724:	4c43      	ldr	r4, [pc, #268]	@ (8001834 <HAL_GPIO_Init+0x1e0>)
 8001726:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001728:	3301      	adds	r3, #1
 800172a:	2b0f      	cmp	r3, #15
 800172c:	d87d      	bhi.n	800182a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800172e:	2201      	movs	r2, #1
 8001730:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	680c      	ldr	r4, [r1, #0]
 8001734:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001738:	ea32 0404 	bics.w	r4, r2, r4
 800173c:	d1f4      	bne.n	8001728 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173e:	684c      	ldr	r4, [r1, #4]
 8001740:	f004 0403 	and.w	r4, r4, #3
 8001744:	3c01      	subs	r4, #1
 8001746:	2c01      	cmp	r4, #1
 8001748:	d98b      	bls.n	8001662 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174a:	684a      	ldr	r2, [r1, #4]
 800174c:	f002 0203 	and.w	r2, r2, #3
 8001750:	2a03      	cmp	r2, #3
 8001752:	d009      	beq.n	8001768 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001754:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001756:	005d      	lsls	r5, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	40aa      	lsls	r2, r5
 800175c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001760:	688a      	ldr	r2, [r1, #8]
 8001762:	40aa      	lsls	r2, r5
 8001764:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001766:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001768:	684a      	ldr	r2, [r1, #4]
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	2a02      	cmp	r2, #2
 8001770:	d08e      	beq.n	8001690 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001772:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001774:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f20e 	lsl.w	r2, r2, lr
 800177e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001782:	684a      	ldr	r2, [r1, #4]
 8001784:	f002 0203 	and.w	r2, r2, #3
 8001788:	fa02 f20e 	lsl.w	r2, r2, lr
 800178c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800178e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001790:	684a      	ldr	r2, [r1, #4]
 8001792:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001796:	d0c7      	beq.n	8001728 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001798:	2200      	movs	r2, #0
 800179a:	9201      	str	r2, [sp, #4]
 800179c:	4a26      	ldr	r2, [pc, #152]	@ (8001838 <HAL_GPIO_Init+0x1e4>)
 800179e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80017a0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80017a4:	6454      	str	r4, [r2, #68]	@ 0x44
 80017a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017a8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80017ac:	9201      	str	r2, [sp, #4]
 80017ae:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80017b0:	089c      	lsrs	r4, r3, #2
 80017b2:	1ca5      	adds	r5, r4, #2
 80017b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <HAL_GPIO_Init+0x1dc>)
 80017b6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ba:	f003 0e03 	and.w	lr, r3, #3
 80017be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f20e 	lsl.w	r2, r2, lr
 80017c8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017cc:	4a1b      	ldr	r2, [pc, #108]	@ (800183c <HAL_GPIO_Init+0x1e8>)
 80017ce:	4290      	cmp	r0, r2
 80017d0:	f43f af74 	beq.w	80016bc <HAL_GPIO_Init+0x68>
 80017d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017d8:	4290      	cmp	r0, r2
 80017da:	d01a      	beq.n	8001812 <HAL_GPIO_Init+0x1be>
 80017dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017e0:	4290      	cmp	r0, r2
 80017e2:	d018      	beq.n	8001816 <HAL_GPIO_Init+0x1c2>
 80017e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017e8:	4290      	cmp	r0, r2
 80017ea:	d016      	beq.n	800181a <HAL_GPIO_Init+0x1c6>
 80017ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017f0:	4290      	cmp	r0, r2
 80017f2:	d014      	beq.n	800181e <HAL_GPIO_Init+0x1ca>
 80017f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017f8:	4290      	cmp	r0, r2
 80017fa:	d012      	beq.n	8001822 <HAL_GPIO_Init+0x1ce>
 80017fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001800:	4290      	cmp	r0, r2
 8001802:	d010      	beq.n	8001826 <HAL_GPIO_Init+0x1d2>
 8001804:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001808:	4290      	cmp	r0, r2
 800180a:	f43f af55 	beq.w	80016b8 <HAL_GPIO_Init+0x64>
 800180e:	2208      	movs	r2, #8
 8001810:	e755      	b.n	80016be <HAL_GPIO_Init+0x6a>
 8001812:	2201      	movs	r2, #1
 8001814:	e753      	b.n	80016be <HAL_GPIO_Init+0x6a>
 8001816:	2202      	movs	r2, #2
 8001818:	e751      	b.n	80016be <HAL_GPIO_Init+0x6a>
 800181a:	2203      	movs	r2, #3
 800181c:	e74f      	b.n	80016be <HAL_GPIO_Init+0x6a>
 800181e:	2204      	movs	r2, #4
 8001820:	e74d      	b.n	80016be <HAL_GPIO_Init+0x6a>
 8001822:	2205      	movs	r2, #5
 8001824:	e74b      	b.n	80016be <HAL_GPIO_Init+0x6a>
 8001826:	2206      	movs	r2, #6
 8001828:	e749      	b.n	80016be <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800182a:	b002      	add	sp, #8
 800182c:	bd70      	pop	{r4, r5, r6, pc}
 800182e:	4770      	bx	lr
 8001830:	40013800 	.word	0x40013800
 8001834:	40013c00 	.word	0x40013c00
 8001838:	40023800 	.word	0x40023800
 800183c:	40020000 	.word	0x40020000

08001840 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001840:	6803      	ldr	r3, [r0, #0]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001848:	d101      	bne.n	800184e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800184a:	2000      	movs	r0, #0
}
 800184c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800184e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001852:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001854:	2300      	movs	r3, #0
 8001856:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001858:	2220      	movs	r2, #32
 800185a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800185e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001862:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001864:	f042 0204 	orr.w	r2, r2, #4
 8001868:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 800186a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
 8001870:	4770      	bx	lr

08001872 <I2C_WaitOnFlagUntilTimeout>:
{
 8001872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001876:	4606      	mov	r6, r0
 8001878:	460c      	mov	r4, r1
 800187a:	4617      	mov	r7, r2
 800187c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800187e:	e03b      	b.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001880:	f7ff fe64 	bl	800154c <HAL_GetTick>
 8001884:	9b06      	ldr	r3, [sp, #24]
 8001886:	1ac0      	subs	r0, r0, r3
 8001888:	4540      	cmp	r0, r8
 800188a:	d802      	bhi.n	8001892 <I2C_WaitOnFlagUntilTimeout+0x20>
 800188c:	f1b8 0f00 	cmp.w	r8, #0
 8001890:	d132      	bne.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001892:	2d01      	cmp	r5, #1
 8001894:	d018      	beq.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001896:	6833      	ldr	r3, [r6, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	ea24 0303 	bic.w	r3, r4, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	429f      	cmp	r7, r3
 80018a8:	d126      	bne.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018ae:	2220      	movs	r2, #32
 80018b0:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018b4:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018b8:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80018ba:	f042 0220 	orr.w	r2, r2, #32
 80018be:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80018c0:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 80018c4:	2001      	movs	r0, #1
 80018c6:	e027      	b.n	8001918 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018c8:	6833      	ldr	r3, [r6, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	ea24 0303 	bic.w	r3, r4, r3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	e7e5      	b.n	80018a6 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018da:	6833      	ldr	r3, [r6, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	ea24 0c03 	bic.w	ip, r4, r3
 80018e2:	fa1f fc8c 	uxth.w	ip, ip
 80018e6:	fabc fc8c 	clz	ip, ip
 80018ea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80018ee:	4567      	cmp	r7, ip
 80018f0:	d111      	bne.n	8001916 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80018f2:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80018f6:	d1c3      	bne.n	8001880 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f8:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80018fc:	2d01      	cmp	r5, #1
 80018fe:	d0ec      	beq.n	80018da <I2C_WaitOnFlagUntilTimeout+0x68>
 8001900:	6833      	ldr	r3, [r6, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	ea24 0c03 	bic.w	ip, r4, r3
 8001908:	fa1f fc8c 	uxth.w	ip, ip
 800190c:	fabc fc8c 	clz	ip, ip
 8001910:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001914:	e7eb      	b.n	80018ee <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001916:	2000      	movs	r0, #0
}
 8001918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800191c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800191c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001920:	4605      	mov	r5, r0
 8001922:	460e      	mov	r6, r1
 8001924:	4690      	mov	r8, r2
 8001926:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001928:	e053      	b.n	80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001930:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001938:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800193e:	2220      	movs	r2, #32
 8001940:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001944:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001948:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800194a:	f042 0204 	orr.w	r2, r2, #4
 800194e:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001950:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
 8001956:	e04a      	b.n	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001958:	f7ff fdf8 	bl	800154c <HAL_GetTick>
 800195c:	eba0 0009 	sub.w	r0, r0, r9
 8001960:	4540      	cmp	r0, r8
 8001962:	d802      	bhi.n	800196a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8001964:	f1b8 0f00 	cmp.w	r8, #0
 8001968:	d133      	bne.n	80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800196a:	2f01      	cmp	r7, #1
 800196c:	d017      	beq.n	800199e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 800196e:	682b      	ldr	r3, [r5, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	ea26 0303 	bic.w	r3, r6, r3
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b00      	subs	r3, #0
 800197a:	bf18      	it	ne
 800197c:	2301      	movne	r3, #1
 800197e:	b343      	cbz	r3, 80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001984:	2220      	movs	r2, #32
 8001986:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800198a:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800198e:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001990:	f042 0220 	orr.w	r2, r2, #32
 8001994:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001996:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 800199a:	2001      	movs	r0, #1
 800199c:	e027      	b.n	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	ea26 0303 	bic.w	r3, r6, r3
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b00      	subs	r3, #0
 80019aa:	bf18      	it	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	e7e6      	b.n	800197e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	699c      	ldr	r4, [r3, #24]
 80019b4:	ea26 0404 	bic.w	r4, r6, r4
 80019b8:	b2a4      	uxth	r4, r4
 80019ba:	3c00      	subs	r4, #0
 80019bc:	bf18      	it	ne
 80019be:	2401      	movne	r4, #1
 80019c0:	b1a4      	cbz	r4, 80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80019ca:	d1ae      	bne.n	800192a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80019cc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80019d0:	d1c2      	bne.n	8001958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019d2:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80019d6:	2f01      	cmp	r7, #1
 80019d8:	d1ea      	bne.n	80019b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 80019da:	682b      	ldr	r3, [r5, #0]
 80019dc:	695c      	ldr	r4, [r3, #20]
 80019de:	ea26 0404 	bic.w	r4, r6, r4
 80019e2:	b2a4      	uxth	r4, r4
 80019e4:	3c00      	subs	r4, #0
 80019e6:	bf18      	it	ne
 80019e8:	2401      	movne	r4, #1
 80019ea:	e7e9      	b.n	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 80019ec:	2000      	movs	r0, #0
}
 80019ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080019f2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80019f2:	b570      	push	{r4, r5, r6, lr}
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a02:	d121      	bne.n	8001a48 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff ff1b 	bl	8001840 <I2C_IsAcknowledgeFailed>
 8001a0a:	b9f8      	cbnz	r0, 8001a4c <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001a0c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001a10:	d0f3      	beq.n	80019fa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a12:	f7ff fd9b 	bl	800154c <HAL_GetTick>
 8001a16:	1b80      	subs	r0, r0, r6
 8001a18:	42a8      	cmp	r0, r5
 8001a1a:	d801      	bhi.n	8001a20 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001a1c:	2d00      	cmp	r5, #0
 8001a1e:	d1ec      	bne.n	80019fa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a28:	d1e7      	bne.n	80019fa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a34:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a38:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001a40:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001a44:	2001      	movs	r0, #1
 8001a46:	e000      	b.n	8001a4a <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001a48:	2000      	movs	r0, #0
}
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	e7fc      	b.n	8001a4a <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08001a50 <I2C_RequestMemoryWrite>:
{
 8001a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a54:	b085      	sub	sp, #20
 8001a56:	4604      	mov	r4, r0
 8001a58:	460d      	mov	r5, r1
 8001a5a:	4691      	mov	r9, r2
 8001a5c:	461f      	mov	r7, r3
 8001a5e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8001a62:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a64:	6803      	ldr	r3, [r0, #0]
 8001a66:	6819      	ldr	r1, [r3, #0]
 8001a68:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001a6c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a6e:	9600      	str	r6, [sp, #0]
 8001a70:	4643      	mov	r3, r8
 8001a72:	2200      	movs	r2, #0
 8001a74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a78:	f7ff fefb 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	b960      	cbnz	r0, 8001a98 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001a84:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a86:	4633      	mov	r3, r6
 8001a88:	4642      	mov	r2, r8
 8001a8a:	4926      	ldr	r1, [pc, #152]	@ (8001b24 <I2C_RequestMemoryWrite+0xd4>)
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff ff45 	bl	800191c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a92:	b168      	cbz	r0, 8001ab0 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e008      	b.n	8001aaa <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001aa0:	d002      	beq.n	8001aa8 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aa6:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001aa8:	2003      	movs	r0, #3
}
 8001aaa:	b005      	add	sp, #20
 8001aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9303      	str	r3, [sp, #12]
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	9203      	str	r2, [sp, #12]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	9303      	str	r3, [sp, #12]
 8001abe:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac0:	4632      	mov	r2, r6
 8001ac2:	4641      	mov	r1, r8
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7ff ff94 	bl	80019f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aca:	b930      	cbnz	r0, 8001ada <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001acc:	2f01      	cmp	r7, #1
 8001ace:	d10f      	bne.n	8001af0 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	fa5f f689 	uxtb.w	r6, r9
 8001ad6:	611e      	str	r6, [r3, #16]
 8001ad8:	e7e7      	b.n	8001aaa <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ada:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d001      	beq.n	8001ae4 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	e7e2      	b.n	8001aaa <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae4:	6822      	ldr	r2, [r4, #0]
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e7f7      	b.n	8001ae0 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001af6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af8:	4632      	mov	r2, r6
 8001afa:	4641      	mov	r1, r8
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ff78 	bl	80019f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b02:	b920      	cbnz	r0, 8001b0e <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	fa5f f689 	uxtb.w	r6, r9
 8001b0a:	611e      	str	r6, [r3, #16]
 8001b0c:	e7cd      	b.n	8001aaa <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d001      	beq.n	8001b18 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001b14:	2001      	movs	r0, #1
 8001b16:	e7c8      	b.n	8001aaa <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	6822      	ldr	r2, [r4, #0]
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e7f7      	b.n	8001b14 <I2C_RequestMemoryWrite+0xc4>
 8001b24:	00010002 	.word	0x00010002

08001b28 <I2C_RequestMemoryRead>:
{
 8001b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	4604      	mov	r4, r0
 8001b30:	460d      	mov	r5, r1
 8001b32:	4616      	mov	r6, r2
 8001b34:	4699      	mov	r9, r3
 8001b36:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8001b38:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b3c:	6802      	ldr	r2, [r0, #0]
 8001b3e:	6813      	ldr	r3, [r2, #0]
 8001b40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b44:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b46:	6803      	ldr	r3, [r0, #0]
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001b4e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b50:	f8cd 8000 	str.w	r8, [sp]
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b5c:	f7ff fe89 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	b970      	cbnz	r0, 8001b80 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b62:	fa5f fa85 	uxtb.w	sl, r5
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001b6c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b6e:	4643      	mov	r3, r8
 8001b70:	463a      	mov	r2, r7
 8001b72:	4941      	ldr	r1, [pc, #260]	@ (8001c78 <I2C_RequestMemoryRead+0x150>)
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff fed1 	bl	800191c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b7a:	b168      	cbz	r0, 8001b98 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e008      	b.n	8001b92 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b88:	d002      	beq.n	8001b90 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b8e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001b90:	2003      	movs	r0, #3
}
 8001b92:	b004      	add	sp, #16
 8001b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9303      	str	r3, [sp, #12]
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	9203      	str	r2, [sp, #12]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	9303      	str	r3, [sp, #12]
 8001ba6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba8:	4642      	mov	r2, r8
 8001baa:	4639      	mov	r1, r7
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff ff20 	bl	80019f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bb2:	b980      	cbnz	r0, 8001bd6 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bb4:	f1b9 0f01 	cmp.w	r9, #1
 8001bb8:	d118      	bne.n	8001bec <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	b2f6      	uxtb	r6, r6
 8001bbe:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc0:	4642      	mov	r2, r8
 8001bc2:	4639      	mov	r1, r7
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff ff14 	bl	80019f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bca:	b368      	cbz	r0, 8001c28 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d024      	beq.n	8001c1c <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	e7dd      	b.n	8001b92 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d001      	beq.n	8001be0 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	e7d8      	b.n	8001b92 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	6822      	ldr	r2, [r4, #0]
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e7f7      	b.n	8001bdc <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	0a32      	lsrs	r2, r6, #8
 8001bf0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	4642      	mov	r2, r8
 8001bf4:	4639      	mov	r1, r7
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff fefb 	bl	80019f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bfc:	b918      	cbnz	r0, 8001c06 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	b2f6      	uxtb	r6, r6
 8001c02:	611e      	str	r6, [r3, #16]
 8001c04:	e7dc      	b.n	8001bc0 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d001      	beq.n	8001c10 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	e7c0      	b.n	8001b92 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e7f7      	b.n	8001c0c <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	6822      	ldr	r2, [r4, #0]
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e7d4      	b.n	8001bd2 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c30:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c32:	f8cd 8000 	str.w	r8, [sp]
 8001c36:	463b      	mov	r3, r7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff fe17 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 8001c44:	b968      	cbnz	r0, 8001c62 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c46:	6822      	ldr	r2, [r4, #0]
 8001c48:	f04a 0301 	orr.w	r3, sl, #1
 8001c4c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c4e:	4643      	mov	r3, r8
 8001c50:	463a      	mov	r2, r7
 8001c52:	4909      	ldr	r1, [pc, #36]	@ (8001c78 <I2C_RequestMemoryRead+0x150>)
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff fe61 	bl	800191c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d099      	beq.n	8001b92 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
 8001c60:	e797      	b.n	8001b92 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001c6a:	d002      	beq.n	8001c72 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c70:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001c72:	2003      	movs	r0, #3
 8001c74:	e78d      	b.n	8001b92 <I2C_RequestMemoryRead+0x6a>
 8001c76:	bf00      	nop
 8001c78:	00010002 	.word	0x00010002

08001c7c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	4604      	mov	r4, r0
 8001c80:	460d      	mov	r5, r1
 8001c82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f013 0f04 	tst.w	r3, #4
 8001c8c:	d121      	bne.n	8001cd2 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff fdd6 	bl	8001840 <I2C_IsAcknowledgeFailed>
 8001c94:	b9f8      	cbnz	r0, 8001cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001c96:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001c9a:	d0f3      	beq.n	8001c84 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9c:	f7ff fc56 	bl	800154c <HAL_GetTick>
 8001ca0:	1b80      	subs	r0, r0, r6
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d801      	bhi.n	8001caa <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001ca6:	2d00      	cmp	r5, #0
 8001ca8:	d1ec      	bne.n	8001c84 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f013 0f04 	tst.w	r3, #4
 8001cb2:	d1e7      	bne.n	8001c84 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cbe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cc2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001cca:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001cce:	2001      	movs	r0, #1
 8001cd0:	e000      	b.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8001cd2:	2000      	movs	r0, #0
}
 8001cd4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e7fc      	b.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08001cda <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001cda:	b570      	push	{r4, r5, r6, lr}
 8001cdc:	4604      	mov	r4, r0
 8001cde:	460d      	mov	r5, r1
 8001ce0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ce2:	e014      	b.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce4:	f06f 0210 	mvn.w	r2, #16
 8001ce8:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001cf8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001cfa:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001cfc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001d00:	2001      	movs	r0, #1
 8001d02:	e025      	b.n	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001d0c:	d010      	beq.n	8001d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	6958      	ldr	r0, [r3, #20]
 8001d12:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001d16:	d11a      	bne.n	8001d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d18:	6958      	ldr	r0, [r3, #20]
 8001d1a:	f010 0f10 	tst.w	r0, #16
 8001d1e:	d1e1      	bne.n	8001ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7ff fc14 	bl	800154c <HAL_GetTick>
 8001d24:	1b80      	subs	r0, r0, r6
 8001d26:	42a8      	cmp	r0, r5
 8001d28:	d8ec      	bhi.n	8001d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8001d2a:	2d00      	cmp	r5, #0
 8001d2c:	d1ef      	bne.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8001d2e:	e7e9      	b.n	8001d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d34:	2220      	movs	r2, #32
 8001d36:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d3a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d3e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001d40:	f042 0220 	orr.w	r2, r2, #32
 8001d44:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001d46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	e000      	b.n	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 8001d4e:	2000      	movs	r0, #0
}
 8001d50:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d54 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001d54:	2800      	cmp	r0, #0
 8001d56:	f000 80cc 	beq.w	8001ef2 <HAL_I2C_Init+0x19e>
{
 8001d5a:	b570      	push	{r4, r5, r6, lr}
 8001d5c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d077      	beq.n	8001e56 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d66:	2324      	movs	r3, #36	@ 0x24
 8001d68:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001d6c:	6822      	ldr	r2, [r4, #0]
 8001d6e:	6813      	ldr	r3, [r2, #0]
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	6813      	ldr	r3, [r2, #0]
 8001d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d7e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d80:	6822      	ldr	r2, [r4, #0]
 8001d82:	6813      	ldr	r3, [r2, #0]
 8001d84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001d88:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d8a:	f000 fed3 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d8e:	6862      	ldr	r2, [r4, #4]
 8001d90:	4b5a      	ldr	r3, [pc, #360]	@ (8001efc <HAL_I2C_Init+0x1a8>)
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d864      	bhi.n	8001e60 <HAL_I2C_Init+0x10c>
 8001d96:	4b5a      	ldr	r3, [pc, #360]	@ (8001f00 <HAL_I2C_Init+0x1ac>)
 8001d98:	4298      	cmp	r0, r3
 8001d9a:	bf8c      	ite	hi
 8001d9c:	2300      	movhi	r3, #0
 8001d9e:	2301      	movls	r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 80a8 	bne.w	8001ef6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001da6:	4957      	ldr	r1, [pc, #348]	@ (8001f04 <HAL_I2C_Init+0x1b0>)
 8001da8:	fba1 3100 	umull	r3, r1, r1, r0
 8001dac:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dae:	6825      	ldr	r5, [r4, #0]
 8001db0:	686a      	ldr	r2, [r5, #4]
 8001db2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001db6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001dba:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dbc:	6821      	ldr	r1, [r4, #0]
 8001dbe:	6a0a      	ldr	r2, [r1, #32]
 8001dc0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001dc4:	6866      	ldr	r6, [r4, #4]
 8001dc6:	4d4d      	ldr	r5, [pc, #308]	@ (8001efc <HAL_I2C_Init+0x1a8>)
 8001dc8:	42ae      	cmp	r6, r5
 8001dca:	d84f      	bhi.n	8001e6c <HAL_I2C_Init+0x118>
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dd2:	6821      	ldr	r1, [r4, #0]
 8001dd4:	69ca      	ldr	r2, [r1, #28]
 8001dd6:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001dda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dde:	6865      	ldr	r5, [r4, #4]
 8001de0:	4b46      	ldr	r3, [pc, #280]	@ (8001efc <HAL_I2C_Init+0x1a8>)
 8001de2:	429d      	cmp	r5, r3
 8001de4:	d84c      	bhi.n	8001e80 <HAL_I2C_Init+0x12c>
 8001de6:	1e43      	subs	r3, r0, #1
 8001de8:	006d      	lsls	r5, r5, #1
 8001dea:	fbb3 f3f5 	udiv	r3, r3, r5
 8001dee:	3301      	adds	r3, #1
 8001df0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001df4:	4203      	tst	r3, r0
 8001df6:	d078      	beq.n	8001eea <HAL_I2C_Init+0x196>
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e00:	6821      	ldr	r1, [r4, #0]
 8001e02:	680b      	ldr	r3, [r1, #0]
 8001e04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001e08:	69e2      	ldr	r2, [r4, #28]
 8001e0a:	6a20      	ldr	r0, [r4, #32]
 8001e0c:	4302      	orrs	r2, r0
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e12:	6821      	ldr	r1, [r4, #0]
 8001e14:	688b      	ldr	r3, [r1, #8]
 8001e16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e1e:	6922      	ldr	r2, [r4, #16]
 8001e20:	68e0      	ldr	r0, [r4, #12]
 8001e22:	4302      	orrs	r2, r0
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e28:	6821      	ldr	r1, [r4, #0]
 8001e2a:	68cb      	ldr	r3, [r1, #12]
 8001e2c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e30:	6962      	ldr	r2, [r4, #20]
 8001e32:	69a0      	ldr	r0, [r4, #24]
 8001e34:	4302      	orrs	r2, r0
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	6813      	ldr	r3, [r2, #0]
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	2000      	movs	r0, #0
 8001e46:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001e56:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001e5a:	f7ff fa29 	bl	80012b0 <HAL_I2C_MspInit>
 8001e5e:	e782      	b.n	8001d66 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e60:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <HAL_I2C_Init+0x1b4>)
 8001e62:	4298      	cmp	r0, r3
 8001e64:	bf8c      	ite	hi
 8001e66:	2300      	movhi	r3, #0
 8001e68:	2301      	movls	r3, #1
 8001e6a:	e799      	b.n	8001da0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001e70:	fb05 f303 	mul.w	r3, r5, r3
 8001e74:	4d25      	ldr	r5, [pc, #148]	@ (8001f0c <HAL_I2C_Init+0x1b8>)
 8001e76:	fba5 5303 	umull	r5, r3, r5, r3
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	e7a6      	b.n	8001dce <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e80:	68a6      	ldr	r6, [r4, #8]
 8001e82:	b9be      	cbnz	r6, 8001eb4 <HAL_I2C_Init+0x160>
 8001e84:	1e43      	subs	r3, r0, #1
 8001e86:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001e8a:	fbb3 f3fc 	udiv	r3, r3, ip
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	bb43      	cbnz	r3, 8001eee <HAL_I2C_Init+0x19a>
 8001e9c:	b9c6      	cbnz	r6, 8001ed0 <HAL_I2C_Init+0x17c>
 8001e9e:	1e43      	subs	r3, r0, #1
 8001ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ea4:	fbb3 f3f5 	udiv	r3, r3, r5
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eb2:	e7a3      	b.n	8001dfc <HAL_I2C_Init+0xa8>
 8001eb4:	1e43      	subs	r3, r0, #1
 8001eb6:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001eba:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001ebe:	fbb3 f3fc 	udiv	r3, r3, ip
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	e7e4      	b.n	8001e9a <HAL_I2C_Init+0x146>
 8001ed0:	1e43      	subs	r3, r0, #1
 8001ed2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001ed6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001eda:	fbb3 f3f5 	udiv	r3, r3, r5
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ee8:	e788      	b.n	8001dfc <HAL_I2C_Init+0xa8>
 8001eea:	2304      	movs	r3, #4
 8001eec:	e786      	b.n	8001dfc <HAL_I2C_Init+0xa8>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e784      	b.n	8001dfc <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
}
 8001ef4:	4770      	bx	lr
    return HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	e7ac      	b.n	8001e54 <HAL_I2C_Init+0x100>
 8001efa:	bf00      	nop
 8001efc:	000186a0 	.word	0x000186a0
 8001f00:	001e847f 	.word	0x001e847f
 8001f04:	431bde83 	.word	0x431bde83
 8001f08:	003d08ff 	.word	0x003d08ff
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_I2C_Mem_Write>:
{
 8001f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f14:	b083      	sub	sp, #12
 8001f16:	4604      	mov	r4, r0
 8001f18:	460f      	mov	r7, r1
 8001f1a:	4690      	mov	r8, r2
 8001f1c:	4699      	mov	r9, r3
 8001f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fb14 	bl	800154c <HAL_GetTick>
 8001f24:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f26:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001f2a:	b2c0      	uxtb	r0, r0
 8001f2c:	2820      	cmp	r0, #32
 8001f2e:	d003      	beq.n	8001f38 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001f30:	2002      	movs	r0, #2
}
 8001f32:	b003      	add	sp, #12
 8001f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f38:	9500      	str	r5, [sp, #0]
 8001f3a:	2319      	movs	r3, #25
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	494b      	ldr	r1, [pc, #300]	@ (800206c <HAL_I2C_Mem_Write+0x15c>)
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff fc96 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	2800      	cmp	r0, #0
 8001f48:	f040 8089 	bne.w	800205e <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8001f4c:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f000 8086 	beq.w	8002062 <HAL_I2C_Mem_Write+0x152>
 8001f56:	2301      	movs	r3, #1
 8001f58:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	f012 0f01 	tst.w	r2, #1
 8001f64:	d103      	bne.n	8001f6e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	6813      	ldr	r3, [r2, #0]
 8001f72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f76:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f78:	2321      	movs	r3, #33	@ 0x21
 8001f7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f7e:	2340      	movs	r3, #64	@ 0x40
 8001f80:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001f8a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f8c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8001f90:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f92:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f94:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f96:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <HAL_I2C_Mem_Write+0x160>)
 8001f98:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f9a:	9501      	str	r5, [sp, #4]
 8001f9c:	9600      	str	r6, [sp, #0]
 8001f9e:	464b      	mov	r3, r9
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	4639      	mov	r1, r7
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff fd53 	bl	8001a50 <I2C_RequestMemoryWrite>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d15b      	bne.n	8002066 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8001fae:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d035      	beq.n	8002020 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb4:	462a      	mov	r2, r5
 8001fb6:	4631      	mov	r1, r6
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff fd1a 	bl	80019f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fbe:	bb20      	cbnz	r0, 800200a <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001fc8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001fca:	1c53      	adds	r3, r2, #1
 8001fcc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001fce:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8001fd0:	3901      	subs	r1, #1
 8001fd2:	b289      	uxth	r1, r1
 8001fd4:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001fd6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	6958      	ldr	r0, [r3, #20]
 8001fe4:	f010 0f04 	tst.w	r0, #4
 8001fe8:	d0e1      	beq.n	8001fae <HAL_I2C_Mem_Write+0x9e>
 8001fea:	2900      	cmp	r1, #0
 8001fec:	d0df      	beq.n	8001fae <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fee:	7852      	ldrb	r2, [r2, #1]
 8001ff0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ff2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8001ff8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001ffe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29b      	uxth	r3, r3
 8002006:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002008:	e7d1      	b.n	8001fae <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800200c:	2b04      	cmp	r3, #4
 800200e:	d001      	beq.n	8002014 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8002010:	2001      	movs	r0, #1
 8002012:	e78e      	b.n	8001f32 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	6813      	ldr	r3, [r2, #0]
 8002018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e7f7      	b.n	8002010 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002020:	462a      	mov	r2, r5
 8002022:	4631      	mov	r1, r6
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff fe29 	bl	8001c7c <I2C_WaitOnBTFFlagUntilTimeout>
 800202a:	b150      	cbz	r0, 8002042 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800202e:	2b04      	cmp	r3, #4
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
 8002034:	e77d      	b.n	8001f32 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	6822      	ldr	r2, [r4, #0]
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e7f7      	b.n	8002032 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002042:	6822      	ldr	r2, [r4, #0]
 8002044:	6813      	ldr	r3, [r2, #0]
 8002046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800204c:	2320      	movs	r3, #32
 800204e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002052:	2300      	movs	r3, #0
 8002054:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002058:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 800205c:	e769      	b.n	8001f32 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800205e:	2002      	movs	r0, #2
 8002060:	e767      	b.n	8001f32 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002062:	2002      	movs	r0, #2
 8002064:	e765      	b.n	8001f32 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002066:	2001      	movs	r0, #1
 8002068:	e763      	b.n	8001f32 <HAL_I2C_Mem_Write+0x22>
 800206a:	bf00      	nop
 800206c:	00100002 	.word	0x00100002
 8002070:	ffff0000 	.word	0xffff0000

08002074 <HAL_I2C_Mem_Read>:
{
 8002074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002078:	b087      	sub	sp, #28
 800207a:	4604      	mov	r4, r0
 800207c:	460f      	mov	r7, r1
 800207e:	4690      	mov	r8, r2
 8002080:	4699      	mov	r9, r3
 8002082:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fa62 	bl	800154c <HAL_GetTick>
 8002088:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800208a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800208e:	b2c0      	uxtb	r0, r0
 8002090:	2820      	cmp	r0, #32
 8002092:	d004      	beq.n	800209e <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8002094:	2702      	movs	r7, #2
}
 8002096:	4638      	mov	r0, r7
 8002098:	b007      	add	sp, #28
 800209a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209e:	9500      	str	r5, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	4988      	ldr	r1, [pc, #544]	@ (80022c8 <HAL_I2C_Mem_Read+0x254>)
 80020a6:	4620      	mov	r0, r4
 80020a8:	f7ff fbe3 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 80020ac:	2800      	cmp	r0, #0
 80020ae:	f040 814d 	bne.w	800234c <HAL_I2C_Mem_Read+0x2d8>
    __HAL_LOCK(hi2c);
 80020b2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	f000 814a 	beq.w	8002350 <HAL_I2C_Mem_Read+0x2dc>
 80020bc:	2301      	movs	r3, #1
 80020be:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f012 0f01 	tst.w	r2, #1
 80020ca:	d103      	bne.n	80020d4 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020d4:	6822      	ldr	r2, [r4, #0]
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80020dc:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020de:	2322      	movs	r3, #34	@ 0x22
 80020e0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020e4:	2340      	movs	r3, #64	@ 0x40
 80020e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80020ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80020f0:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020f2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80020f6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80020fa:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fc:	4b73      	ldr	r3, [pc, #460]	@ (80022cc <HAL_I2C_Mem_Read+0x258>)
 80020fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002100:	9501      	str	r5, [sp, #4]
 8002102:	9600      	str	r6, [sp, #0]
 8002104:	464b      	mov	r3, r9
 8002106:	4642      	mov	r2, r8
 8002108:	4639      	mov	r1, r7
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff fd0c 	bl	8001b28 <I2C_RequestMemoryRead>
 8002110:	4607      	mov	r7, r0
 8002112:	2800      	cmp	r0, #0
 8002114:	f040 811e 	bne.w	8002354 <HAL_I2C_Mem_Read+0x2e0>
    if (hi2c->XferSize == 0U)
 8002118:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800211a:	b95b      	cbnz	r3, 8002134 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	9202      	str	r2, [sp, #8]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	9202      	str	r2, [sp, #8]
 8002128:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e075      	b.n	8002220 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 8002134:	2b01      	cmp	r3, #1
 8002136:	d00a      	beq.n	800214e <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8002138:	2b02      	cmp	r3, #2
 800213a:	d01a      	beq.n	8002172 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213c:	2300      	movs	r3, #0
 800213e:	9305      	str	r3, [sp, #20]
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	695a      	ldr	r2, [r3, #20]
 8002144:	9205      	str	r2, [sp, #20]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	9305      	str	r3, [sp, #20]
 800214a:	9b05      	ldr	r3, [sp, #20]
 800214c:	e068      	b.n	8002220 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	6813      	ldr	r3, [r2, #0]
 8002152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002156:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002158:	2300      	movs	r3, #0
 800215a:	9303      	str	r3, [sp, #12]
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	9203      	str	r2, [sp, #12]
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	9203      	str	r2, [sp, #12]
 8002166:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e056      	b.n	8002220 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800217a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002184:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002186:	2300      	movs	r3, #0
 8002188:	9304      	str	r3, [sp, #16]
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	9204      	str	r2, [sp, #16]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	9304      	str	r3, [sp, #16]
 8002194:	9b04      	ldr	r3, [sp, #16]
 8002196:	e043      	b.n	8002220 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002198:	462a      	mov	r2, r5
 800219a:	4631      	mov	r1, r6
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff fd9c 	bl	8001cda <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	f040 80d8 	bne.w	8002358 <HAL_I2C_Mem_Read+0x2e4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80021ae:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80021b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80021b2:	3301      	adds	r3, #1
 80021b4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80021b6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80021b8:	3b01      	subs	r3, #1
 80021ba:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80021bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80021c6:	e02b      	b.n	8002220 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021c8:	9500      	str	r5, [sp, #0]
 80021ca:	4633      	mov	r3, r6
 80021cc:	2200      	movs	r2, #0
 80021ce:	4940      	ldr	r1, [pc, #256]	@ (80022d0 <HAL_I2C_Mem_Read+0x25c>)
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff fb4e 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 80021d6:	2800      	cmp	r0, #0
 80021d8:	f040 80c0 	bne.w	800235c <HAL_I2C_Mem_Read+0x2e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021dc:	6822      	ldr	r2, [r4, #0]
 80021de:	6813      	ldr	r3, [r2, #0]
 80021e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80021ec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80021ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80021f0:	1c53      	adds	r3, r2, #1
 80021f2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80021f4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80021fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29b      	uxth	r3, r3
 8002202:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800220a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800220c:	3301      	adds	r3, #1
 800220e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002210:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002212:	3b01      	subs	r3, #1
 8002214:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002216:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29b      	uxth	r3, r3
 800221e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002220:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8089 	beq.w	800233a <HAL_I2C_Mem_Read+0x2c6>
      if (hi2c->XferSize <= 3U)
 8002228:	2b03      	cmp	r3, #3
 800222a:	d853      	bhi.n	80022d4 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 800222c:	2b01      	cmp	r3, #1
 800222e:	d0b3      	beq.n	8002198 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8002230:	2b02      	cmp	r3, #2
 8002232:	d0c9      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002234:	9500      	str	r5, [sp, #0]
 8002236:	4633      	mov	r3, r6
 8002238:	2200      	movs	r2, #0
 800223a:	4925      	ldr	r1, [pc, #148]	@ (80022d0 <HAL_I2C_Mem_Read+0x25c>)
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff fb18 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 8002242:	2800      	cmp	r0, #0
 8002244:	f040 808c 	bne.w	8002360 <HAL_I2C_Mem_Read+0x2ec>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002250:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002258:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800225a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800225c:	3301      	adds	r3, #1
 800225e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002260:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002266:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29b      	uxth	r3, r3
 800226e:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002270:	9500      	str	r5, [sp, #0]
 8002272:	4633      	mov	r3, r6
 8002274:	2200      	movs	r2, #0
 8002276:	4916      	ldr	r1, [pc, #88]	@ (80022d0 <HAL_I2C_Mem_Read+0x25c>)
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff fafa 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 800227e:	2800      	cmp	r0, #0
 8002280:	d170      	bne.n	8002364 <HAL_I2C_Mem_Read+0x2f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002292:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002294:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002296:	1c53      	adds	r3, r2, #1
 8002298:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800229a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80022a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80022b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80022b2:	3301      	adds	r3, #1
 80022b4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80022b6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80022b8:	3b01      	subs	r3, #1
 80022ba:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80022bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80022c6:	e7ab      	b.n	8002220 <HAL_I2C_Mem_Read+0x1ac>
 80022c8:	00100002 	.word	0x00100002
 80022cc:	ffff0000 	.word	0xffff0000
 80022d0:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d4:	462a      	mov	r2, r5
 80022d6:	4631      	mov	r1, r6
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff fcfe 	bl	8001cda <I2C_WaitOnRXNEFlagUntilTimeout>
 80022de:	2800      	cmp	r0, #0
 80022e0:	d142      	bne.n	8002368 <HAL_I2C_Mem_Read+0x2f4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80022e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80022ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80022ec:	3301      	adds	r3, #1
 80022ee:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80022f0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80022f2:	3a01      	subs	r2, #1
 80022f4:	b292      	uxth	r2, r2
 80022f6:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80022f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29b      	uxth	r3, r3
 8002300:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	6959      	ldr	r1, [r3, #20]
 8002306:	f011 0f04 	tst.w	r1, #4
 800230a:	d089      	beq.n	8002220 <HAL_I2C_Mem_Read+0x1ac>
          if (hi2c->XferSize == 3U)
 800230c:	2a03      	cmp	r2, #3
 800230e:	d00f      	beq.n	8002330 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002316:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002318:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800231a:	3301      	adds	r3, #1
 800231c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800231e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002324:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29b      	uxth	r3, r3
 800232c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800232e:	e777      	b.n	8002220 <HAL_I2C_Mem_Read+0x1ac>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e7ea      	b.n	8002310 <HAL_I2C_Mem_Read+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	2320      	movs	r3, #32
 800233c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	2300      	movs	r3, #0
 8002342:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002346:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 800234a:	e6a4      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 800234c:	2702      	movs	r7, #2
 800234e:	e6a2      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8002350:	2702      	movs	r7, #2
 8002352:	e6a0      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8002354:	2701      	movs	r7, #1
 8002356:	e69e      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8002358:	2701      	movs	r7, #1
 800235a:	e69c      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800235c:	2701      	movs	r7, #1
 800235e:	e69a      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8002360:	2701      	movs	r7, #1
 8002362:	e698      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8002364:	2701      	movs	r7, #1
 8002366:	e696      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 8002368:	2701      	movs	r7, #1
 800236a:	e694      	b.n	8002096 <HAL_I2C_Mem_Read+0x22>

0800236c <HAL_I2C_IsDeviceReady>:
{
 800236c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002370:	b085      	sub	sp, #20
 8002372:	4604      	mov	r4, r0
 8002374:	4688      	mov	r8, r1
 8002376:	4691      	mov	r9, r2
 8002378:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800237a:	f7ff f8e7 	bl	800154c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800237e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b20      	cmp	r3, #32
 8002386:	d003      	beq.n	8002390 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002388:	2002      	movs	r0, #2
}
 800238a:	b005      	add	sp, #20
 800238c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002390:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002392:	9000      	str	r0, [sp, #0]
 8002394:	2319      	movs	r3, #25
 8002396:	2201      	movs	r2, #1
 8002398:	4957      	ldr	r1, [pc, #348]	@ (80024f8 <HAL_I2C_IsDeviceReady+0x18c>)
 800239a:	4620      	mov	r0, r4
 800239c:	f7ff fa69 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	f040 80a0 	bne.w	80024e6 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80023a6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	f000 809d 	beq.w	80024ea <HAL_I2C_IsDeviceReady+0x17e>
 80023b0:	2301      	movs	r3, #1
 80023b2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	f012 0f01 	tst.w	r2, #1
 80023be:	d103      	bne.n	80023c8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023d0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d2:	2324      	movs	r3, #36	@ 0x24
 80023d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d8:	2700      	movs	r7, #0
 80023da:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023dc:	4b47      	ldr	r3, [pc, #284]	@ (80024fc <HAL_I2C_IsDeviceReady+0x190>)
 80023de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80023e0:	e040      	b.n	8002464 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023ea:	d002      	beq.n	80023f2 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023f0:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 80023f2:	2003      	movs	r0, #3
 80023f4:	e7c9      	b.n	800238a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80023f6:	23a0      	movs	r3, #160	@ 0xa0
 80023f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	6953      	ldr	r3, [r2, #20]
 8002400:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002404:	6952      	ldr	r2, [r2, #20]
 8002406:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800240a:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 800240e:	fa5f fc8c 	uxtb.w	ip, ip
 8002412:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8002416:	d009      	beq.n	800242c <HAL_I2C_IsDeviceReady+0xc0>
 8002418:	b943      	cbnz	r3, 800242c <HAL_I2C_IsDeviceReady+0xc0>
 800241a:	b93a      	cbnz	r2, 800242c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800241c:	f7ff f896 	bl	800154c <HAL_GetTick>
 8002420:	1b80      	subs	r0, r0, r6
 8002422:	42a8      	cmp	r0, r5
 8002424:	d8e7      	bhi.n	80023f6 <HAL_I2C_IsDeviceReady+0x8a>
 8002426:	2d00      	cmp	r5, #0
 8002428:	d1e8      	bne.n	80023fc <HAL_I2C_IsDeviceReady+0x90>
 800242a:	e7e4      	b.n	80023f6 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 800242c:	2320      	movs	r3, #32
 800242e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	f012 0f02 	tst.w	r2, #2
 800243a:	d131      	bne.n	80024a0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002442:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800244a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244c:	9600      	str	r6, [sp, #0]
 800244e:	2319      	movs	r3, #25
 8002450:	2201      	movs	r2, #1
 8002452:	4929      	ldr	r1, [pc, #164]	@ (80024f8 <HAL_I2C_IsDeviceReady+0x18c>)
 8002454:	4620      	mov	r0, r4
 8002456:	f7ff fa0c 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 800245a:	2800      	cmp	r0, #0
 800245c:	d149      	bne.n	80024f2 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 800245e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8002460:	454f      	cmp	r7, r9
 8002462:	d238      	bcs.n	80024d6 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002464:	6822      	ldr	r2, [r4, #0]
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800246e:	9600      	str	r6, [sp, #0]
 8002470:	462b      	mov	r3, r5
 8002472:	2200      	movs	r2, #0
 8002474:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff f9fa 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 800247e:	2800      	cmp	r0, #0
 8002480:	d1af      	bne.n	80023e2 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8002488:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800248a:	f7ff f85f 	bl	800154c <HAL_GetTick>
 800248e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002490:	6822      	ldr	r2, [r4, #0]
 8002492:	6953      	ldr	r3, [r2, #20]
 8002494:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002498:	6952      	ldr	r2, [r2, #20]
 800249a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800249e:	e7b4      	b.n	800240a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a8:	2300      	movs	r3, #0
 80024aa:	9303      	str	r3, [sp, #12]
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	9203      	str	r2, [sp, #12]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	9303      	str	r3, [sp, #12]
 80024b6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b8:	9600      	str	r6, [sp, #0]
 80024ba:	2319      	movs	r3, #25
 80024bc:	2201      	movs	r2, #1
 80024be:	490e      	ldr	r1, [pc, #56]	@ (80024f8 <HAL_I2C_IsDeviceReady+0x18c>)
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff f9d6 	bl	8001872 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	b990      	cbnz	r0, 80024ee <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	2320      	movs	r3, #32
 80024ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80024ce:	2300      	movs	r3, #0
 80024d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80024d4:	e759      	b.n	800238a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	2320      	movs	r3, #32
 80024d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80024dc:	2300      	movs	r3, #0
 80024de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80024e2:	2001      	movs	r0, #1
 80024e4:	e751      	b.n	800238a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80024e6:	2002      	movs	r0, #2
 80024e8:	e74f      	b.n	800238a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80024ea:	2002      	movs	r0, #2
 80024ec:	e74d      	b.n	800238a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80024ee:	2001      	movs	r0, #1
 80024f0:	e74b      	b.n	800238a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
 80024f4:	e749      	b.n	800238a <HAL_I2C_IsDeviceReady+0x1e>
 80024f6:	bf00      	nop
 80024f8:	00100002 	.word	0x00100002
 80024fc:	ffff0000 	.word	0xffff0000

08002500 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002500:	2800      	cmp	r0, #0
 8002502:	f000 81e0 	beq.w	80028c6 <HAL_RCC_OscConfig+0x3c6>
{
 8002506:	b570      	push	{r4, r5, r6, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250c:	6803      	ldr	r3, [r0, #0]
 800250e:	f013 0f01 	tst.w	r3, #1
 8002512:	d03b      	beq.n	800258c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002514:	4b9f      	ldr	r3, [pc, #636]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b04      	cmp	r3, #4
 800251e:	d02c      	beq.n	800257a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002520:	4b9c      	ldr	r3, [pc, #624]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002528:	2b08      	cmp	r3, #8
 800252a:	d021      	beq.n	8002570 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	6863      	ldr	r3, [r4, #4]
 800252e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002532:	d04f      	beq.n	80025d4 <HAL_RCC_OscConfig+0xd4>
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002538:	d052      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe0>
 800253a:	4b96      	ldr	r3, [pc, #600]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800254a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254c:	6863      	ldr	r3, [r4, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d050      	beq.n	80025f4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fffb 	bl	800154c <HAL_GetTick>
 8002556:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002558:	4b8e      	ldr	r3, [pc, #568]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002560:	d114      	bne.n	800258c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002562:	f7fe fff3 	bl	800154c <HAL_GetTick>
 8002566:	1b40      	subs	r0, r0, r5
 8002568:	2864      	cmp	r0, #100	@ 0x64
 800256a:	d9f5      	bls.n	8002558 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800256c:	2003      	movs	r0, #3
 800256e:	e1b1      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002570:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002578:	d0d8      	beq.n	800252c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257a:	4b86      	ldr	r3, [pc, #536]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002582:	d003      	beq.n	800258c <HAL_RCC_OscConfig+0x8c>
 8002584:	6863      	ldr	r3, [r4, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 819f 	beq.w	80028ca <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	f013 0f02 	tst.w	r3, #2
 8002592:	d054      	beq.n	800263e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002594:	4b7f      	ldr	r3, [pc, #508]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f013 0f0c 	tst.w	r3, #12
 800259c:	d03e      	beq.n	800261c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b7d      	ldr	r3, [pc, #500]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d033      	beq.n	8002612 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025aa:	68e3      	ldr	r3, [r4, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d068      	beq.n	8002682 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b79      	ldr	r3, [pc, #484]	@ (8002798 <HAL_RCC_OscConfig+0x298>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe ffc9 	bl	800154c <HAL_GetTick>
 80025ba:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	4b75      	ldr	r3, [pc, #468]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f013 0f02 	tst.w	r3, #2
 80025c4:	d154      	bne.n	8002670 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe ffc1 	bl	800154c <HAL_GetTick>
 80025ca:	1b40      	subs	r0, r0, r5
 80025cc:	2802      	cmp	r0, #2
 80025ce:	d9f5      	bls.n	80025bc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80025d0:	2003      	movs	r0, #3
 80025d2:	e17f      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	4a6f      	ldr	r2, [pc, #444]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e7b5      	b.n	800254c <HAL_RCC_OscConfig+0x4c>
 80025e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e7ab      	b.n	800254c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80025f4:	f7fe ffaa 	bl	800154c <HAL_GetTick>
 80025f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b66      	ldr	r3, [pc, #408]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002602:	d0c3      	beq.n	800258c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe ffa2 	bl	800154c <HAL_GetTick>
 8002608:	1b40      	subs	r0, r0, r5
 800260a:	2864      	cmp	r0, #100	@ 0x64
 800260c:	d9f5      	bls.n	80025fa <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800260e:	2003      	movs	r0, #3
 8002610:	e160      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002612:	4b60      	ldr	r3, [pc, #384]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800261a:	d1c6      	bne.n	80025aa <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261c:	4b5d      	ldr	r3, [pc, #372]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f013 0f02 	tst.w	r3, #2
 8002624:	d003      	beq.n	800262e <HAL_RCC_OscConfig+0x12e>
 8002626:	68e3      	ldr	r3, [r4, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 8150 	bne.w	80028ce <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4a59      	ldr	r2, [pc, #356]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002630:	6813      	ldr	r3, [r2, #0]
 8002632:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002636:	6921      	ldr	r1, [r4, #16]
 8002638:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800263c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	f013 0f08 	tst.w	r3, #8
 8002644:	d042      	beq.n	80026cc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002646:	6963      	ldr	r3, [r4, #20]
 8002648:	b36b      	cbz	r3, 80026a6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264a:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_OscConfig+0x298>)
 800264c:	2201      	movs	r2, #1
 800264e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe ff7b 	bl	800154c <HAL_GetTick>
 8002656:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002658:	4b4e      	ldr	r3, [pc, #312]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 800265a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265c:	f013 0f02 	tst.w	r3, #2
 8002660:	d134      	bne.n	80026cc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe ff73 	bl	800154c <HAL_GetTick>
 8002666:	1b40      	subs	r0, r0, r5
 8002668:	2802      	cmp	r0, #2
 800266a:	d9f5      	bls.n	8002658 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800266c:	2003      	movs	r0, #3
 800266e:	e131      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4a48      	ldr	r2, [pc, #288]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002672:	6813      	ldr	r3, [r2, #0]
 8002674:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002678:	6921      	ldr	r1, [r4, #16]
 800267a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e7dd      	b.n	800263e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b45      	ldr	r3, [pc, #276]	@ (8002798 <HAL_RCC_OscConfig+0x298>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002688:	f7fe ff60 	bl	800154c <HAL_GetTick>
 800268c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f013 0f02 	tst.w	r3, #2
 8002696:	d0d2      	beq.n	800263e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe ff58 	bl	800154c <HAL_GetTick>
 800269c:	1b40      	subs	r0, r0, r5
 800269e:	2802      	cmp	r0, #2
 80026a0:	d9f5      	bls.n	800268e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80026a2:	2003      	movs	r0, #3
 80026a4:	e116      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002798 <HAL_RCC_OscConfig+0x298>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe ff4d 	bl	800154c <HAL_GetTick>
 80026b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b8:	f013 0f02 	tst.w	r3, #2
 80026bc:	d006      	beq.n	80026cc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe ff45 	bl	800154c <HAL_GetTick>
 80026c2:	1b40      	subs	r0, r0, r5
 80026c4:	2802      	cmp	r0, #2
 80026c6:	d9f5      	bls.n	80026b4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80026c8:	2003      	movs	r0, #3
 80026ca:	e103      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	f013 0f04 	tst.w	r3, #4
 80026d2:	d077      	beq.n	80027c4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80026dc:	d133      	bne.n	8002746 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 80026e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026f6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_RCC_OscConfig+0x29c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002700:	d023      	beq.n	800274a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002702:	68a3      	ldr	r3, [r4, #8]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d034      	beq.n	8002772 <HAL_RCC_OscConfig+0x272>
 8002708:	2b05      	cmp	r3, #5
 800270a:	d038      	beq.n	800277e <HAL_RCC_OscConfig+0x27e>
 800270c:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 800270e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	671a      	str	r2, [r3, #112]	@ 0x70
 8002716:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002718:	f022 0204 	bic.w	r2, r2, #4
 800271c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271e:	68a3      	ldr	r3, [r4, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d03d      	beq.n	80027a0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe ff12 	bl	800154c <HAL_GetTick>
 8002728:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272e:	f013 0f02 	tst.w	r3, #2
 8002732:	d146      	bne.n	80027c2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe ff0a 	bl	800154c <HAL_GetTick>
 8002738:	1b80      	subs	r0, r0, r6
 800273a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800273e:	4298      	cmp	r0, r3
 8002740:	d9f3      	bls.n	800272a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002742:	2003      	movs	r0, #3
 8002744:	e0c6      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2500      	movs	r5, #0
 8002748:	e7d6      	b.n	80026f8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4a14      	ldr	r2, [pc, #80]	@ (800279c <HAL_RCC_OscConfig+0x29c>)
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002752:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002754:	f7fe fefa 	bl	800154c <HAL_GetTick>
 8002758:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <HAL_RCC_OscConfig+0x29c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002762:	d1ce      	bne.n	8002702 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fef2 	bl	800154c <HAL_GetTick>
 8002768:	1b80      	subs	r0, r0, r6
 800276a:	2802      	cmp	r0, #2
 800276c:	d9f5      	bls.n	800275a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800276e:	2003      	movs	r0, #3
 8002770:	e0b0      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002772:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002774:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
 800277c:	e7cf      	b.n	800271e <HAL_RCC_OscConfig+0x21e>
 800277e:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_RCC_OscConfig+0x294>)
 8002780:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002782:	f042 0204 	orr.w	r2, r2, #4
 8002786:	671a      	str	r2, [r3, #112]	@ 0x70
 8002788:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002790:	e7c5      	b.n	800271e <HAL_RCC_OscConfig+0x21e>
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	42470000 	.word	0x42470000
 800279c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe fed4 	bl	800154c <HAL_GetTick>
 80027a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	4b52      	ldr	r3, [pc, #328]	@ (80028f0 <HAL_RCC_OscConfig+0x3f0>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	f013 0f02 	tst.w	r3, #2
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe fecc 	bl	800154c <HAL_GetTick>
 80027b4:	1b80      	subs	r0, r0, r6
 80027b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027ba:	4298      	cmp	r0, r3
 80027bc:	d9f3      	bls.n	80027a6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80027be:	2003      	movs	r0, #3
 80027c0:	e088      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027c2:	b9ed      	cbnz	r5, 8002800 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c4:	69a3      	ldr	r3, [r4, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8083 	beq.w	80028d2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027cc:	4a48      	ldr	r2, [pc, #288]	@ (80028f0 <HAL_RCC_OscConfig+0x3f0>)
 80027ce:	6892      	ldr	r2, [r2, #8]
 80027d0:	f002 020c 	and.w	r2, r2, #12
 80027d4:	2a08      	cmp	r2, #8
 80027d6:	d051      	beq.n	800287c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d017      	beq.n	800280c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b45      	ldr	r3, [pc, #276]	@ (80028f4 <HAL_RCC_OscConfig+0x3f4>)
 80027de:	2200      	movs	r2, #0
 80027e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe feb3 	bl	800154c <HAL_GetTick>
 80027e6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e8:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <HAL_RCC_OscConfig+0x3f0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80027f0:	d042      	beq.n	8002878 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fe feab 	bl	800154c <HAL_GetTick>
 80027f6:	1b00      	subs	r0, r0, r4
 80027f8:	2802      	cmp	r0, #2
 80027fa:	d9f5      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80027fc:	2003      	movs	r0, #3
 80027fe:	e069      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002800:	4a3b      	ldr	r2, [pc, #236]	@ (80028f0 <HAL_RCC_OscConfig+0x3f0>)
 8002802:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40
 800280a:	e7db      	b.n	80027c4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_RCC_OscConfig+0x3f4>)
 800280e:	2200      	movs	r2, #0
 8002810:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002812:	f7fe fe9b 	bl	800154c <HAL_GetTick>
 8002816:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002818:	4b35      	ldr	r3, [pc, #212]	@ (80028f0 <HAL_RCC_OscConfig+0x3f0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002820:	d006      	beq.n	8002830 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe fe93 	bl	800154c <HAL_GetTick>
 8002826:	1b40      	subs	r0, r0, r5
 8002828:	2802      	cmp	r0, #2
 800282a:	d9f5      	bls.n	8002818 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800282c:	2003      	movs	r0, #3
 800282e:	e051      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002830:	69e3      	ldr	r3, [r4, #28]
 8002832:	6a22      	ldr	r2, [r4, #32]
 8002834:	4313      	orrs	r3, r2
 8002836:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002838:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800283c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800283e:	0852      	lsrs	r2, r2, #1
 8002840:	3a01      	subs	r2, #1
 8002842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002846:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002848:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800284c:	4a28      	ldr	r2, [pc, #160]	@ (80028f0 <HAL_RCC_OscConfig+0x3f0>)
 800284e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b28      	ldr	r3, [pc, #160]	@ (80028f4 <HAL_RCC_OscConfig+0x3f4>)
 8002852:	2201      	movs	r2, #1
 8002854:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002856:	f7fe fe79 	bl	800154c <HAL_GetTick>
 800285a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <HAL_RCC_OscConfig+0x3f0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fe71 	bl	800154c <HAL_GetTick>
 800286a:	1b00      	subs	r0, r0, r4
 800286c:	2802      	cmp	r0, #2
 800286e:	d9f5      	bls.n	800285c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002870:	2003      	movs	r0, #3
 8002872:	e02f      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002874:	2000      	movs	r0, #0
 8002876:	e02d      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
 8002878:	2000      	movs	r0, #0
 800287a:	e02b      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	2b01      	cmp	r3, #1
 800287e:	d02b      	beq.n	80028d8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_RCC_OscConfig+0x3f0>)
 8002882:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002888:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288a:	4291      	cmp	r1, r2
 800288c:	d126      	bne.n	80028dc <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002892:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002894:	428a      	cmp	r2, r1
 8002896:	d123      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002898:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800289e:	401a      	ands	r2, r3
 80028a0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80028a4:	d11e      	bne.n	80028e4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80028aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80028b4:	d118      	bne.n	80028e8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80028ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028bc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80028c0:	d114      	bne.n	80028ec <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80028c2:	2000      	movs	r0, #0
 80028c4:	e006      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
}
 80028c8:	4770      	bx	lr
        return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
 80028cc:	e002      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80028d2:	2000      	movs	r0, #0
}
 80028d4:	b002      	add	sp, #8
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80028d8:	2001      	movs	r0, #1
 80028da:	e7fb      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
 80028de:	e7f9      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
 80028e0:	2001      	movs	r0, #1
 80028e2:	e7f7      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
 80028e4:	2001      	movs	r0, #1
 80028e6:	e7f5      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
 80028e8:	2001      	movs	r0, #1
 80028ea:	e7f3      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
 80028ec:	2001      	movs	r0, #1
 80028ee:	e7f1      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	42470000 	.word	0x42470000

080028f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028fa:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d001      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002906:	482f      	ldr	r0, [pc, #188]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xcc>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002908:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800290a:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002918:	d02c      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800291c:	6858      	ldr	r0, [r3, #4]
 800291e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002922:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002926:	ebbc 0c00 	subs.w	ip, ip, r0
 800292a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800292e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002932:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002936:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800293a:	ebb1 010c 	subs.w	r1, r1, ip
 800293e:	eb63 030e 	sbc.w	r3, r3, lr
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002948:	00c9      	lsls	r1, r1, #3
 800294a:	eb11 0c00 	adds.w	ip, r1, r0
 800294e:	f143 0300 	adc.w	r3, r3, #0
 8002952:	0299      	lsls	r1, r3, #10
 8002954:	2300      	movs	r3, #0
 8002956:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800295a:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800295e:	f7fe f993 	bl	8000c88 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002962:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800296a:	3301      	adds	r3, #1
 800296c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800296e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002972:	e7c9      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x10>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002976:	6858      	ldr	r0, [r3, #4]
 8002978:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800297c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002980:	ebbc 0c00 	subs.w	ip, ip, r0
 8002984:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002988:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800298c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002990:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002994:	ebb1 010c 	subs.w	r1, r1, ip
 8002998:	eb63 030e 	sbc.w	r3, r3, lr
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a2:	00c9      	lsls	r1, r1, #3
 80029a4:	eb11 0c00 	adds.w	ip, r1, r0
 80029a8:	f143 0300 	adc.w	r3, r3, #0
 80029ac:	0299      	lsls	r1, r3, #10
 80029ae:	2300      	movs	r3, #0
 80029b0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80029b4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80029b8:	f7fe f966 	bl	8000c88 <__aeabi_uldivmod>
 80029bc:	e7d1      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x6a>
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	00f42400 	.word	0x00f42400

080029c8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80029c8:	2800      	cmp	r0, #0
 80029ca:	f000 809b 	beq.w	8002b04 <HAL_RCC_ClockConfig+0x13c>
{
 80029ce:	b570      	push	{r4, r5, r6, lr}
 80029d0:	460d      	mov	r5, r1
 80029d2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b14 <HAL_RCC_ClockConfig+0x14c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	428b      	cmp	r3, r1
 80029de:	d208      	bcs.n	80029f2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e0:	b2cb      	uxtb	r3, r1
 80029e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002b14 <HAL_RCC_ClockConfig+0x14c>)
 80029e4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	428b      	cmp	r3, r1
 80029ee:	f040 808b 	bne.w	8002b08 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	f013 0f02 	tst.w	r3, #2
 80029f8:	d017      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fa:	f013 0f04 	tst.w	r3, #4
 80029fe:	d004      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a00:	4a45      	ldr	r2, [pc, #276]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a02:	6893      	ldr	r3, [r2, #8]
 8002a04:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a08:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	f013 0f08 	tst.w	r3, #8
 8002a10:	d004      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a12:	4a41      	ldr	r2, [pc, #260]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a14:	6893      	ldr	r3, [r2, #8]
 8002a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a1a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a1e:	6893      	ldr	r3, [r2, #8]
 8002a20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a24:	68a1      	ldr	r1, [r4, #8]
 8002a26:	430b      	orrs	r3, r1
 8002a28:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	f013 0f01 	tst.w	r3, #1
 8002a30:	d032      	beq.n	8002a98 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	6863      	ldr	r3, [r4, #4]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d021      	beq.n	8002a7c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a38:	1e9a      	subs	r2, r3, #2
 8002a3a:	2a01      	cmp	r2, #1
 8002a3c:	d925      	bls.n	8002a8a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4a36      	ldr	r2, [pc, #216]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	f012 0f02 	tst.w	r2, #2
 8002a46:	d061      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a48:	4933      	ldr	r1, [pc, #204]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a4a:	688a      	ldr	r2, [r1, #8]
 8002a4c:	f022 0203 	bic.w	r2, r2, #3
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002a54:	f7fe fd7a 	bl	800154c <HAL_GetTick>
 8002a58:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	6862      	ldr	r2, [r4, #4]
 8002a64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fe fd6f 	bl	800154c <HAL_GetTick>
 8002a6e:	1b80      	subs	r0, r0, r6
 8002a70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a74:	4298      	cmp	r0, r3
 8002a76:	d9f0      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002a78:	2003      	movs	r0, #3
 8002a7a:	e042      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7c:	4a26      	ldr	r2, [pc, #152]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002a84:	d1e0      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a86:	2001      	movs	r0, #1
 8002a88:	e03b      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4a23      	ldr	r2, [pc, #140]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002a92:	d1d9      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
 8002a96:	e034      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a98:	4b1e      	ldr	r3, [pc, #120]	@ (8002b14 <HAL_RCC_ClockConfig+0x14c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	42ab      	cmp	r3, r5
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa4:	b2ea      	uxtb	r2, r5
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <HAL_RCC_ClockConfig+0x14c>)
 8002aa8:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	42ab      	cmp	r3, r5
 8002ab2:	d12d      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	f013 0f04 	tst.w	r3, #4
 8002aba:	d006      	beq.n	8002aca <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abc:	4a16      	ldr	r2, [pc, #88]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002abe:	6893      	ldr	r3, [r2, #8]
 8002ac0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002ac4:	68e1      	ldr	r1, [r4, #12]
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	f013 0f08 	tst.w	r3, #8
 8002ad0:	d007      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002ad4:	6893      	ldr	r3, [r2, #8]
 8002ad6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002ada:	6921      	ldr	r1, [r4, #16]
 8002adc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ae0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae2:	f7ff ff09 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <HAL_RCC_ClockConfig+0x150>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002aee:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <HAL_RCC_ClockConfig+0x154>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	40d8      	lsrs	r0, r3
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <HAL_RCC_ClockConfig+0x158>)
 8002af6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_RCC_ClockConfig+0x15c>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	f7fe fcda 	bl	80014b4 <HAL_InitTick>
  return HAL_OK;
 8002b00:	2000      	movs	r0, #0
}
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002b04:	2001      	movs	r0, #1
}
 8002b06:	4770      	bx	lr
      return HAL_ERROR;
 8002b08:	2001      	movs	r0, #1
 8002b0a:	e7fa      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	e7f8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002b10:	2001      	movs	r0, #1
 8002b12:	e7f6      	b.n	8002b02 <HAL_RCC_ClockConfig+0x13a>
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08005db0 	.word	0x08005db0
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000008 	.word	0x20000008

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002b28:	4b01      	ldr	r3, [pc, #4]	@ (8002b30 <HAL_RCC_GetHCLKFreq+0x8>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b36:	f7ff fff7 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b3a:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b42:	4a03      	ldr	r2, [pc, #12]	@ (8002b50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b46:	40d8      	lsrs	r0, r3
 8002b48:	bd08      	pop	{r3, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08005da8 	.word	0x08005da8

08002b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b56:	f7ff ffe7 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b5a:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b62:	4a03      	ldr	r2, [pc, #12]	@ (8002b70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b66:	40d8      	lsrs	r0, r3
 8002b68:	bd08      	pop	{r3, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	08005da8 	.word	0x08005da8

08002b74 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b74:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	f102 030c 	add.w	r3, r2, #12
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	320c      	adds	r2, #12
 8002b84:	e842 3100 	strex	r1, r3, [r2]
 8002b88:	2900      	cmp	r1, #0
 8002b8a:	d1f3      	bne.n	8002b74 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	f102 0314 	add.w	r3, r2, #20
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9a:	3214      	adds	r2, #20
 8002b9c:	e842 3100 	strex	r1, r3, [r2]
 8002ba0:	2900      	cmp	r1, #0
 8002ba2:	d1f3      	bne.n	8002b8c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d005      	beq.n	8002bb6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002baa:	2320      	movs	r3, #32
 8002bac:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002bb4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	f102 030c 	add.w	r3, r2, #12
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	320c      	adds	r2, #12
 8002bc6:	e842 3100 	strex	r1, r3, [r2]
 8002bca:	2900      	cmp	r1, #0
 8002bcc:	d1f3      	bne.n	8002bb6 <UART_EndRxTransfer+0x42>
 8002bce:	e7ec      	b.n	8002baa <UART_EndRxTransfer+0x36>

08002bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd4:	6802      	ldr	r2, [r0, #0]
 8002bd6:	6913      	ldr	r3, [r2, #16]
 8002bd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bdc:	68c1      	ldr	r1, [r0, #12]
 8002bde:	430b      	orrs	r3, r1
 8002be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002be2:	6883      	ldr	r3, [r0, #8]
 8002be4:	6902      	ldr	r2, [r0, #16]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	6943      	ldr	r3, [r0, #20]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	69c3      	ldr	r3, [r0, #28]
 8002bee:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002bf0:	6801      	ldr	r1, [r0, #0]
 8002bf2:	68cb      	ldr	r3, [r1, #12]
 8002bf4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002bf8:	f023 030c 	bic.w	r3, r3, #12
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c00:	6802      	ldr	r2, [r0, #0]
 8002c02:	6953      	ldr	r3, [r2, #20]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c08:	6981      	ldr	r1, [r0, #24]
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c0e:	6803      	ldr	r3, [r0, #0]
 8002c10:	4a31      	ldr	r2, [pc, #196]	@ (8002cd8 <UART_SetConfig+0x108>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d006      	beq.n	8002c24 <UART_SetConfig+0x54>
 8002c16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d002      	beq.n	8002c24 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c1e:	f7ff ff89 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8002c22:	e001      	b.n	8002c28 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c24:	f7ff ff96 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c28:	69e3      	ldr	r3, [r4, #28]
 8002c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c2e:	d029      	beq.n	8002c84 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c30:	2100      	movs	r1, #0
 8002c32:	1803      	adds	r3, r0, r0
 8002c34:	4149      	adcs	r1, r1
 8002c36:	181b      	adds	r3, r3, r0
 8002c38:	f141 0100 	adc.w	r1, r1, #0
 8002c3c:	00c9      	lsls	r1, r1, #3
 8002c3e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1818      	adds	r0, r3, r0
 8002c46:	6863      	ldr	r3, [r4, #4]
 8002c48:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002c4c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002c50:	f141 0100 	adc.w	r1, r1, #0
 8002c54:	f7fe f818 	bl	8000c88 <__aeabi_uldivmod>
 8002c58:	4a20      	ldr	r2, [pc, #128]	@ (8002cdc <UART_SetConfig+0x10c>)
 8002c5a:	fba2 3100 	umull	r3, r1, r2, r0
 8002c5e:	0949      	lsrs	r1, r1, #5
 8002c60:	2364      	movs	r3, #100	@ 0x64
 8002c62:	fb03 0311 	mls	r3, r3, r1, r0
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	3332      	adds	r3, #50	@ 0x32
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c74:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	6821      	ldr	r1, [r4, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }
}
 8002c82:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c84:	2300      	movs	r3, #0
 8002c86:	1802      	adds	r2, r0, r0
 8002c88:	eb43 0103 	adc.w	r1, r3, r3
 8002c8c:	1812      	adds	r2, r2, r0
 8002c8e:	f141 0100 	adc.w	r1, r1, #0
 8002c92:	00c9      	lsls	r1, r1, #3
 8002c94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c98:	00d2      	lsls	r2, r2, #3
 8002c9a:	1810      	adds	r0, r2, r0
 8002c9c:	f141 0100 	adc.w	r1, r1, #0
 8002ca0:	6862      	ldr	r2, [r4, #4]
 8002ca2:	1892      	adds	r2, r2, r2
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	f7fd ffef 	bl	8000c88 <__aeabi_uldivmod>
 8002caa:	4a0c      	ldr	r2, [pc, #48]	@ (8002cdc <UART_SetConfig+0x10c>)
 8002cac:	fba2 3100 	umull	r3, r1, r2, r0
 8002cb0:	0949      	lsrs	r1, r1, #5
 8002cb2:	2364      	movs	r3, #100	@ 0x64
 8002cb4:	fb03 0311 	mls	r3, r3, r1, r0
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	3332      	adds	r3, #50	@ 0x32
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	005a      	lsls	r2, r3, #1
 8002cc4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002cc8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
 8002cd6:	e7d4      	b.n	8002c82 <UART_SetConfig+0xb2>
 8002cd8:	40011000 	.word	0x40011000
 8002cdc:	51eb851f 	.word	0x51eb851f

08002ce0 <UART_WaitOnFlagUntilTimeout>:
{
 8002ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	460e      	mov	r6, r1
 8002cea:	4617      	mov	r7, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf2:	682b      	ldr	r3, [r5, #0]
 8002cf4:	681c      	ldr	r4, [r3, #0]
 8002cf6:	ea36 0404 	bics.w	r4, r6, r4
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2401      	moveq	r4, #1
 8002cfe:	2400      	movne	r4, #0
 8002d00:	42bc      	cmp	r4, r7
 8002d02:	d128      	bne.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002d04:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002d08:	d0f3      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fc1f 	bl	800154c <HAL_GetTick>
 8002d0e:	eba0 0009 	sub.w	r0, r0, r9
 8002d12:	4540      	cmp	r0, r8
 8002d14:	d823      	bhi.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x7e>
 8002d16:	f1b8 0f00 	cmp.w	r8, #0
 8002d1a:	d022      	beq.n	8002d62 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	f012 0f04 	tst.w	r2, #4
 8002d24:	d0e5      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x12>
 8002d26:	2e80      	cmp	r6, #128	@ 0x80
 8002d28:	d0e3      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x12>
 8002d2a:	2e40      	cmp	r6, #64	@ 0x40
 8002d2c:	d0e1      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	f012 0f08 	tst.w	r2, #8
 8002d34:	d0dd      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d36:	2400      	movs	r4, #0
 8002d38:	9401      	str	r4, [sp, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	9201      	str	r2, [sp, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002d44:	4628      	mov	r0, r5
 8002d46:	f7ff ff15 	bl	8002b74 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002d4e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002d52:	2001      	movs	r0, #1
 8002d54:	e000      	b.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002d56:	2000      	movs	r0, #0
}
 8002d58:	b003      	add	sp, #12
 8002d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002d5e:	2003      	movs	r0, #3
 8002d60:	e7fa      	b.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x78>
 8002d62:	2003      	movs	r0, #3
 8002d64:	e7f8      	b.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x78>

08002d66 <HAL_UART_Init>:
  if (huart == NULL)
 8002d66:	b360      	cbz	r0, 8002dc2 <HAL_UART_Init+0x5c>
{
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d70:	b313      	cbz	r3, 8002db8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d72:	2324      	movs	r3, #36	@ 0x24
 8002d74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002d78:	6822      	ldr	r2, [r4, #0]
 8002d7a:	68d3      	ldr	r3, [r2, #12]
 8002d7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d80:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff ff24 	bl	8002bd0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d88:	6822      	ldr	r2, [r4, #0]
 8002d8a:	6913      	ldr	r3, [r2, #16]
 8002d8c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002d90:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	6953      	ldr	r3, [r2, #20]
 8002d96:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002d9a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002d9c:	6822      	ldr	r2, [r4, #0]
 8002d9e:	68d3      	ldr	r3, [r2, #12]
 8002da0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002da4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	2000      	movs	r0, #0
 8002da8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002daa:	2320      	movs	r3, #32
 8002dac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002db0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002db6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002db8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002dbc:	f7fe fab0 	bl	8001320 <HAL_UART_MspInit>
 8002dc0:	e7d7      	b.n	8002d72 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002dc2:	2001      	movs	r0, #1
}
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_UART_Transmit>:
{
 8002dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002dce:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d156      	bne.n	8002e86 <HAL_UART_Transmit+0xc0>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	460d      	mov	r5, r1
 8002ddc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002dde:	2900      	cmp	r1, #0
 8002de0:	d055      	beq.n	8002e8e <HAL_UART_Transmit+0xc8>
 8002de2:	b90a      	cbnz	r2, 8002de8 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
 8002de6:	e04f      	b.n	8002e88 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dec:	2321      	movs	r3, #33	@ 0x21
 8002dee:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002df2:	f7fe fbab 	bl	800154c <HAL_GetTick>
 8002df6:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002df8:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dfc:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e00:	68a3      	ldr	r3, [r4, #8]
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e06:	d002      	beq.n	8002e0e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002e08:	f04f 0800 	mov.w	r8, #0
 8002e0c:	e014      	b.n	8002e38 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0e:	6923      	ldr	r3, [r4, #16]
 8002e10:	b32b      	cbz	r3, 8002e5e <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8002e12:	f04f 0800 	mov.w	r8, #0
 8002e16:	e00f      	b.n	8002e38 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002e1e:	2003      	movs	r0, #3
 8002e20:	e032      	b.n	8002e88 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e22:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002e2e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002e30:	b292      	uxth	r2, r2
 8002e32:	3a01      	subs	r2, #1
 8002e34:	b292      	uxth	r2, r2
 8002e36:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e38:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b193      	cbz	r3, 8002e64 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	9600      	str	r6, [sp, #0]
 8002e40:	463b      	mov	r3, r7
 8002e42:	2200      	movs	r2, #0
 8002e44:	2180      	movs	r1, #128	@ 0x80
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7ff ff4a 	bl	8002ce0 <UART_WaitOnFlagUntilTimeout>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d1e3      	bne.n	8002e18 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002e50:	2d00      	cmp	r5, #0
 8002e52:	d0e6      	beq.n	8002e22 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e54:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e5c:	e7e7      	b.n	8002e2e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002e5e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002e60:	2500      	movs	r5, #0
 8002e62:	e7e9      	b.n	8002e38 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e64:	9600      	str	r6, [sp, #0]
 8002e66:	463b      	mov	r3, r7
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2140      	movs	r1, #64	@ 0x40
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff ff37 	bl	8002ce0 <UART_WaitOnFlagUntilTimeout>
 8002e72:	b918      	cbnz	r0, 8002e7c <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002e74:	2320      	movs	r3, #32
 8002e76:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002e7a:	e005      	b.n	8002e88 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002e82:	2003      	movs	r0, #3
 8002e84:	e000      	b.n	8002e88 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002e86:	2002      	movs	r0, #2
}
 8002e88:	b002      	add	sp, #8
 8002e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002e8e:	2001      	movs	r0, #1
 8002e90:	e7fa      	b.n	8002e88 <HAL_UART_Transmit+0xc2>

08002e92 <bmp085_write_registers>:
#include "main.h"
#include "bmp085.h"

// Internal functions

BMP085_result_t bmp085_write_registers(BMP085_HandleTypeDef *bmp085, uint16_t start, uint8_t *data, uint16_t len) {
 8002e92:	b510      	push	{r4, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	468e      	mov	lr, r1

    if (HAL_I2C_Mem_Write(bmp085->i2c, (bmp085->i2c_addr << 1), start, 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 8002e98:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002e9c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002ea0:	fa1f f18c 	uxth.w	r1, ip
 8002ea4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002ea8:	9402      	str	r4, [sp, #8]
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	9200      	str	r2, [sp, #0]
 8002eae:	2301      	movs	r3, #1
 8002eb0:	4672      	mov	r2, lr
 8002eb2:	6800      	ldr	r0, [r0, #0]
 8002eb4:	f7ff f82c 	bl	8001f10 <HAL_I2C_Mem_Write>
 8002eb8:	b908      	cbnz	r0, 8002ebe <bmp085_write_registers+0x2c>
        return BMP085_Err;
    }

    return BMP085_Ok;
}
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd10      	pop	{r4, pc}
        return BMP085_Err;
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	e7fb      	b.n	8002eba <bmp085_write_registers+0x28>

08002ec2 <bmp085_read_registers>:

BMP085_result_t bmp085_read_registers(BMP085_HandleTypeDef *bmp085, uint16_t start, uint8_t *data, uint16_t len) {
 8002ec2:	b510      	push	{r4, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	468e      	mov	lr, r1

    if (HAL_I2C_Mem_Read(bmp085->i2c, (bmp085->i2c_addr << 1), start, 1, data, len, HAL_MAX_DELAY) != HAL_OK) {
 8002ec8:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002ecc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002ed0:	fa1f f18c 	uxth.w	r1, ip
 8002ed4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002ed8:	9402      	str	r4, [sp, #8]
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	9200      	str	r2, [sp, #0]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4672      	mov	r2, lr
 8002ee2:	6800      	ldr	r0, [r0, #0]
 8002ee4:	f7ff f8c6 	bl	8002074 <HAL_I2C_Mem_Read>
 8002ee8:	b908      	cbnz	r0, 8002eee <bmp085_read_registers+0x2c>
        return BMP085_Err;
    }

    return BMP085_Ok;
}
 8002eea:	b004      	add	sp, #16
 8002eec:	bd10      	pop	{r4, pc}
        return BMP085_Err;
 8002eee:	2001      	movs	r0, #1
 8002ef0:	e7fb      	b.n	8002eea <bmp085_read_registers+0x28>

08002ef2 <bmp085_get_calibration_values>:

BMP085_result_t bmp085_get_calibration_values(BMP085_HandleTypeDef *bmp085) {
 8002ef2:	b510      	push	{r4, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	4604      	mov	r4, r0

    uint8_t tmp_data[22];

    if (bmp085_read_registers(bmp085, BMP085_REG_CALIB_START, (uint8_t*) &tmp_data, 22) != BMP085_Ok) {
 8002ef8:	2316      	movs	r3, #22
 8002efa:	466a      	mov	r2, sp
 8002efc:	21aa      	movs	r1, #170	@ 0xaa
 8002efe:	f7ff ffe0 	bl	8002ec2 <bmp085_read_registers>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d14e      	bne.n	8002fa4 <bmp085_get_calibration_values+0xb2>
        return BMP085_Err;
    }

    // If we got the data - let's flip the bytes and store the values
    // Notice the cast to preserve sign
    bmp085->calibration_data.ac1 = (int8_t) tmp_data[0] << 8 | tmp_data[1];
 8002f06:	f99d 2000 	ldrsb.w	r2, [sp]
 8002f0a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002f0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f12:	8123      	strh	r3, [r4, #8]
    bmp085->calibration_data.ac2 = (int8_t) tmp_data[2] << 8 | tmp_data[3];
 8002f14:	f99d 2002 	ldrsb.w	r2, [sp, #2]
 8002f18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f20:	8163      	strh	r3, [r4, #10]
    bmp085->calibration_data.ac3 = (int8_t) tmp_data[4] << 8 | tmp_data[5];
 8002f22:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8002f26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f2e:	81a3      	strh	r3, [r4, #12]
    bmp085->calibration_data.ac4 = tmp_data[6] << 8 | tmp_data[7];
 8002f30:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f3c:	81e3      	strh	r3, [r4, #14]
    bmp085->calibration_data.ac5 = tmp_data[8] << 8 | tmp_data[9];
 8002f3e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002f42:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002f46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f4a:	8223      	strh	r3, [r4, #16]
    bmp085->calibration_data.ac6 = tmp_data[10] << 8 | tmp_data[11];
 8002f4c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002f50:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002f54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f58:	8263      	strh	r3, [r4, #18]
    bmp085->calibration_data.b1 = (int8_t) tmp_data[12] << 8 | tmp_data[13];
 8002f5a:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 8002f5e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f66:	82a3      	strh	r3, [r4, #20]
    bmp085->calibration_data.b2 = (int8_t) tmp_data[14] << 8 | tmp_data[15];
 8002f68:	f99d 200e 	ldrsb.w	r2, [sp, #14]
 8002f6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002f70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f74:	82e3      	strh	r3, [r4, #22]
    bmp085->calibration_data.mb = (int8_t) tmp_data[16] << 8 | tmp_data[17];
 8002f76:	f99d 2010 	ldrsb.w	r2, [sp, #16]
 8002f7a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002f7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f82:	8323      	strh	r3, [r4, #24]
    bmp085->calibration_data.mc = (int8_t) tmp_data[18] << 8 | tmp_data[19];
 8002f84:	f99d 2012 	ldrsb.w	r2, [sp, #18]
 8002f88:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002f8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f90:	8363      	strh	r3, [r4, #26]
    bmp085->calibration_data.md = (int8_t) tmp_data[20] << 8 | tmp_data[21];
 8002f92:	f99d 2014 	ldrsb.w	r2, [sp, #20]
 8002f96:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002f9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f9e:	83a3      	strh	r3, [r4, #28]

    return BMP085_Ok;

}
 8002fa0:	b006      	add	sp, #24
 8002fa2:	bd10      	pop	{r4, pc}
        return BMP085_Err;
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	e7fb      	b.n	8002fa0 <bmp085_get_calibration_values+0xae>

08002fa8 <bmp085_init>:

// Public functions

BMP085_result_t bmp085_init(BMP085_HandleTypeDef *bmp085, I2C_HandleTypeDef *i2c, uint16_t i2c_addr) {
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4604      	mov	r4, r0
 8002fac:	460e      	mov	r6, r1
 8002fae:	4615      	mov	r5, r2
    BMP085_DBG("bmp085_init\n");
 8002fb0:	4805      	ldr	r0, [pc, #20]	@ (8002fc8 <bmp085_init+0x20>)
 8002fb2:	f000 fefd 	bl	8003db0 <puts>

    bmp085->i2c = i2c;
 8002fb6:	6026      	str	r6, [r4, #0]
    bmp085->i2c_addr = i2c_addr;
 8002fb8:	80a5      	strh	r5, [r4, #4]

    if (bmp085_get_calibration_values(bmp085) != BMP085_Ok) {
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff ff99 	bl	8002ef2 <bmp085_get_calibration_values>
 8002fc0:	b900      	cbnz	r0, 8002fc4 <bmp085_init+0x1c>
        return BMP085_Err;
    }

    return BMP085_Ok;
}
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
        return BMP085_Err;
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	e7fc      	b.n	8002fc2 <bmp085_init+0x1a>
 8002fc8:	08005dc0 	.word	0x08005dc0

08002fcc <bmp085_get_temperature>:

BMP085_result_t bmp085_get_temperature(BMP085_HandleTypeDef *bmp085, float *temperature) {
 8002fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	460e      	mov	r6, r1

    uint8_t buf[2] = { 0 };
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8ad 3004 	strh.w	r3, [sp, #4]

    buf[0] = BMP085_CMD_TEMP; // Temperature
 8002fdc:	232e      	movs	r3, #46	@ 0x2e
 8002fde:	f88d 3004 	strb.w	r3, [sp, #4]

    if (bmp085_write_registers(bmp085, BMP085_REG_CONTROL, (uint8_t*) &buf, 1) != BMP085_Ok) {
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	aa01      	add	r2, sp, #4
 8002fe6:	21f4      	movs	r1, #244	@ 0xf4
 8002fe8:	f7ff ff53 	bl	8002e92 <bmp085_write_registers>
 8002fec:	b120      	cbz	r0, 8002ff8 <bmp085_get_temperature+0x2c>
        return BMP085_Err;
 8002fee:	2701      	movs	r7, #1
    bmp085->calibration_data.b5 = x1 + x2;

    *temperature = (bmp085->calibration_data.b5 + 8) / pow(2, 4) / 10;

    return BMP085_Ok;
}
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	b003      	add	sp, #12
 8002ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_Delay(5);
 8002ff8:	2005      	movs	r0, #5
 8002ffa:	f7fe faad 	bl	8001558 <HAL_Delay>
    if (bmp085_read_registers(bmp085, BMP085_REG_RESULT, (uint8_t*) &buf, 2) != BMP085_Ok) {
 8002ffe:	2302      	movs	r3, #2
 8003000:	aa01      	add	r2, sp, #4
 8003002:	21f6      	movs	r1, #246	@ 0xf6
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff ff5c 	bl	8002ec2 <bmp085_read_registers>
 800300a:	4607      	mov	r7, r0
 800300c:	2800      	cmp	r0, #0
 800300e:	d13c      	bne.n	800308a <bmp085_get_temperature+0xbe>
    long ut = (buf[0] << 8 | buf[1]);
 8003010:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003014:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003018:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    long x1 = (ut - bmp085->calibration_data.ac6) * bmp085->calibration_data.ac5 / pow(2, 15);
 800301c:	8a62      	ldrh	r2, [r4, #18]
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	8a20      	ldrh	r0, [r4, #16]
 8003022:	fb03 f000 	mul.w	r0, r3, r0
 8003026:	f7fd fa7d 	bl	8000524 <__aeabi_i2d>
 800302a:	2200      	movs	r2, #0
 800302c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8003030:	f7fd fae2 	bl	80005f8 <__aeabi_dmul>
 8003034:	f7fd fd90 	bl	8000b58 <__aeabi_d2iz>
 8003038:	4605      	mov	r5, r0
    long x2 = bmp085->calibration_data.mc * pow(2, 11) / (x1 + bmp085->calibration_data.md);
 800303a:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
 800303e:	f7fd fa71 	bl	8000524 <__aeabi_i2d>
 8003042:	2200      	movs	r2, #0
 8003044:	4b12      	ldr	r3, [pc, #72]	@ (8003090 <bmp085_get_temperature+0xc4>)
 8003046:	f7fd fad7 	bl	80005f8 <__aeabi_dmul>
 800304a:	4680      	mov	r8, r0
 800304c:	4689      	mov	r9, r1
 800304e:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 8003052:	4428      	add	r0, r5
 8003054:	f7fd fa66 	bl	8000524 <__aeabi_i2d>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4640      	mov	r0, r8
 800305e:	4649      	mov	r1, r9
 8003060:	f7fd fbf4 	bl	800084c <__aeabi_ddiv>
 8003064:	f7fd fd78 	bl	8000b58 <__aeabi_d2iz>
    bmp085->calibration_data.b5 = x1 + x2;
 8003068:	4428      	add	r0, r5
 800306a:	6220      	str	r0, [r4, #32]
    *temperature = (bmp085->calibration_data.b5 + 8) / pow(2, 4) / 10;
 800306c:	3008      	adds	r0, #8
 800306e:	f7fd fa59 	bl	8000524 <__aeabi_i2d>
 8003072:	2200      	movs	r2, #0
 8003074:	4b07      	ldr	r3, [pc, #28]	@ (8003094 <bmp085_get_temperature+0xc8>)
 8003076:	f7fd fabf 	bl	80005f8 <__aeabi_dmul>
 800307a:	2200      	movs	r2, #0
 800307c:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <bmp085_get_temperature+0xcc>)
 800307e:	f7fd fbe5 	bl	800084c <__aeabi_ddiv>
 8003082:	f7fd fdb1 	bl	8000be8 <__aeabi_d2f>
 8003086:	6030      	str	r0, [r6, #0]
    return BMP085_Ok;
 8003088:	e7b2      	b.n	8002ff0 <bmp085_get_temperature+0x24>
        return BMP085_Err;
 800308a:	2701      	movs	r7, #1
 800308c:	e7b0      	b.n	8002ff0 <bmp085_get_temperature+0x24>
 800308e:	bf00      	nop
 8003090:	40a00000 	.word	0x40a00000
 8003094:	3fb00000 	.word	0x3fb00000
 8003098:	40240000 	.word	0x40240000

0800309c <bmp085_get_pressure>:

BMP085_result_t bmp085_get_pressure(BMP085_HandleTypeDef *bmp085, float *pressure) {
 800309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a0:	b085      	sub	sp, #20
 80030a2:	4604      	mov	r4, r0
 80030a4:	460f      	mov	r7, r1

    uint8_t buf[3] = { 0 };
 80030a6:	4b74      	ldr	r3, [pc, #464]	@ (8003278 <bmp085_get_pressure+0x1dc>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80030ae:	2300      	movs	r3, #0
 80030b0:	f88d 300e 	strb.w	r3, [sp, #14]

    buf[0] = BMP085_CMD_PRESSURE + (BMP085_OSS_HIGH << 6); // Temperature
 80030b4:	23b4      	movs	r3, #180	@ 0xb4
 80030b6:	f88d 300c 	strb.w	r3, [sp, #12]

    if (bmp085_write_registers(bmp085, BMP085_REG_CONTROL, (uint8_t*) &buf, 1) != BMP085_Ok) {
 80030ba:	2301      	movs	r3, #1
 80030bc:	aa03      	add	r2, sp, #12
 80030be:	21f4      	movs	r1, #244	@ 0xf4
 80030c0:	f7ff fee7 	bl	8002e92 <bmp085_write_registers>
 80030c4:	b128      	cbz	r0, 80030d2 <bmp085_get_pressure+0x36>
        return BMP085_Err;
 80030c6:	f04f 0a01 	mov.w	sl, #1

    *pressure = p;

    return BMP085_Ok;

}
 80030ca:	4650      	mov	r0, sl
 80030cc:	b005      	add	sp, #20
 80030ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    HAL_Delay(30);
 80030d2:	201e      	movs	r0, #30
 80030d4:	f7fe fa40 	bl	8001558 <HAL_Delay>
    if (bmp085_read_registers(bmp085, BMP085_REG_RESULT, (uint8_t*) &buf, 3) != BMP085_Ok) {
 80030d8:	2303      	movs	r3, #3
 80030da:	aa03      	add	r2, sp, #12
 80030dc:	21f6      	movs	r1, #246	@ 0xf6
 80030de:	4620      	mov	r0, r4
 80030e0:	f7ff feef 	bl	8002ec2 <bmp085_read_registers>
 80030e4:	4682      	mov	sl, r0
 80030e6:	2800      	cmp	r0, #0
 80030e8:	f040 80c2 	bne.w	8003270 <bmp085_get_pressure+0x1d4>
    long up = (((long)buf[0] << 16) + ((long)buf[1] << 8) + buf[2]) >> (8 - BMP085_OSS_HIGH);
 80030ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80030f0:	f89d 500d 	ldrb.w	r5, [sp, #13]
 80030f4:	022d      	lsls	r5, r5, #8
 80030f6:	eb05 4503 	add.w	r5, r5, r3, lsl #16
 80030fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80030fe:	441d      	add	r5, r3
 8003100:	11ad      	asrs	r5, r5, #6
    long b6 = bmp085->calibration_data.b5 - 4000;
 8003102:	6a23      	ldr	r3, [r4, #32]
 8003104:	f5a3 6b7a 	sub.w	fp, r3, #4000	@ 0xfa0
    long x1 = (bmp085->calibration_data.b2 * (b6 * b6 / pow(2, 12))) / pow(2, 11);
 8003108:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 800310c:	fb0b f00b 	mul.w	r0, fp, fp
 8003110:	f7fd fa08 	bl	8000524 <__aeabi_i2d>
 8003114:	2200      	movs	r2, #0
 8003116:	4b59      	ldr	r3, [pc, #356]	@ (800327c <bmp085_get_pressure+0x1e0>)
 8003118:	f7fd fa6e 	bl	80005f8 <__aeabi_dmul>
 800311c:	4680      	mov	r8, r0
 800311e:	4689      	mov	r9, r1
 8003120:	4630      	mov	r0, r6
 8003122:	f7fd f9ff 	bl	8000524 <__aeabi_i2d>
 8003126:	4642      	mov	r2, r8
 8003128:	464b      	mov	r3, r9
 800312a:	f7fd fa65 	bl	80005f8 <__aeabi_dmul>
 800312e:	2200      	movs	r2, #0
 8003130:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8003134:	f7fd fa60 	bl	80005f8 <__aeabi_dmul>
 8003138:	f7fd fd0e 	bl	8000b58 <__aeabi_d2iz>
 800313c:	4606      	mov	r6, r0
    long x2 = bmp085->calibration_data.ac2 * b6 / pow(2, 11);
 800313e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8003142:	fb0b f000 	mul.w	r0, fp, r0
 8003146:	f7fd f9ed 	bl	8000524 <__aeabi_i2d>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	e9cd 2300 	strd	r2, r3, [sp]
 8003152:	2200      	movs	r2, #0
 8003154:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8003158:	f7fd fa4e 	bl	80005f8 <__aeabi_dmul>
 800315c:	f7fd fcfc 	bl	8000b58 <__aeabi_d2iz>
    long x3 = x1 + x2;
 8003160:	4406      	add	r6, r0
    long b3 = ((bmp085->calibration_data.ac1 * 4 + x3) << BMP085_OSS_HIGH + 2) / 4;
 8003162:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8003166:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800316a:	0136      	lsls	r6, r6, #4
 800316c:	d47a      	bmi.n	8003264 <bmp085_get_pressure+0x1c8>
 800316e:	10b6      	asrs	r6, r6, #2
    x1 = bmp085->calibration_data.ac2 * b6 / pow(2, 13);
 8003170:	2200      	movs	r2, #0
 8003172:	4b43      	ldr	r3, [pc, #268]	@ (8003280 <bmp085_get_pressure+0x1e4>)
 8003174:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003178:	f7fd fa3e 	bl	80005f8 <__aeabi_dmul>
 800317c:	f7fd fcec 	bl	8000b58 <__aeabi_d2iz>
 8003180:	4683      	mov	fp, r0
    x2 = (bmp085->calibration_data.b1 * (b6 * b6 / pow(2, 12))) / pow(2, 16);
 8003182:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8003186:	f7fd f9cd 	bl	8000524 <__aeabi_i2d>
 800318a:	4642      	mov	r2, r8
 800318c:	464b      	mov	r3, r9
 800318e:	f7fd fa33 	bl	80005f8 <__aeabi_dmul>
 8003192:	2200      	movs	r2, #0
 8003194:	4b3b      	ldr	r3, [pc, #236]	@ (8003284 <bmp085_get_pressure+0x1e8>)
 8003196:	f7fd fa2f 	bl	80005f8 <__aeabi_dmul>
 800319a:	f7fd fcdd 	bl	8000b58 <__aeabi_d2iz>
    x3 = ((x1 + x2) + 2) / pow(2, 2);
 800319e:	4458      	add	r0, fp
 80031a0:	3002      	adds	r0, #2
 80031a2:	f7fd f9bf 	bl	8000524 <__aeabi_i2d>
 80031a6:	2200      	movs	r2, #0
 80031a8:	4b37      	ldr	r3, [pc, #220]	@ (8003288 <bmp085_get_pressure+0x1ec>)
 80031aa:	f7fd fa25 	bl	80005f8 <__aeabi_dmul>
 80031ae:	f7fd fcd3 	bl	8000b58 <__aeabi_d2iz>
    unsigned long b4 = bmp085->calibration_data.ac4 * (unsigned long)(x3 + 32768) / pow(2, 15);
 80031b2:	89e3      	ldrh	r3, [r4, #14]
 80031b4:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 80031b8:	fb03 f000 	mul.w	r0, r3, r0
 80031bc:	f7fd f9a2 	bl	8000504 <__aeabi_ui2d>
 80031c0:	2200      	movs	r2, #0
 80031c2:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80031c6:	f7fd fa17 	bl	80005f8 <__aeabi_dmul>
 80031ca:	f7fd fced 	bl	8000ba8 <__aeabi_d2uiz>
    unsigned long b7 = (unsigned long)(up - b3) * (50000 - BMP085_OSS_HIGH);
 80031ce:	1bad      	subs	r5, r5, r6
 80031d0:	f24c 334e 	movw	r3, #49998	@ 0xc34e
 80031d4:	fb05 f303 	mul.w	r3, r5, r3
    if (b7 < 0x80000000) {
 80031d8:	2b00      	cmp	r3, #0
 80031da:	db45      	blt.n	8003268 <bmp085_get_pressure+0x1cc>
        p = (b7 * 2) / b4;
 80031dc:	4b2b      	ldr	r3, [pc, #172]	@ (800328c <bmp085_get_pressure+0x1f0>)
 80031de:	fb03 f505 	mul.w	r5, r3, r5
 80031e2:	fbb5 f5f0 	udiv	r5, r5, r0
    x1 = (p / pow(2, 8)) * (p / pow(2, 8));
 80031e6:	4628      	mov	r0, r5
 80031e8:	f7fd f99c 	bl	8000524 <__aeabi_i2d>
 80031ec:	4680      	mov	r8, r0
 80031ee:	4689      	mov	r9, r1
 80031f0:	2200      	movs	r2, #0
 80031f2:	4b27      	ldr	r3, [pc, #156]	@ (8003290 <bmp085_get_pressure+0x1f4>)
 80031f4:	f7fd fa00 	bl	80005f8 <__aeabi_dmul>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	f7fd f9fc 	bl	80005f8 <__aeabi_dmul>
 8003200:	f7fd fcaa 	bl	8000b58 <__aeabi_d2iz>
    x1 = (x1 * 3038) / pow(2, 16);
 8003204:	f640 33de 	movw	r3, #3038	@ 0xbde
 8003208:	fb03 f000 	mul.w	r0, r3, r0
 800320c:	f7fd f98a 	bl	8000524 <__aeabi_i2d>
 8003210:	2200      	movs	r2, #0
 8003212:	4b1c      	ldr	r3, [pc, #112]	@ (8003284 <bmp085_get_pressure+0x1e8>)
 8003214:	f7fd f9f0 	bl	80005f8 <__aeabi_dmul>
 8003218:	f7fd fc9e 	bl	8000b58 <__aeabi_d2iz>
 800321c:	4604      	mov	r4, r0
    x2 = (-7357 * p) / pow(2, 16);
 800321e:	481d      	ldr	r0, [pc, #116]	@ (8003294 <bmp085_get_pressure+0x1f8>)
 8003220:	fb05 f000 	mul.w	r0, r5, r0
 8003224:	f7fd f97e 	bl	8000524 <__aeabi_i2d>
 8003228:	2200      	movs	r2, #0
 800322a:	4b16      	ldr	r3, [pc, #88]	@ (8003284 <bmp085_get_pressure+0x1e8>)
 800322c:	f7fd f9e4 	bl	80005f8 <__aeabi_dmul>
 8003230:	f7fd fc92 	bl	8000b58 <__aeabi_d2iz>
    p = p + (x1 + x2 + 3791) / pow(2, 4);
 8003234:	4420      	add	r0, r4
 8003236:	f600 60cf 	addw	r0, r0, #3791	@ 0xecf
 800323a:	f7fd f973 	bl	8000524 <__aeabi_i2d>
 800323e:	2200      	movs	r2, #0
 8003240:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <bmp085_get_pressure+0x1fc>)
 8003242:	f7fd f9d9 	bl	80005f8 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4640      	mov	r0, r8
 800324c:	4649      	mov	r1, r9
 800324e:	f7fd f81d 	bl	800028c <__adddf3>
 8003252:	f7fd fc81 	bl	8000b58 <__aeabi_d2iz>
 8003256:	ee07 0a90 	vmov	s15, r0
    *pressure = p;
 800325a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800325e:	edc7 7a00 	vstr	s15, [r7]
    return BMP085_Ok;
 8003262:	e732      	b.n	80030ca <bmp085_get_pressure+0x2e>
    long b3 = ((bmp085->calibration_data.ac1 * 4 + x3) << BMP085_OSS_HIGH + 2) / 4;
 8003264:	3603      	adds	r6, #3
 8003266:	e782      	b.n	800316e <bmp085_get_pressure+0xd2>
        p = (b7 / b4) * 2;
 8003268:	fbb3 f0f0 	udiv	r0, r3, r0
 800326c:	0045      	lsls	r5, r0, #1
 800326e:	e7ba      	b.n	80031e6 <bmp085_get_pressure+0x14a>
        return BMP085_Err;
 8003270:	f04f 0a01 	mov.w	sl, #1
 8003274:	e729      	b.n	80030ca <bmp085_get_pressure+0x2e>
 8003276:	bf00      	nop
 8003278:	08005d10 	.word	0x08005d10
 800327c:	3f300000 	.word	0x3f300000
 8003280:	3f200000 	.word	0x3f200000
 8003284:	3ef00000 	.word	0x3ef00000
 8003288:	3fd00000 	.word	0x3fd00000
 800328c:	0001869c 	.word	0x0001869c
 8003290:	3f700000 	.word	0x3f700000
 8003294:	ffffe343 	.word	0xffffe343
 8003298:	3fb00000 	.word	0x3fb00000

0800329c <__cvt>:
 800329c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	ec57 6b10 	vmov	r6, r7, d0
 80032a4:	2f00      	cmp	r7, #0
 80032a6:	460c      	mov	r4, r1
 80032a8:	4619      	mov	r1, r3
 80032aa:	463b      	mov	r3, r7
 80032ac:	bfbb      	ittet	lt
 80032ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80032b2:	461f      	movlt	r7, r3
 80032b4:	2300      	movge	r3, #0
 80032b6:	232d      	movlt	r3, #45	@ 0x2d
 80032b8:	700b      	strb	r3, [r1, #0]
 80032ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80032c0:	4691      	mov	r9, r2
 80032c2:	f023 0820 	bic.w	r8, r3, #32
 80032c6:	bfbc      	itt	lt
 80032c8:	4632      	movlt	r2, r6
 80032ca:	4616      	movlt	r6, r2
 80032cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032d0:	d005      	beq.n	80032de <__cvt+0x42>
 80032d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80032d6:	d100      	bne.n	80032da <__cvt+0x3e>
 80032d8:	3401      	adds	r4, #1
 80032da:	2102      	movs	r1, #2
 80032dc:	e000      	b.n	80032e0 <__cvt+0x44>
 80032de:	2103      	movs	r1, #3
 80032e0:	ab03      	add	r3, sp, #12
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	ab02      	add	r3, sp, #8
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	ec47 6b10 	vmov	d0, r6, r7
 80032ec:	4653      	mov	r3, sl
 80032ee:	4622      	mov	r2, r4
 80032f0:	f000 ff46 	bl	8004180 <_dtoa_r>
 80032f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80032f8:	4605      	mov	r5, r0
 80032fa:	d119      	bne.n	8003330 <__cvt+0x94>
 80032fc:	f019 0f01 	tst.w	r9, #1
 8003300:	d00e      	beq.n	8003320 <__cvt+0x84>
 8003302:	eb00 0904 	add.w	r9, r0, r4
 8003306:	2200      	movs	r2, #0
 8003308:	2300      	movs	r3, #0
 800330a:	4630      	mov	r0, r6
 800330c:	4639      	mov	r1, r7
 800330e:	f7fd fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003312:	b108      	cbz	r0, 8003318 <__cvt+0x7c>
 8003314:	f8cd 900c 	str.w	r9, [sp, #12]
 8003318:	2230      	movs	r2, #48	@ 0x30
 800331a:	9b03      	ldr	r3, [sp, #12]
 800331c:	454b      	cmp	r3, r9
 800331e:	d31e      	bcc.n	800335e <__cvt+0xc2>
 8003320:	9b03      	ldr	r3, [sp, #12]
 8003322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003324:	1b5b      	subs	r3, r3, r5
 8003326:	4628      	mov	r0, r5
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	b004      	add	sp, #16
 800332c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003334:	eb00 0904 	add.w	r9, r0, r4
 8003338:	d1e5      	bne.n	8003306 <__cvt+0x6a>
 800333a:	7803      	ldrb	r3, [r0, #0]
 800333c:	2b30      	cmp	r3, #48	@ 0x30
 800333e:	d10a      	bne.n	8003356 <__cvt+0xba>
 8003340:	2200      	movs	r2, #0
 8003342:	2300      	movs	r3, #0
 8003344:	4630      	mov	r0, r6
 8003346:	4639      	mov	r1, r7
 8003348:	f7fd fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800334c:	b918      	cbnz	r0, 8003356 <__cvt+0xba>
 800334e:	f1c4 0401 	rsb	r4, r4, #1
 8003352:	f8ca 4000 	str.w	r4, [sl]
 8003356:	f8da 3000 	ldr.w	r3, [sl]
 800335a:	4499      	add	r9, r3
 800335c:	e7d3      	b.n	8003306 <__cvt+0x6a>
 800335e:	1c59      	adds	r1, r3, #1
 8003360:	9103      	str	r1, [sp, #12]
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e7d9      	b.n	800331a <__cvt+0x7e>

08003366 <__exponent>:
 8003366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003368:	2900      	cmp	r1, #0
 800336a:	bfba      	itte	lt
 800336c:	4249      	neglt	r1, r1
 800336e:	232d      	movlt	r3, #45	@ 0x2d
 8003370:	232b      	movge	r3, #43	@ 0x2b
 8003372:	2909      	cmp	r1, #9
 8003374:	7002      	strb	r2, [r0, #0]
 8003376:	7043      	strb	r3, [r0, #1]
 8003378:	dd29      	ble.n	80033ce <__exponent+0x68>
 800337a:	f10d 0307 	add.w	r3, sp, #7
 800337e:	461d      	mov	r5, r3
 8003380:	270a      	movs	r7, #10
 8003382:	461a      	mov	r2, r3
 8003384:	fbb1 f6f7 	udiv	r6, r1, r7
 8003388:	fb07 1416 	mls	r4, r7, r6, r1
 800338c:	3430      	adds	r4, #48	@ 0x30
 800338e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003392:	460c      	mov	r4, r1
 8003394:	2c63      	cmp	r4, #99	@ 0x63
 8003396:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800339a:	4631      	mov	r1, r6
 800339c:	dcf1      	bgt.n	8003382 <__exponent+0x1c>
 800339e:	3130      	adds	r1, #48	@ 0x30
 80033a0:	1e94      	subs	r4, r2, #2
 80033a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80033a6:	1c41      	adds	r1, r0, #1
 80033a8:	4623      	mov	r3, r4
 80033aa:	42ab      	cmp	r3, r5
 80033ac:	d30a      	bcc.n	80033c4 <__exponent+0x5e>
 80033ae:	f10d 0309 	add.w	r3, sp, #9
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	42ac      	cmp	r4, r5
 80033b6:	bf88      	it	hi
 80033b8:	2300      	movhi	r3, #0
 80033ba:	3302      	adds	r3, #2
 80033bc:	4403      	add	r3, r0
 80033be:	1a18      	subs	r0, r3, r0
 80033c0:	b003      	add	sp, #12
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80033c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80033cc:	e7ed      	b.n	80033aa <__exponent+0x44>
 80033ce:	2330      	movs	r3, #48	@ 0x30
 80033d0:	3130      	adds	r1, #48	@ 0x30
 80033d2:	7083      	strb	r3, [r0, #2]
 80033d4:	70c1      	strb	r1, [r0, #3]
 80033d6:	1d03      	adds	r3, r0, #4
 80033d8:	e7f1      	b.n	80033be <__exponent+0x58>
	...

080033dc <_printf_float>:
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	b08d      	sub	sp, #52	@ 0x34
 80033e2:	460c      	mov	r4, r1
 80033e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80033e8:	4616      	mov	r6, r2
 80033ea:	461f      	mov	r7, r3
 80033ec:	4605      	mov	r5, r0
 80033ee:	f000 fdc7 	bl	8003f80 <_localeconv_r>
 80033f2:	6803      	ldr	r3, [r0, #0]
 80033f4:	9304      	str	r3, [sp, #16]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fc ff3a 	bl	8000270 <strlen>
 80033fc:	2300      	movs	r3, #0
 80033fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8003400:	f8d8 3000 	ldr.w	r3, [r8]
 8003404:	9005      	str	r0, [sp, #20]
 8003406:	3307      	adds	r3, #7
 8003408:	f023 0307 	bic.w	r3, r3, #7
 800340c:	f103 0208 	add.w	r2, r3, #8
 8003410:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003414:	f8d4 b000 	ldr.w	fp, [r4]
 8003418:	f8c8 2000 	str.w	r2, [r8]
 800341c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003420:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003424:	9307      	str	r3, [sp, #28]
 8003426:	f8cd 8018 	str.w	r8, [sp, #24]
 800342a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800342e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003432:	4b9c      	ldr	r3, [pc, #624]	@ (80036a4 <_printf_float+0x2c8>)
 8003434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003438:	f7fd fb78 	bl	8000b2c <__aeabi_dcmpun>
 800343c:	bb70      	cbnz	r0, 800349c <_printf_float+0xc0>
 800343e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003442:	4b98      	ldr	r3, [pc, #608]	@ (80036a4 <_printf_float+0x2c8>)
 8003444:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003448:	f7fd fb52 	bl	8000af0 <__aeabi_dcmple>
 800344c:	bb30      	cbnz	r0, 800349c <_printf_float+0xc0>
 800344e:	2200      	movs	r2, #0
 8003450:	2300      	movs	r3, #0
 8003452:	4640      	mov	r0, r8
 8003454:	4649      	mov	r1, r9
 8003456:	f7fd fb41 	bl	8000adc <__aeabi_dcmplt>
 800345a:	b110      	cbz	r0, 8003462 <_printf_float+0x86>
 800345c:	232d      	movs	r3, #45	@ 0x2d
 800345e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003462:	4a91      	ldr	r2, [pc, #580]	@ (80036a8 <_printf_float+0x2cc>)
 8003464:	4b91      	ldr	r3, [pc, #580]	@ (80036ac <_printf_float+0x2d0>)
 8003466:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800346a:	bf94      	ite	ls
 800346c:	4690      	movls	r8, r2
 800346e:	4698      	movhi	r8, r3
 8003470:	2303      	movs	r3, #3
 8003472:	6123      	str	r3, [r4, #16]
 8003474:	f02b 0304 	bic.w	r3, fp, #4
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	f04f 0900 	mov.w	r9, #0
 800347e:	9700      	str	r7, [sp, #0]
 8003480:	4633      	mov	r3, r6
 8003482:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003484:	4621      	mov	r1, r4
 8003486:	4628      	mov	r0, r5
 8003488:	f000 f9d2 	bl	8003830 <_printf_common>
 800348c:	3001      	adds	r0, #1
 800348e:	f040 808d 	bne.w	80035ac <_printf_float+0x1d0>
 8003492:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003496:	b00d      	add	sp, #52	@ 0x34
 8003498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	4640      	mov	r0, r8
 80034a2:	4649      	mov	r1, r9
 80034a4:	f7fd fb42 	bl	8000b2c <__aeabi_dcmpun>
 80034a8:	b140      	cbz	r0, 80034bc <_printf_float+0xe0>
 80034aa:	464b      	mov	r3, r9
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bfbc      	itt	lt
 80034b0:	232d      	movlt	r3, #45	@ 0x2d
 80034b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80034b6:	4a7e      	ldr	r2, [pc, #504]	@ (80036b0 <_printf_float+0x2d4>)
 80034b8:	4b7e      	ldr	r3, [pc, #504]	@ (80036b4 <_printf_float+0x2d8>)
 80034ba:	e7d4      	b.n	8003466 <_printf_float+0x8a>
 80034bc:	6863      	ldr	r3, [r4, #4]
 80034be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80034c2:	9206      	str	r2, [sp, #24]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	d13b      	bne.n	8003540 <_printf_float+0x164>
 80034c8:	2306      	movs	r3, #6
 80034ca:	6063      	str	r3, [r4, #4]
 80034cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80034d0:	2300      	movs	r3, #0
 80034d2:	6022      	str	r2, [r4, #0]
 80034d4:	9303      	str	r3, [sp, #12]
 80034d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80034d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80034dc:	ab09      	add	r3, sp, #36	@ 0x24
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	6861      	ldr	r1, [r4, #4]
 80034e2:	ec49 8b10 	vmov	d0, r8, r9
 80034e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80034ea:	4628      	mov	r0, r5
 80034ec:	f7ff fed6 	bl	800329c <__cvt>
 80034f0:	9b06      	ldr	r3, [sp, #24]
 80034f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034f4:	2b47      	cmp	r3, #71	@ 0x47
 80034f6:	4680      	mov	r8, r0
 80034f8:	d129      	bne.n	800354e <_printf_float+0x172>
 80034fa:	1cc8      	adds	r0, r1, #3
 80034fc:	db02      	blt.n	8003504 <_printf_float+0x128>
 80034fe:	6863      	ldr	r3, [r4, #4]
 8003500:	4299      	cmp	r1, r3
 8003502:	dd41      	ble.n	8003588 <_printf_float+0x1ac>
 8003504:	f1aa 0a02 	sub.w	sl, sl, #2
 8003508:	fa5f fa8a 	uxtb.w	sl, sl
 800350c:	3901      	subs	r1, #1
 800350e:	4652      	mov	r2, sl
 8003510:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003514:	9109      	str	r1, [sp, #36]	@ 0x24
 8003516:	f7ff ff26 	bl	8003366 <__exponent>
 800351a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800351c:	1813      	adds	r3, r2, r0
 800351e:	2a01      	cmp	r2, #1
 8003520:	4681      	mov	r9, r0
 8003522:	6123      	str	r3, [r4, #16]
 8003524:	dc02      	bgt.n	800352c <_printf_float+0x150>
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	07d2      	lsls	r2, r2, #31
 800352a:	d501      	bpl.n	8003530 <_printf_float+0x154>
 800352c:	3301      	adds	r3, #1
 800352e:	6123      	str	r3, [r4, #16]
 8003530:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0a2      	beq.n	800347e <_printf_float+0xa2>
 8003538:	232d      	movs	r3, #45	@ 0x2d
 800353a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800353e:	e79e      	b.n	800347e <_printf_float+0xa2>
 8003540:	9a06      	ldr	r2, [sp, #24]
 8003542:	2a47      	cmp	r2, #71	@ 0x47
 8003544:	d1c2      	bne.n	80034cc <_printf_float+0xf0>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1c0      	bne.n	80034cc <_printf_float+0xf0>
 800354a:	2301      	movs	r3, #1
 800354c:	e7bd      	b.n	80034ca <_printf_float+0xee>
 800354e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003552:	d9db      	bls.n	800350c <_printf_float+0x130>
 8003554:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003558:	d118      	bne.n	800358c <_printf_float+0x1b0>
 800355a:	2900      	cmp	r1, #0
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	dd0b      	ble.n	8003578 <_printf_float+0x19c>
 8003560:	6121      	str	r1, [r4, #16]
 8003562:	b913      	cbnz	r3, 800356a <_printf_float+0x18e>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	07d0      	lsls	r0, r2, #31
 8003568:	d502      	bpl.n	8003570 <_printf_float+0x194>
 800356a:	3301      	adds	r3, #1
 800356c:	440b      	add	r3, r1
 800356e:	6123      	str	r3, [r4, #16]
 8003570:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003572:	f04f 0900 	mov.w	r9, #0
 8003576:	e7db      	b.n	8003530 <_printf_float+0x154>
 8003578:	b913      	cbnz	r3, 8003580 <_printf_float+0x1a4>
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	07d2      	lsls	r2, r2, #31
 800357e:	d501      	bpl.n	8003584 <_printf_float+0x1a8>
 8003580:	3302      	adds	r3, #2
 8003582:	e7f4      	b.n	800356e <_printf_float+0x192>
 8003584:	2301      	movs	r3, #1
 8003586:	e7f2      	b.n	800356e <_printf_float+0x192>
 8003588:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800358c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800358e:	4299      	cmp	r1, r3
 8003590:	db05      	blt.n	800359e <_printf_float+0x1c2>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	6121      	str	r1, [r4, #16]
 8003596:	07d8      	lsls	r0, r3, #31
 8003598:	d5ea      	bpl.n	8003570 <_printf_float+0x194>
 800359a:	1c4b      	adds	r3, r1, #1
 800359c:	e7e7      	b.n	800356e <_printf_float+0x192>
 800359e:	2900      	cmp	r1, #0
 80035a0:	bfd4      	ite	le
 80035a2:	f1c1 0202 	rsble	r2, r1, #2
 80035a6:	2201      	movgt	r2, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	e7e0      	b.n	800356e <_printf_float+0x192>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	055a      	lsls	r2, r3, #21
 80035b0:	d407      	bmi.n	80035c2 <_printf_float+0x1e6>
 80035b2:	6923      	ldr	r3, [r4, #16]
 80035b4:	4642      	mov	r2, r8
 80035b6:	4631      	mov	r1, r6
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	d12b      	bne.n	8003618 <_printf_float+0x23c>
 80035c0:	e767      	b.n	8003492 <_printf_float+0xb6>
 80035c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80035c6:	f240 80dd 	bls.w	8003784 <_printf_float+0x3a8>
 80035ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035ce:	2200      	movs	r2, #0
 80035d0:	2300      	movs	r3, #0
 80035d2:	f7fd fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d033      	beq.n	8003642 <_printf_float+0x266>
 80035da:	4a37      	ldr	r2, [pc, #220]	@ (80036b8 <_printf_float+0x2dc>)
 80035dc:	2301      	movs	r3, #1
 80035de:	4631      	mov	r1, r6
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b8      	blx	r7
 80035e4:	3001      	adds	r0, #1
 80035e6:	f43f af54 	beq.w	8003492 <_printf_float+0xb6>
 80035ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80035ee:	4543      	cmp	r3, r8
 80035f0:	db02      	blt.n	80035f8 <_printf_float+0x21c>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	07d8      	lsls	r0, r3, #31
 80035f6:	d50f      	bpl.n	8003618 <_printf_float+0x23c>
 80035f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035fc:	4631      	mov	r1, r6
 80035fe:	4628      	mov	r0, r5
 8003600:	47b8      	blx	r7
 8003602:	3001      	adds	r0, #1
 8003604:	f43f af45 	beq.w	8003492 <_printf_float+0xb6>
 8003608:	f04f 0900 	mov.w	r9, #0
 800360c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003610:	f104 0a1a 	add.w	sl, r4, #26
 8003614:	45c8      	cmp	r8, r9
 8003616:	dc09      	bgt.n	800362c <_printf_float+0x250>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	079b      	lsls	r3, r3, #30
 800361c:	f100 8103 	bmi.w	8003826 <_printf_float+0x44a>
 8003620:	68e0      	ldr	r0, [r4, #12]
 8003622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003624:	4298      	cmp	r0, r3
 8003626:	bfb8      	it	lt
 8003628:	4618      	movlt	r0, r3
 800362a:	e734      	b.n	8003496 <_printf_float+0xba>
 800362c:	2301      	movs	r3, #1
 800362e:	4652      	mov	r2, sl
 8003630:	4631      	mov	r1, r6
 8003632:	4628      	mov	r0, r5
 8003634:	47b8      	blx	r7
 8003636:	3001      	adds	r0, #1
 8003638:	f43f af2b 	beq.w	8003492 <_printf_float+0xb6>
 800363c:	f109 0901 	add.w	r9, r9, #1
 8003640:	e7e8      	b.n	8003614 <_printf_float+0x238>
 8003642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	dc39      	bgt.n	80036bc <_printf_float+0x2e0>
 8003648:	4a1b      	ldr	r2, [pc, #108]	@ (80036b8 <_printf_float+0x2dc>)
 800364a:	2301      	movs	r3, #1
 800364c:	4631      	mov	r1, r6
 800364e:	4628      	mov	r0, r5
 8003650:	47b8      	blx	r7
 8003652:	3001      	adds	r0, #1
 8003654:	f43f af1d 	beq.w	8003492 <_printf_float+0xb6>
 8003658:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800365c:	ea59 0303 	orrs.w	r3, r9, r3
 8003660:	d102      	bne.n	8003668 <_printf_float+0x28c>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	07d9      	lsls	r1, r3, #31
 8003666:	d5d7      	bpl.n	8003618 <_printf_float+0x23c>
 8003668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800366c:	4631      	mov	r1, r6
 800366e:	4628      	mov	r0, r5
 8003670:	47b8      	blx	r7
 8003672:	3001      	adds	r0, #1
 8003674:	f43f af0d 	beq.w	8003492 <_printf_float+0xb6>
 8003678:	f04f 0a00 	mov.w	sl, #0
 800367c:	f104 0b1a 	add.w	fp, r4, #26
 8003680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003682:	425b      	negs	r3, r3
 8003684:	4553      	cmp	r3, sl
 8003686:	dc01      	bgt.n	800368c <_printf_float+0x2b0>
 8003688:	464b      	mov	r3, r9
 800368a:	e793      	b.n	80035b4 <_printf_float+0x1d8>
 800368c:	2301      	movs	r3, #1
 800368e:	465a      	mov	r2, fp
 8003690:	4631      	mov	r1, r6
 8003692:	4628      	mov	r0, r5
 8003694:	47b8      	blx	r7
 8003696:	3001      	adds	r0, #1
 8003698:	f43f aefb 	beq.w	8003492 <_printf_float+0xb6>
 800369c:	f10a 0a01 	add.w	sl, sl, #1
 80036a0:	e7ee      	b.n	8003680 <_printf_float+0x2a4>
 80036a2:	bf00      	nop
 80036a4:	7fefffff 	.word	0x7fefffff
 80036a8:	08005dcc 	.word	0x08005dcc
 80036ac:	08005dd0 	.word	0x08005dd0
 80036b0:	08005dd4 	.word	0x08005dd4
 80036b4:	08005dd8 	.word	0x08005dd8
 80036b8:	08005ddc 	.word	0x08005ddc
 80036bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80036c2:	4553      	cmp	r3, sl
 80036c4:	bfa8      	it	ge
 80036c6:	4653      	movge	r3, sl
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	4699      	mov	r9, r3
 80036cc:	dc36      	bgt.n	800373c <_printf_float+0x360>
 80036ce:	f04f 0b00 	mov.w	fp, #0
 80036d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036d6:	f104 021a 	add.w	r2, r4, #26
 80036da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036dc:	9306      	str	r3, [sp, #24]
 80036de:	eba3 0309 	sub.w	r3, r3, r9
 80036e2:	455b      	cmp	r3, fp
 80036e4:	dc31      	bgt.n	800374a <_printf_float+0x36e>
 80036e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036e8:	459a      	cmp	sl, r3
 80036ea:	dc3a      	bgt.n	8003762 <_printf_float+0x386>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	07da      	lsls	r2, r3, #31
 80036f0:	d437      	bmi.n	8003762 <_printf_float+0x386>
 80036f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036f4:	ebaa 0903 	sub.w	r9, sl, r3
 80036f8:	9b06      	ldr	r3, [sp, #24]
 80036fa:	ebaa 0303 	sub.w	r3, sl, r3
 80036fe:	4599      	cmp	r9, r3
 8003700:	bfa8      	it	ge
 8003702:	4699      	movge	r9, r3
 8003704:	f1b9 0f00 	cmp.w	r9, #0
 8003708:	dc33      	bgt.n	8003772 <_printf_float+0x396>
 800370a:	f04f 0800 	mov.w	r8, #0
 800370e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003712:	f104 0b1a 	add.w	fp, r4, #26
 8003716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003718:	ebaa 0303 	sub.w	r3, sl, r3
 800371c:	eba3 0309 	sub.w	r3, r3, r9
 8003720:	4543      	cmp	r3, r8
 8003722:	f77f af79 	ble.w	8003618 <_printf_float+0x23c>
 8003726:	2301      	movs	r3, #1
 8003728:	465a      	mov	r2, fp
 800372a:	4631      	mov	r1, r6
 800372c:	4628      	mov	r0, r5
 800372e:	47b8      	blx	r7
 8003730:	3001      	adds	r0, #1
 8003732:	f43f aeae 	beq.w	8003492 <_printf_float+0xb6>
 8003736:	f108 0801 	add.w	r8, r8, #1
 800373a:	e7ec      	b.n	8003716 <_printf_float+0x33a>
 800373c:	4642      	mov	r2, r8
 800373e:	4631      	mov	r1, r6
 8003740:	4628      	mov	r0, r5
 8003742:	47b8      	blx	r7
 8003744:	3001      	adds	r0, #1
 8003746:	d1c2      	bne.n	80036ce <_printf_float+0x2f2>
 8003748:	e6a3      	b.n	8003492 <_printf_float+0xb6>
 800374a:	2301      	movs	r3, #1
 800374c:	4631      	mov	r1, r6
 800374e:	4628      	mov	r0, r5
 8003750:	9206      	str	r2, [sp, #24]
 8003752:	47b8      	blx	r7
 8003754:	3001      	adds	r0, #1
 8003756:	f43f ae9c 	beq.w	8003492 <_printf_float+0xb6>
 800375a:	9a06      	ldr	r2, [sp, #24]
 800375c:	f10b 0b01 	add.w	fp, fp, #1
 8003760:	e7bb      	b.n	80036da <_printf_float+0x2fe>
 8003762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003766:	4631      	mov	r1, r6
 8003768:	4628      	mov	r0, r5
 800376a:	47b8      	blx	r7
 800376c:	3001      	adds	r0, #1
 800376e:	d1c0      	bne.n	80036f2 <_printf_float+0x316>
 8003770:	e68f      	b.n	8003492 <_printf_float+0xb6>
 8003772:	9a06      	ldr	r2, [sp, #24]
 8003774:	464b      	mov	r3, r9
 8003776:	4442      	add	r2, r8
 8003778:	4631      	mov	r1, r6
 800377a:	4628      	mov	r0, r5
 800377c:	47b8      	blx	r7
 800377e:	3001      	adds	r0, #1
 8003780:	d1c3      	bne.n	800370a <_printf_float+0x32e>
 8003782:	e686      	b.n	8003492 <_printf_float+0xb6>
 8003784:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003788:	f1ba 0f01 	cmp.w	sl, #1
 800378c:	dc01      	bgt.n	8003792 <_printf_float+0x3b6>
 800378e:	07db      	lsls	r3, r3, #31
 8003790:	d536      	bpl.n	8003800 <_printf_float+0x424>
 8003792:	2301      	movs	r3, #1
 8003794:	4642      	mov	r2, r8
 8003796:	4631      	mov	r1, r6
 8003798:	4628      	mov	r0, r5
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f ae78 	beq.w	8003492 <_printf_float+0xb6>
 80037a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037a6:	4631      	mov	r1, r6
 80037a8:	4628      	mov	r0, r5
 80037aa:	47b8      	blx	r7
 80037ac:	3001      	adds	r0, #1
 80037ae:	f43f ae70 	beq.w	8003492 <_printf_float+0xb6>
 80037b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80037b6:	2200      	movs	r2, #0
 80037b8:	2300      	movs	r3, #0
 80037ba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80037be:	f7fd f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80037c2:	b9c0      	cbnz	r0, 80037f6 <_printf_float+0x41a>
 80037c4:	4653      	mov	r3, sl
 80037c6:	f108 0201 	add.w	r2, r8, #1
 80037ca:	4631      	mov	r1, r6
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b8      	blx	r7
 80037d0:	3001      	adds	r0, #1
 80037d2:	d10c      	bne.n	80037ee <_printf_float+0x412>
 80037d4:	e65d      	b.n	8003492 <_printf_float+0xb6>
 80037d6:	2301      	movs	r3, #1
 80037d8:	465a      	mov	r2, fp
 80037da:	4631      	mov	r1, r6
 80037dc:	4628      	mov	r0, r5
 80037de:	47b8      	blx	r7
 80037e0:	3001      	adds	r0, #1
 80037e2:	f43f ae56 	beq.w	8003492 <_printf_float+0xb6>
 80037e6:	f108 0801 	add.w	r8, r8, #1
 80037ea:	45d0      	cmp	r8, sl
 80037ec:	dbf3      	blt.n	80037d6 <_printf_float+0x3fa>
 80037ee:	464b      	mov	r3, r9
 80037f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80037f4:	e6df      	b.n	80035b6 <_printf_float+0x1da>
 80037f6:	f04f 0800 	mov.w	r8, #0
 80037fa:	f104 0b1a 	add.w	fp, r4, #26
 80037fe:	e7f4      	b.n	80037ea <_printf_float+0x40e>
 8003800:	2301      	movs	r3, #1
 8003802:	4642      	mov	r2, r8
 8003804:	e7e1      	b.n	80037ca <_printf_float+0x3ee>
 8003806:	2301      	movs	r3, #1
 8003808:	464a      	mov	r2, r9
 800380a:	4631      	mov	r1, r6
 800380c:	4628      	mov	r0, r5
 800380e:	47b8      	blx	r7
 8003810:	3001      	adds	r0, #1
 8003812:	f43f ae3e 	beq.w	8003492 <_printf_float+0xb6>
 8003816:	f108 0801 	add.w	r8, r8, #1
 800381a:	68e3      	ldr	r3, [r4, #12]
 800381c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800381e:	1a5b      	subs	r3, r3, r1
 8003820:	4543      	cmp	r3, r8
 8003822:	dcf0      	bgt.n	8003806 <_printf_float+0x42a>
 8003824:	e6fc      	b.n	8003620 <_printf_float+0x244>
 8003826:	f04f 0800 	mov.w	r8, #0
 800382a:	f104 0919 	add.w	r9, r4, #25
 800382e:	e7f4      	b.n	800381a <_printf_float+0x43e>

08003830 <_printf_common>:
 8003830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	4616      	mov	r6, r2
 8003836:	4698      	mov	r8, r3
 8003838:	688a      	ldr	r2, [r1, #8]
 800383a:	690b      	ldr	r3, [r1, #16]
 800383c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003840:	4293      	cmp	r3, r2
 8003842:	bfb8      	it	lt
 8003844:	4613      	movlt	r3, r2
 8003846:	6033      	str	r3, [r6, #0]
 8003848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800384c:	4607      	mov	r7, r0
 800384e:	460c      	mov	r4, r1
 8003850:	b10a      	cbz	r2, 8003856 <_printf_common+0x26>
 8003852:	3301      	adds	r3, #1
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	0699      	lsls	r1, r3, #26
 800385a:	bf42      	ittt	mi
 800385c:	6833      	ldrmi	r3, [r6, #0]
 800385e:	3302      	addmi	r3, #2
 8003860:	6033      	strmi	r3, [r6, #0]
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	f015 0506 	ands.w	r5, r5, #6
 8003868:	d106      	bne.n	8003878 <_printf_common+0x48>
 800386a:	f104 0a19 	add.w	sl, r4, #25
 800386e:	68e3      	ldr	r3, [r4, #12]
 8003870:	6832      	ldr	r2, [r6, #0]
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	42ab      	cmp	r3, r5
 8003876:	dc26      	bgt.n	80038c6 <_printf_common+0x96>
 8003878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	3b00      	subs	r3, #0
 8003880:	bf18      	it	ne
 8003882:	2301      	movne	r3, #1
 8003884:	0692      	lsls	r2, r2, #26
 8003886:	d42b      	bmi.n	80038e0 <_printf_common+0xb0>
 8003888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800388c:	4641      	mov	r1, r8
 800388e:	4638      	mov	r0, r7
 8003890:	47c8      	blx	r9
 8003892:	3001      	adds	r0, #1
 8003894:	d01e      	beq.n	80038d4 <_printf_common+0xa4>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	6922      	ldr	r2, [r4, #16]
 800389a:	f003 0306 	and.w	r3, r3, #6
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf02      	ittt	eq
 80038a2:	68e5      	ldreq	r5, [r4, #12]
 80038a4:	6833      	ldreq	r3, [r6, #0]
 80038a6:	1aed      	subeq	r5, r5, r3
 80038a8:	68a3      	ldr	r3, [r4, #8]
 80038aa:	bf0c      	ite	eq
 80038ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b0:	2500      	movne	r5, #0
 80038b2:	4293      	cmp	r3, r2
 80038b4:	bfc4      	itt	gt
 80038b6:	1a9b      	subgt	r3, r3, r2
 80038b8:	18ed      	addgt	r5, r5, r3
 80038ba:	2600      	movs	r6, #0
 80038bc:	341a      	adds	r4, #26
 80038be:	42b5      	cmp	r5, r6
 80038c0:	d11a      	bne.n	80038f8 <_printf_common+0xc8>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e008      	b.n	80038d8 <_printf_common+0xa8>
 80038c6:	2301      	movs	r3, #1
 80038c8:	4652      	mov	r2, sl
 80038ca:	4641      	mov	r1, r8
 80038cc:	4638      	mov	r0, r7
 80038ce:	47c8      	blx	r9
 80038d0:	3001      	adds	r0, #1
 80038d2:	d103      	bne.n	80038dc <_printf_common+0xac>
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038dc:	3501      	adds	r5, #1
 80038de:	e7c6      	b.n	800386e <_printf_common+0x3e>
 80038e0:	18e1      	adds	r1, r4, r3
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	2030      	movs	r0, #48	@ 0x30
 80038e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038ea:	4422      	add	r2, r4
 80038ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038f4:	3302      	adds	r3, #2
 80038f6:	e7c7      	b.n	8003888 <_printf_common+0x58>
 80038f8:	2301      	movs	r3, #1
 80038fa:	4622      	mov	r2, r4
 80038fc:	4641      	mov	r1, r8
 80038fe:	4638      	mov	r0, r7
 8003900:	47c8      	blx	r9
 8003902:	3001      	adds	r0, #1
 8003904:	d0e6      	beq.n	80038d4 <_printf_common+0xa4>
 8003906:	3601      	adds	r6, #1
 8003908:	e7d9      	b.n	80038be <_printf_common+0x8e>
	...

0800390c <_printf_i>:
 800390c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	7e0f      	ldrb	r7, [r1, #24]
 8003912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003914:	2f78      	cmp	r7, #120	@ 0x78
 8003916:	4691      	mov	r9, r2
 8003918:	4680      	mov	r8, r0
 800391a:	460c      	mov	r4, r1
 800391c:	469a      	mov	sl, r3
 800391e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003922:	d807      	bhi.n	8003934 <_printf_i+0x28>
 8003924:	2f62      	cmp	r7, #98	@ 0x62
 8003926:	d80a      	bhi.n	800393e <_printf_i+0x32>
 8003928:	2f00      	cmp	r7, #0
 800392a:	f000 80d2 	beq.w	8003ad2 <_printf_i+0x1c6>
 800392e:	2f58      	cmp	r7, #88	@ 0x58
 8003930:	f000 80b9 	beq.w	8003aa6 <_printf_i+0x19a>
 8003934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800393c:	e03a      	b.n	80039b4 <_printf_i+0xa8>
 800393e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003942:	2b15      	cmp	r3, #21
 8003944:	d8f6      	bhi.n	8003934 <_printf_i+0x28>
 8003946:	a101      	add	r1, pc, #4	@ (adr r1, 800394c <_printf_i+0x40>)
 8003948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800394c:	080039a5 	.word	0x080039a5
 8003950:	080039b9 	.word	0x080039b9
 8003954:	08003935 	.word	0x08003935
 8003958:	08003935 	.word	0x08003935
 800395c:	08003935 	.word	0x08003935
 8003960:	08003935 	.word	0x08003935
 8003964:	080039b9 	.word	0x080039b9
 8003968:	08003935 	.word	0x08003935
 800396c:	08003935 	.word	0x08003935
 8003970:	08003935 	.word	0x08003935
 8003974:	08003935 	.word	0x08003935
 8003978:	08003ab9 	.word	0x08003ab9
 800397c:	080039e3 	.word	0x080039e3
 8003980:	08003a73 	.word	0x08003a73
 8003984:	08003935 	.word	0x08003935
 8003988:	08003935 	.word	0x08003935
 800398c:	08003adb 	.word	0x08003adb
 8003990:	08003935 	.word	0x08003935
 8003994:	080039e3 	.word	0x080039e3
 8003998:	08003935 	.word	0x08003935
 800399c:	08003935 	.word	0x08003935
 80039a0:	08003a7b 	.word	0x08003a7b
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6032      	str	r2, [r6, #0]
 80039ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039b4:	2301      	movs	r3, #1
 80039b6:	e09d      	b.n	8003af4 <_printf_i+0x1e8>
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	6820      	ldr	r0, [r4, #0]
 80039bc:	1d19      	adds	r1, r3, #4
 80039be:	6031      	str	r1, [r6, #0]
 80039c0:	0606      	lsls	r6, r0, #24
 80039c2:	d501      	bpl.n	80039c8 <_printf_i+0xbc>
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	e003      	b.n	80039d0 <_printf_i+0xc4>
 80039c8:	0645      	lsls	r5, r0, #25
 80039ca:	d5fb      	bpl.n	80039c4 <_printf_i+0xb8>
 80039cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	da03      	bge.n	80039dc <_printf_i+0xd0>
 80039d4:	232d      	movs	r3, #45	@ 0x2d
 80039d6:	426d      	negs	r5, r5
 80039d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039dc:	4859      	ldr	r0, [pc, #356]	@ (8003b44 <_printf_i+0x238>)
 80039de:	230a      	movs	r3, #10
 80039e0:	e011      	b.n	8003a06 <_printf_i+0xfa>
 80039e2:	6821      	ldr	r1, [r4, #0]
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	0608      	lsls	r0, r1, #24
 80039e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80039ec:	d402      	bmi.n	80039f4 <_printf_i+0xe8>
 80039ee:	0649      	lsls	r1, r1, #25
 80039f0:	bf48      	it	mi
 80039f2:	b2ad      	uxthmi	r5, r5
 80039f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80039f6:	4853      	ldr	r0, [pc, #332]	@ (8003b44 <_printf_i+0x238>)
 80039f8:	6033      	str	r3, [r6, #0]
 80039fa:	bf14      	ite	ne
 80039fc:	230a      	movne	r3, #10
 80039fe:	2308      	moveq	r3, #8
 8003a00:	2100      	movs	r1, #0
 8003a02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a06:	6866      	ldr	r6, [r4, #4]
 8003a08:	60a6      	str	r6, [r4, #8]
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	bfa2      	ittt	ge
 8003a0e:	6821      	ldrge	r1, [r4, #0]
 8003a10:	f021 0104 	bicge.w	r1, r1, #4
 8003a14:	6021      	strge	r1, [r4, #0]
 8003a16:	b90d      	cbnz	r5, 8003a1c <_printf_i+0x110>
 8003a18:	2e00      	cmp	r6, #0
 8003a1a:	d04b      	beq.n	8003ab4 <_printf_i+0x1a8>
 8003a1c:	4616      	mov	r6, r2
 8003a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a22:	fb03 5711 	mls	r7, r3, r1, r5
 8003a26:	5dc7      	ldrb	r7, [r0, r7]
 8003a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a2c:	462f      	mov	r7, r5
 8003a2e:	42bb      	cmp	r3, r7
 8003a30:	460d      	mov	r5, r1
 8003a32:	d9f4      	bls.n	8003a1e <_printf_i+0x112>
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d10b      	bne.n	8003a50 <_printf_i+0x144>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	07df      	lsls	r7, r3, #31
 8003a3c:	d508      	bpl.n	8003a50 <_printf_i+0x144>
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	6861      	ldr	r1, [r4, #4]
 8003a42:	4299      	cmp	r1, r3
 8003a44:	bfde      	ittt	le
 8003a46:	2330      	movle	r3, #48	@ 0x30
 8003a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a4c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003a50:	1b92      	subs	r2, r2, r6
 8003a52:	6122      	str	r2, [r4, #16]
 8003a54:	f8cd a000 	str.w	sl, [sp]
 8003a58:	464b      	mov	r3, r9
 8003a5a:	aa03      	add	r2, sp, #12
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4640      	mov	r0, r8
 8003a60:	f7ff fee6 	bl	8003830 <_printf_common>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d14a      	bne.n	8003afe <_printf_i+0x1f2>
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a6c:	b004      	add	sp, #16
 8003a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	4833      	ldr	r0, [pc, #204]	@ (8003b48 <_printf_i+0x23c>)
 8003a7c:	2778      	movs	r7, #120	@ 0x78
 8003a7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	6831      	ldr	r1, [r6, #0]
 8003a86:	061f      	lsls	r7, r3, #24
 8003a88:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a8c:	d402      	bmi.n	8003a94 <_printf_i+0x188>
 8003a8e:	065f      	lsls	r7, r3, #25
 8003a90:	bf48      	it	mi
 8003a92:	b2ad      	uxthmi	r5, r5
 8003a94:	6031      	str	r1, [r6, #0]
 8003a96:	07d9      	lsls	r1, r3, #31
 8003a98:	bf44      	itt	mi
 8003a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003a9e:	6023      	strmi	r3, [r4, #0]
 8003aa0:	b11d      	cbz	r5, 8003aaa <_printf_i+0x19e>
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	e7ac      	b.n	8003a00 <_printf_i+0xf4>
 8003aa6:	4827      	ldr	r0, [pc, #156]	@ (8003b44 <_printf_i+0x238>)
 8003aa8:	e7e9      	b.n	8003a7e <_printf_i+0x172>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f023 0320 	bic.w	r3, r3, #32
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	e7f6      	b.n	8003aa2 <_printf_i+0x196>
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	e7bd      	b.n	8003a34 <_printf_i+0x128>
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	6961      	ldr	r1, [r4, #20]
 8003abe:	1d18      	adds	r0, r3, #4
 8003ac0:	6030      	str	r0, [r6, #0]
 8003ac2:	062e      	lsls	r6, r5, #24
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	d501      	bpl.n	8003acc <_printf_i+0x1c0>
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	e002      	b.n	8003ad2 <_printf_i+0x1c6>
 8003acc:	0668      	lsls	r0, r5, #25
 8003ace:	d5fb      	bpl.n	8003ac8 <_printf_i+0x1bc>
 8003ad0:	8019      	strh	r1, [r3, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6123      	str	r3, [r4, #16]
 8003ad6:	4616      	mov	r6, r2
 8003ad8:	e7bc      	b.n	8003a54 <_printf_i+0x148>
 8003ada:	6833      	ldr	r3, [r6, #0]
 8003adc:	1d1a      	adds	r2, r3, #4
 8003ade:	6032      	str	r2, [r6, #0]
 8003ae0:	681e      	ldr	r6, [r3, #0]
 8003ae2:	6862      	ldr	r2, [r4, #4]
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f7fc fb72 	bl	80001d0 <memchr>
 8003aec:	b108      	cbz	r0, 8003af2 <_printf_i+0x1e6>
 8003aee:	1b80      	subs	r0, r0, r6
 8003af0:	6060      	str	r0, [r4, #4]
 8003af2:	6863      	ldr	r3, [r4, #4]
 8003af4:	6123      	str	r3, [r4, #16]
 8003af6:	2300      	movs	r3, #0
 8003af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003afc:	e7aa      	b.n	8003a54 <_printf_i+0x148>
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	4632      	mov	r2, r6
 8003b02:	4649      	mov	r1, r9
 8003b04:	4640      	mov	r0, r8
 8003b06:	47d0      	blx	sl
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d0ad      	beq.n	8003a68 <_printf_i+0x15c>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	079b      	lsls	r3, r3, #30
 8003b10:	d413      	bmi.n	8003b3a <_printf_i+0x22e>
 8003b12:	68e0      	ldr	r0, [r4, #12]
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	4298      	cmp	r0, r3
 8003b18:	bfb8      	it	lt
 8003b1a:	4618      	movlt	r0, r3
 8003b1c:	e7a6      	b.n	8003a6c <_printf_i+0x160>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4632      	mov	r2, r6
 8003b22:	4649      	mov	r1, r9
 8003b24:	4640      	mov	r0, r8
 8003b26:	47d0      	blx	sl
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d09d      	beq.n	8003a68 <_printf_i+0x15c>
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	68e3      	ldr	r3, [r4, #12]
 8003b30:	9903      	ldr	r1, [sp, #12]
 8003b32:	1a5b      	subs	r3, r3, r1
 8003b34:	42ab      	cmp	r3, r5
 8003b36:	dcf2      	bgt.n	8003b1e <_printf_i+0x212>
 8003b38:	e7eb      	b.n	8003b12 <_printf_i+0x206>
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	f104 0619 	add.w	r6, r4, #25
 8003b40:	e7f5      	b.n	8003b2e <_printf_i+0x222>
 8003b42:	bf00      	nop
 8003b44:	08005dde 	.word	0x08005dde
 8003b48:	08005def 	.word	0x08005def

08003b4c <std>:
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	4604      	mov	r4, r0
 8003b52:	e9c0 3300 	strd	r3, r3, [r0]
 8003b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b5a:	6083      	str	r3, [r0, #8]
 8003b5c:	8181      	strh	r1, [r0, #12]
 8003b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b60:	81c2      	strh	r2, [r0, #14]
 8003b62:	6183      	str	r3, [r0, #24]
 8003b64:	4619      	mov	r1, r3
 8003b66:	2208      	movs	r2, #8
 8003b68:	305c      	adds	r0, #92	@ 0x5c
 8003b6a:	f000 fa01 	bl	8003f70 <memset>
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <std+0x58>)
 8003b70:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <std+0x5c>)
 8003b74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <std+0x60>)
 8003b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <std+0x64>)
 8003b7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb4 <std+0x68>)
 8003b80:	6224      	str	r4, [r4, #32]
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d006      	beq.n	8003b94 <std+0x48>
 8003b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b8a:	4294      	cmp	r4, r2
 8003b8c:	d002      	beq.n	8003b94 <std+0x48>
 8003b8e:	33d0      	adds	r3, #208	@ 0xd0
 8003b90:	429c      	cmp	r4, r3
 8003b92:	d105      	bne.n	8003ba0 <std+0x54>
 8003b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b9c:	f000 ba64 	b.w	8004068 <__retarget_lock_init_recursive>
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	bf00      	nop
 8003ba4:	08003dc1 	.word	0x08003dc1
 8003ba8:	08003de3 	.word	0x08003de3
 8003bac:	08003e1b 	.word	0x08003e1b
 8003bb0:	08003e3f 	.word	0x08003e3f
 8003bb4:	200002b8 	.word	0x200002b8

08003bb8 <stdio_exit_handler>:
 8003bb8:	4a02      	ldr	r2, [pc, #8]	@ (8003bc4 <stdio_exit_handler+0xc>)
 8003bba:	4903      	ldr	r1, [pc, #12]	@ (8003bc8 <stdio_exit_handler+0x10>)
 8003bbc:	4803      	ldr	r0, [pc, #12]	@ (8003bcc <stdio_exit_handler+0x14>)
 8003bbe:	f000 b869 	b.w	8003c94 <_fwalk_sglue>
 8003bc2:	bf00      	nop
 8003bc4:	2000000c 	.word	0x2000000c
 8003bc8:	08005999 	.word	0x08005999
 8003bcc:	2000001c 	.word	0x2000001c

08003bd0 <cleanup_stdio>:
 8003bd0:	6841      	ldr	r1, [r0, #4]
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <cleanup_stdio+0x34>)
 8003bd4:	4299      	cmp	r1, r3
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	d001      	beq.n	8003be0 <cleanup_stdio+0x10>
 8003bdc:	f001 fedc 	bl	8005998 <_fflush_r>
 8003be0:	68a1      	ldr	r1, [r4, #8]
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <cleanup_stdio+0x38>)
 8003be4:	4299      	cmp	r1, r3
 8003be6:	d002      	beq.n	8003bee <cleanup_stdio+0x1e>
 8003be8:	4620      	mov	r0, r4
 8003bea:	f001 fed5 	bl	8005998 <_fflush_r>
 8003bee:	68e1      	ldr	r1, [r4, #12]
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <cleanup_stdio+0x3c>)
 8003bf2:	4299      	cmp	r1, r3
 8003bf4:	d004      	beq.n	8003c00 <cleanup_stdio+0x30>
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bfc:	f001 becc 	b.w	8005998 <_fflush_r>
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	200002b8 	.word	0x200002b8
 8003c08:	20000320 	.word	0x20000320
 8003c0c:	20000388 	.word	0x20000388

08003c10 <global_stdio_init.part.0>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4b0b      	ldr	r3, [pc, #44]	@ (8003c40 <global_stdio_init.part.0+0x30>)
 8003c14:	4c0b      	ldr	r4, [pc, #44]	@ (8003c44 <global_stdio_init.part.0+0x34>)
 8003c16:	4a0c      	ldr	r2, [pc, #48]	@ (8003c48 <global_stdio_init.part.0+0x38>)
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2104      	movs	r1, #4
 8003c20:	f7ff ff94 	bl	8003b4c <std>
 8003c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c28:	2201      	movs	r2, #1
 8003c2a:	2109      	movs	r1, #9
 8003c2c:	f7ff ff8e 	bl	8003b4c <std>
 8003c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c34:	2202      	movs	r2, #2
 8003c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3a:	2112      	movs	r1, #18
 8003c3c:	f7ff bf86 	b.w	8003b4c <std>
 8003c40:	200003f0 	.word	0x200003f0
 8003c44:	200002b8 	.word	0x200002b8
 8003c48:	08003bb9 	.word	0x08003bb9

08003c4c <__sfp_lock_acquire>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	@ (8003c54 <__sfp_lock_acquire+0x8>)
 8003c4e:	f000 ba0c 	b.w	800406a <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	200003f9 	.word	0x200003f9

08003c58 <__sfp_lock_release>:
 8003c58:	4801      	ldr	r0, [pc, #4]	@ (8003c60 <__sfp_lock_release+0x8>)
 8003c5a:	f000 ba07 	b.w	800406c <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	200003f9 	.word	0x200003f9

08003c64 <__sinit>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4604      	mov	r4, r0
 8003c68:	f7ff fff0 	bl	8003c4c <__sfp_lock_acquire>
 8003c6c:	6a23      	ldr	r3, [r4, #32]
 8003c6e:	b11b      	cbz	r3, 8003c78 <__sinit+0x14>
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f7ff bff0 	b.w	8003c58 <__sfp_lock_release>
 8003c78:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <__sinit+0x28>)
 8003c7a:	6223      	str	r3, [r4, #32]
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <__sinit+0x2c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f5      	bne.n	8003c70 <__sinit+0xc>
 8003c84:	f7ff ffc4 	bl	8003c10 <global_stdio_init.part.0>
 8003c88:	e7f2      	b.n	8003c70 <__sinit+0xc>
 8003c8a:	bf00      	nop
 8003c8c:	08003bd1 	.word	0x08003bd1
 8003c90:	200003f0 	.word	0x200003f0

08003c94 <_fwalk_sglue>:
 8003c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c98:	4607      	mov	r7, r0
 8003c9a:	4688      	mov	r8, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ca8:	d505      	bpl.n	8003cb6 <_fwalk_sglue+0x22>
 8003caa:	6824      	ldr	r4, [r4, #0]
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	d1f7      	bne.n	8003ca0 <_fwalk_sglue+0xc>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d907      	bls.n	8003ccc <_fwalk_sglue+0x38>
 8003cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d003      	beq.n	8003ccc <_fwalk_sglue+0x38>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	47c0      	blx	r8
 8003cca:	4306      	orrs	r6, r0
 8003ccc:	3568      	adds	r5, #104	@ 0x68
 8003cce:	e7e9      	b.n	8003ca4 <_fwalk_sglue+0x10>

08003cd0 <iprintf>:
 8003cd0:	b40f      	push	{r0, r1, r2, r3}
 8003cd2:	b507      	push	{r0, r1, r2, lr}
 8003cd4:	4906      	ldr	r1, [pc, #24]	@ (8003cf0 <iprintf+0x20>)
 8003cd6:	ab04      	add	r3, sp, #16
 8003cd8:	6808      	ldr	r0, [r1, #0]
 8003cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cde:	6881      	ldr	r1, [r0, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	f001 fcbd 	bl	8005660 <_vfiprintf_r>
 8003ce6:	b003      	add	sp, #12
 8003ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cec:	b004      	add	sp, #16
 8003cee:	4770      	bx	lr
 8003cf0:	20000018 	.word	0x20000018

08003cf4 <putchar>:
 8003cf4:	4b02      	ldr	r3, [pc, #8]	@ (8003d00 <putchar+0xc>)
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	6882      	ldr	r2, [r0, #8]
 8003cfc:	f001 bed6 	b.w	8005aac <_putc_r>
 8003d00:	20000018 	.word	0x20000018

08003d04 <_puts_r>:
 8003d04:	6a03      	ldr	r3, [r0, #32]
 8003d06:	b570      	push	{r4, r5, r6, lr}
 8003d08:	6884      	ldr	r4, [r0, #8]
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	460e      	mov	r6, r1
 8003d0e:	b90b      	cbnz	r3, 8003d14 <_puts_r+0x10>
 8003d10:	f7ff ffa8 	bl	8003c64 <__sinit>
 8003d14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d16:	07db      	lsls	r3, r3, #31
 8003d18:	d405      	bmi.n	8003d26 <_puts_r+0x22>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	0598      	lsls	r0, r3, #22
 8003d1e:	d402      	bmi.n	8003d26 <_puts_r+0x22>
 8003d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d22:	f000 f9a2 	bl	800406a <__retarget_lock_acquire_recursive>
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	0719      	lsls	r1, r3, #28
 8003d2a:	d502      	bpl.n	8003d32 <_puts_r+0x2e>
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d135      	bne.n	8003d9e <_puts_r+0x9a>
 8003d32:	4621      	mov	r1, r4
 8003d34:	4628      	mov	r0, r5
 8003d36:	f000 f8c5 	bl	8003ec4 <__swsetup_r>
 8003d3a:	b380      	cbz	r0, 8003d9e <_puts_r+0x9a>
 8003d3c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d42:	07da      	lsls	r2, r3, #31
 8003d44:	d405      	bmi.n	8003d52 <_puts_r+0x4e>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	059b      	lsls	r3, r3, #22
 8003d4a:	d402      	bmi.n	8003d52 <_puts_r+0x4e>
 8003d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d4e:	f000 f98d 	bl	800406c <__retarget_lock_release_recursive>
 8003d52:	4628      	mov	r0, r5
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da04      	bge.n	8003d64 <_puts_r+0x60>
 8003d5a:	69a2      	ldr	r2, [r4, #24]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	dc17      	bgt.n	8003d90 <_puts_r+0x8c>
 8003d60:	290a      	cmp	r1, #10
 8003d62:	d015      	beq.n	8003d90 <_puts_r+0x8c>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	6022      	str	r2, [r4, #0]
 8003d6a:	7019      	strb	r1, [r3, #0]
 8003d6c:	68a3      	ldr	r3, [r4, #8]
 8003d6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d72:	3b01      	subs	r3, #1
 8003d74:	60a3      	str	r3, [r4, #8]
 8003d76:	2900      	cmp	r1, #0
 8003d78:	d1ed      	bne.n	8003d56 <_puts_r+0x52>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da11      	bge.n	8003da2 <_puts_r+0x9e>
 8003d7e:	4622      	mov	r2, r4
 8003d80:	210a      	movs	r1, #10
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f85f 	bl	8003e46 <__swbuf_r>
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d0d7      	beq.n	8003d3c <_puts_r+0x38>
 8003d8c:	250a      	movs	r5, #10
 8003d8e:	e7d7      	b.n	8003d40 <_puts_r+0x3c>
 8003d90:	4622      	mov	r2, r4
 8003d92:	4628      	mov	r0, r5
 8003d94:	f000 f857 	bl	8003e46 <__swbuf_r>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d1e7      	bne.n	8003d6c <_puts_r+0x68>
 8003d9c:	e7ce      	b.n	8003d3c <_puts_r+0x38>
 8003d9e:	3e01      	subs	r6, #1
 8003da0:	e7e4      	b.n	8003d6c <_puts_r+0x68>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	6022      	str	r2, [r4, #0]
 8003da8:	220a      	movs	r2, #10
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	e7ee      	b.n	8003d8c <_puts_r+0x88>
	...

08003db0 <puts>:
 8003db0:	4b02      	ldr	r3, [pc, #8]	@ (8003dbc <puts+0xc>)
 8003db2:	4601      	mov	r1, r0
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f7ff bfa5 	b.w	8003d04 <_puts_r>
 8003dba:	bf00      	nop
 8003dbc:	20000018 	.word	0x20000018

08003dc0 <__sread>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc8:	f000 f900 	bl	8003fcc <_read_r>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	bfab      	itete	ge
 8003dd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8003dd4:	181b      	addge	r3, r3, r0
 8003dd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dda:	bfac      	ite	ge
 8003ddc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dde:	81a3      	strhlt	r3, [r4, #12]
 8003de0:	bd10      	pop	{r4, pc}

08003de2 <__swrite>:
 8003de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de6:	461f      	mov	r7, r3
 8003de8:	898b      	ldrh	r3, [r1, #12]
 8003dea:	05db      	lsls	r3, r3, #23
 8003dec:	4605      	mov	r5, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	4616      	mov	r6, r2
 8003df2:	d505      	bpl.n	8003e00 <__swrite+0x1e>
 8003df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df8:	2302      	movs	r3, #2
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f000 f8d4 	bl	8003fa8 <_lseek_r>
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e0a:	81a3      	strh	r3, [r4, #12]
 8003e0c:	4632      	mov	r2, r6
 8003e0e:	463b      	mov	r3, r7
 8003e10:	4628      	mov	r0, r5
 8003e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e16:	f000 b8eb 	b.w	8003ff0 <_write_r>

08003e1a <__sseek>:
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e22:	f000 f8c1 	bl	8003fa8 <_lseek_r>
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	bf15      	itete	ne
 8003e2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e36:	81a3      	strheq	r3, [r4, #12]
 8003e38:	bf18      	it	ne
 8003e3a:	81a3      	strhne	r3, [r4, #12]
 8003e3c:	bd10      	pop	{r4, pc}

08003e3e <__sclose>:
 8003e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e42:	f000 b8a1 	b.w	8003f88 <_close_r>

08003e46 <__swbuf_r>:
 8003e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e48:	460e      	mov	r6, r1
 8003e4a:	4614      	mov	r4, r2
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	b118      	cbz	r0, 8003e58 <__swbuf_r+0x12>
 8003e50:	6a03      	ldr	r3, [r0, #32]
 8003e52:	b90b      	cbnz	r3, 8003e58 <__swbuf_r+0x12>
 8003e54:	f7ff ff06 	bl	8003c64 <__sinit>
 8003e58:	69a3      	ldr	r3, [r4, #24]
 8003e5a:	60a3      	str	r3, [r4, #8]
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	071a      	lsls	r2, r3, #28
 8003e60:	d501      	bpl.n	8003e66 <__swbuf_r+0x20>
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	b943      	cbnz	r3, 8003e78 <__swbuf_r+0x32>
 8003e66:	4621      	mov	r1, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 f82b 	bl	8003ec4 <__swsetup_r>
 8003e6e:	b118      	cbz	r0, 8003e78 <__swbuf_r+0x32>
 8003e70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003e74:	4638      	mov	r0, r7
 8003e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	6922      	ldr	r2, [r4, #16]
 8003e7c:	1a98      	subs	r0, r3, r2
 8003e7e:	6963      	ldr	r3, [r4, #20]
 8003e80:	b2f6      	uxtb	r6, r6
 8003e82:	4283      	cmp	r3, r0
 8003e84:	4637      	mov	r7, r6
 8003e86:	dc05      	bgt.n	8003e94 <__swbuf_r+0x4e>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f001 fd84 	bl	8005998 <_fflush_r>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d1ed      	bne.n	8003e70 <__swbuf_r+0x2a>
 8003e94:	68a3      	ldr	r3, [r4, #8]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	60a3      	str	r3, [r4, #8]
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	6022      	str	r2, [r4, #0]
 8003ea0:	701e      	strb	r6, [r3, #0]
 8003ea2:	6962      	ldr	r2, [r4, #20]
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d004      	beq.n	8003eb4 <__swbuf_r+0x6e>
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	07db      	lsls	r3, r3, #31
 8003eae:	d5e1      	bpl.n	8003e74 <__swbuf_r+0x2e>
 8003eb0:	2e0a      	cmp	r6, #10
 8003eb2:	d1df      	bne.n	8003e74 <__swbuf_r+0x2e>
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f001 fd6e 	bl	8005998 <_fflush_r>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d0d9      	beq.n	8003e74 <__swbuf_r+0x2e>
 8003ec0:	e7d6      	b.n	8003e70 <__swbuf_r+0x2a>
	...

08003ec4 <__swsetup_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4b29      	ldr	r3, [pc, #164]	@ (8003f6c <__swsetup_r+0xa8>)
 8003ec8:	4605      	mov	r5, r0
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	460c      	mov	r4, r1
 8003ece:	b118      	cbz	r0, 8003ed8 <__swsetup_r+0x14>
 8003ed0:	6a03      	ldr	r3, [r0, #32]
 8003ed2:	b90b      	cbnz	r3, 8003ed8 <__swsetup_r+0x14>
 8003ed4:	f7ff fec6 	bl	8003c64 <__sinit>
 8003ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003edc:	0719      	lsls	r1, r3, #28
 8003ede:	d422      	bmi.n	8003f26 <__swsetup_r+0x62>
 8003ee0:	06da      	lsls	r2, r3, #27
 8003ee2:	d407      	bmi.n	8003ef4 <__swsetup_r+0x30>
 8003ee4:	2209      	movs	r2, #9
 8003ee6:	602a      	str	r2, [r5, #0]
 8003ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ef2:	e033      	b.n	8003f5c <__swsetup_r+0x98>
 8003ef4:	0758      	lsls	r0, r3, #29
 8003ef6:	d512      	bpl.n	8003f1e <__swsetup_r+0x5a>
 8003ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003efa:	b141      	cbz	r1, 8003f0e <__swsetup_r+0x4a>
 8003efc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d002      	beq.n	8003f0a <__swsetup_r+0x46>
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 feff 	bl	8004d08 <_free_r>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f0e:	89a3      	ldrh	r3, [r4, #12]
 8003f10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	2300      	movs	r3, #0
 8003f18:	6063      	str	r3, [r4, #4]
 8003f1a:	6923      	ldr	r3, [r4, #16]
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	89a3      	ldrh	r3, [r4, #12]
 8003f20:	f043 0308 	orr.w	r3, r3, #8
 8003f24:	81a3      	strh	r3, [r4, #12]
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	b94b      	cbnz	r3, 8003f3e <__swsetup_r+0x7a>
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f34:	d003      	beq.n	8003f3e <__swsetup_r+0x7a>
 8003f36:	4621      	mov	r1, r4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f001 fd7b 	bl	8005a34 <__smakebuf_r>
 8003f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f42:	f013 0201 	ands.w	r2, r3, #1
 8003f46:	d00a      	beq.n	8003f5e <__swsetup_r+0x9a>
 8003f48:	2200      	movs	r2, #0
 8003f4a:	60a2      	str	r2, [r4, #8]
 8003f4c:	6962      	ldr	r2, [r4, #20]
 8003f4e:	4252      	negs	r2, r2
 8003f50:	61a2      	str	r2, [r4, #24]
 8003f52:	6922      	ldr	r2, [r4, #16]
 8003f54:	b942      	cbnz	r2, 8003f68 <__swsetup_r+0xa4>
 8003f56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f5a:	d1c5      	bne.n	8003ee8 <__swsetup_r+0x24>
 8003f5c:	bd38      	pop	{r3, r4, r5, pc}
 8003f5e:	0799      	lsls	r1, r3, #30
 8003f60:	bf58      	it	pl
 8003f62:	6962      	ldrpl	r2, [r4, #20]
 8003f64:	60a2      	str	r2, [r4, #8]
 8003f66:	e7f4      	b.n	8003f52 <__swsetup_r+0x8e>
 8003f68:	2000      	movs	r0, #0
 8003f6a:	e7f7      	b.n	8003f5c <__swsetup_r+0x98>
 8003f6c:	20000018 	.word	0x20000018

08003f70 <memset>:
 8003f70:	4402      	add	r2, r0
 8003f72:	4603      	mov	r3, r0
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d100      	bne.n	8003f7a <memset+0xa>
 8003f78:	4770      	bx	lr
 8003f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f7e:	e7f9      	b.n	8003f74 <memset+0x4>

08003f80 <_localeconv_r>:
 8003f80:	4800      	ldr	r0, [pc, #0]	@ (8003f84 <_localeconv_r+0x4>)
 8003f82:	4770      	bx	lr
 8003f84:	20000158 	.word	0x20000158

08003f88 <_close_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d06      	ldr	r5, [pc, #24]	@ (8003fa4 <_close_r+0x1c>)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4608      	mov	r0, r1
 8003f92:	602b      	str	r3, [r5, #0]
 8003f94:	f7fd fa2a 	bl	80013ec <_close>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_close_r+0x1a>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_close_r+0x1a>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	200003f4 	.word	0x200003f4

08003fa8 <_lseek_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4d07      	ldr	r5, [pc, #28]	@ (8003fc8 <_lseek_r+0x20>)
 8003fac:	4604      	mov	r4, r0
 8003fae:	4608      	mov	r0, r1
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	602a      	str	r2, [r5, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f7fd fa22 	bl	8001400 <_lseek>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_lseek_r+0x1e>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_lseek_r+0x1e>
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	200003f4 	.word	0x200003f4

08003fcc <_read_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d07      	ldr	r5, [pc, #28]	@ (8003fec <_read_r+0x20>)
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	602a      	str	r2, [r5, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7fd f9f6 	bl	80013cc <_read>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_read_r+0x1e>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_read_r+0x1e>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	200003f4 	.word	0x200003f4

08003ff0 <_write_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4d07      	ldr	r5, [pc, #28]	@ (8004010 <_write_r+0x20>)
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	4608      	mov	r0, r1
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	602a      	str	r2, [r5, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f7fc ffe0 	bl	8000fc4 <_write>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_write_r+0x1e>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_write_r+0x1e>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	200003f4 	.word	0x200003f4

08004014 <__errno>:
 8004014:	4b01      	ldr	r3, [pc, #4]	@ (800401c <__errno+0x8>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000018 	.word	0x20000018

08004020 <__libc_init_array>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4d0d      	ldr	r5, [pc, #52]	@ (8004058 <__libc_init_array+0x38>)
 8004024:	4c0d      	ldr	r4, [pc, #52]	@ (800405c <__libc_init_array+0x3c>)
 8004026:	1b64      	subs	r4, r4, r5
 8004028:	10a4      	asrs	r4, r4, #2
 800402a:	2600      	movs	r6, #0
 800402c:	42a6      	cmp	r6, r4
 800402e:	d109      	bne.n	8004044 <__libc_init_array+0x24>
 8004030:	4d0b      	ldr	r5, [pc, #44]	@ (8004060 <__libc_init_array+0x40>)
 8004032:	4c0c      	ldr	r4, [pc, #48]	@ (8004064 <__libc_init_array+0x44>)
 8004034:	f001 fe5e 	bl	8005cf4 <_init>
 8004038:	1b64      	subs	r4, r4, r5
 800403a:	10a4      	asrs	r4, r4, #2
 800403c:	2600      	movs	r6, #0
 800403e:	42a6      	cmp	r6, r4
 8004040:	d105      	bne.n	800404e <__libc_init_array+0x2e>
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	f855 3b04 	ldr.w	r3, [r5], #4
 8004048:	4798      	blx	r3
 800404a:	3601      	adds	r6, #1
 800404c:	e7ee      	b.n	800402c <__libc_init_array+0xc>
 800404e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004052:	4798      	blx	r3
 8004054:	3601      	adds	r6, #1
 8004056:	e7f2      	b.n	800403e <__libc_init_array+0x1e>
 8004058:	08006148 	.word	0x08006148
 800405c:	08006148 	.word	0x08006148
 8004060:	08006148 	.word	0x08006148
 8004064:	0800614c 	.word	0x0800614c

08004068 <__retarget_lock_init_recursive>:
 8004068:	4770      	bx	lr

0800406a <__retarget_lock_acquire_recursive>:
 800406a:	4770      	bx	lr

0800406c <__retarget_lock_release_recursive>:
 800406c:	4770      	bx	lr

0800406e <quorem>:
 800406e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004072:	6903      	ldr	r3, [r0, #16]
 8004074:	690c      	ldr	r4, [r1, #16]
 8004076:	42a3      	cmp	r3, r4
 8004078:	4607      	mov	r7, r0
 800407a:	db7e      	blt.n	800417a <quorem+0x10c>
 800407c:	3c01      	subs	r4, #1
 800407e:	f101 0814 	add.w	r8, r1, #20
 8004082:	00a3      	lsls	r3, r4, #2
 8004084:	f100 0514 	add.w	r5, r0, #20
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004098:	3301      	adds	r3, #1
 800409a:	429a      	cmp	r2, r3
 800409c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80040a4:	d32e      	bcc.n	8004104 <quorem+0x96>
 80040a6:	f04f 0a00 	mov.w	sl, #0
 80040aa:	46c4      	mov	ip, r8
 80040ac:	46ae      	mov	lr, r5
 80040ae:	46d3      	mov	fp, sl
 80040b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80040b4:	b298      	uxth	r0, r3
 80040b6:	fb06 a000 	mla	r0, r6, r0, sl
 80040ba:	0c02      	lsrs	r2, r0, #16
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	fb06 2303 	mla	r3, r6, r3, r2
 80040c2:	f8de 2000 	ldr.w	r2, [lr]
 80040c6:	b280      	uxth	r0, r0
 80040c8:	b292      	uxth	r2, r2
 80040ca:	1a12      	subs	r2, r2, r0
 80040cc:	445a      	add	r2, fp
 80040ce:	f8de 0000 	ldr.w	r0, [lr]
 80040d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80040dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80040e0:	b292      	uxth	r2, r2
 80040e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80040e6:	45e1      	cmp	r9, ip
 80040e8:	f84e 2b04 	str.w	r2, [lr], #4
 80040ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80040f0:	d2de      	bcs.n	80040b0 <quorem+0x42>
 80040f2:	9b00      	ldr	r3, [sp, #0]
 80040f4:	58eb      	ldr	r3, [r5, r3]
 80040f6:	b92b      	cbnz	r3, 8004104 <quorem+0x96>
 80040f8:	9b01      	ldr	r3, [sp, #4]
 80040fa:	3b04      	subs	r3, #4
 80040fc:	429d      	cmp	r5, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	d32f      	bcc.n	8004162 <quorem+0xf4>
 8004102:	613c      	str	r4, [r7, #16]
 8004104:	4638      	mov	r0, r7
 8004106:	f001 f979 	bl	80053fc <__mcmp>
 800410a:	2800      	cmp	r0, #0
 800410c:	db25      	blt.n	800415a <quorem+0xec>
 800410e:	4629      	mov	r1, r5
 8004110:	2000      	movs	r0, #0
 8004112:	f858 2b04 	ldr.w	r2, [r8], #4
 8004116:	f8d1 c000 	ldr.w	ip, [r1]
 800411a:	fa1f fe82 	uxth.w	lr, r2
 800411e:	fa1f f38c 	uxth.w	r3, ip
 8004122:	eba3 030e 	sub.w	r3, r3, lr
 8004126:	4403      	add	r3, r0
 8004128:	0c12      	lsrs	r2, r2, #16
 800412a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800412e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004132:	b29b      	uxth	r3, r3
 8004134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004138:	45c1      	cmp	r9, r8
 800413a:	f841 3b04 	str.w	r3, [r1], #4
 800413e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004142:	d2e6      	bcs.n	8004112 <quorem+0xa4>
 8004144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004148:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800414c:	b922      	cbnz	r2, 8004158 <quorem+0xea>
 800414e:	3b04      	subs	r3, #4
 8004150:	429d      	cmp	r5, r3
 8004152:	461a      	mov	r2, r3
 8004154:	d30b      	bcc.n	800416e <quorem+0x100>
 8004156:	613c      	str	r4, [r7, #16]
 8004158:	3601      	adds	r6, #1
 800415a:	4630      	mov	r0, r6
 800415c:	b003      	add	sp, #12
 800415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	3b04      	subs	r3, #4
 8004166:	2a00      	cmp	r2, #0
 8004168:	d1cb      	bne.n	8004102 <quorem+0x94>
 800416a:	3c01      	subs	r4, #1
 800416c:	e7c6      	b.n	80040fc <quorem+0x8e>
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	3b04      	subs	r3, #4
 8004172:	2a00      	cmp	r2, #0
 8004174:	d1ef      	bne.n	8004156 <quorem+0xe8>
 8004176:	3c01      	subs	r4, #1
 8004178:	e7ea      	b.n	8004150 <quorem+0xe2>
 800417a:	2000      	movs	r0, #0
 800417c:	e7ee      	b.n	800415c <quorem+0xee>
	...

08004180 <_dtoa_r>:
 8004180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	69c7      	ldr	r7, [r0, #28]
 8004186:	b099      	sub	sp, #100	@ 0x64
 8004188:	ed8d 0b02 	vstr	d0, [sp, #8]
 800418c:	ec55 4b10 	vmov	r4, r5, d0
 8004190:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004192:	9109      	str	r1, [sp, #36]	@ 0x24
 8004194:	4683      	mov	fp, r0
 8004196:	920e      	str	r2, [sp, #56]	@ 0x38
 8004198:	9313      	str	r3, [sp, #76]	@ 0x4c
 800419a:	b97f      	cbnz	r7, 80041bc <_dtoa_r+0x3c>
 800419c:	2010      	movs	r0, #16
 800419e:	f000 fdfd 	bl	8004d9c <malloc>
 80041a2:	4602      	mov	r2, r0
 80041a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80041a8:	b920      	cbnz	r0, 80041b4 <_dtoa_r+0x34>
 80041aa:	4ba7      	ldr	r3, [pc, #668]	@ (8004448 <_dtoa_r+0x2c8>)
 80041ac:	21ef      	movs	r1, #239	@ 0xef
 80041ae:	48a7      	ldr	r0, [pc, #668]	@ (800444c <_dtoa_r+0x2cc>)
 80041b0:	f001 fcf0 	bl	8005b94 <__assert_func>
 80041b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80041b8:	6007      	str	r7, [r0, #0]
 80041ba:	60c7      	str	r7, [r0, #12]
 80041bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80041c0:	6819      	ldr	r1, [r3, #0]
 80041c2:	b159      	cbz	r1, 80041dc <_dtoa_r+0x5c>
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	604a      	str	r2, [r1, #4]
 80041c8:	2301      	movs	r3, #1
 80041ca:	4093      	lsls	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
 80041ce:	4658      	mov	r0, fp
 80041d0:	f000 feda 	bl	8004f88 <_Bfree>
 80041d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	1e2b      	subs	r3, r5, #0
 80041de:	bfb9      	ittee	lt
 80041e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80041e4:	9303      	strlt	r3, [sp, #12]
 80041e6:	2300      	movge	r3, #0
 80041e8:	6033      	strge	r3, [r6, #0]
 80041ea:	9f03      	ldr	r7, [sp, #12]
 80041ec:	4b98      	ldr	r3, [pc, #608]	@ (8004450 <_dtoa_r+0x2d0>)
 80041ee:	bfbc      	itt	lt
 80041f0:	2201      	movlt	r2, #1
 80041f2:	6032      	strlt	r2, [r6, #0]
 80041f4:	43bb      	bics	r3, r7
 80041f6:	d112      	bne.n	800421e <_dtoa_r+0x9e>
 80041f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80041fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004204:	4323      	orrs	r3, r4
 8004206:	f000 854d 	beq.w	8004ca4 <_dtoa_r+0xb24>
 800420a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800420c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004464 <_dtoa_r+0x2e4>
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 854f 	beq.w	8004cb4 <_dtoa_r+0xb34>
 8004216:	f10a 0303 	add.w	r3, sl, #3
 800421a:	f000 bd49 	b.w	8004cb0 <_dtoa_r+0xb30>
 800421e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004222:	2200      	movs	r2, #0
 8004224:	ec51 0b17 	vmov	r0, r1, d7
 8004228:	2300      	movs	r3, #0
 800422a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800422e:	f7fc fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004232:	4680      	mov	r8, r0
 8004234:	b158      	cbz	r0, 800424e <_dtoa_r+0xce>
 8004236:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004238:	2301      	movs	r3, #1
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800423e:	b113      	cbz	r3, 8004246 <_dtoa_r+0xc6>
 8004240:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004242:	4b84      	ldr	r3, [pc, #528]	@ (8004454 <_dtoa_r+0x2d4>)
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004468 <_dtoa_r+0x2e8>
 800424a:	f000 bd33 	b.w	8004cb4 <_dtoa_r+0xb34>
 800424e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004252:	aa16      	add	r2, sp, #88	@ 0x58
 8004254:	a917      	add	r1, sp, #92	@ 0x5c
 8004256:	4658      	mov	r0, fp
 8004258:	f001 f980 	bl	800555c <__d2b>
 800425c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004260:	4681      	mov	r9, r0
 8004262:	2e00      	cmp	r6, #0
 8004264:	d077      	beq.n	8004356 <_dtoa_r+0x1d6>
 8004266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004268:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800426c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004274:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004278:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800427c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004280:	4619      	mov	r1, r3
 8004282:	2200      	movs	r2, #0
 8004284:	4b74      	ldr	r3, [pc, #464]	@ (8004458 <_dtoa_r+0x2d8>)
 8004286:	f7fb ffff 	bl	8000288 <__aeabi_dsub>
 800428a:	a369      	add	r3, pc, #420	@ (adr r3, 8004430 <_dtoa_r+0x2b0>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fc f9b2 	bl	80005f8 <__aeabi_dmul>
 8004294:	a368      	add	r3, pc, #416	@ (adr r3, 8004438 <_dtoa_r+0x2b8>)
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	f7fb fff7 	bl	800028c <__adddf3>
 800429e:	4604      	mov	r4, r0
 80042a0:	4630      	mov	r0, r6
 80042a2:	460d      	mov	r5, r1
 80042a4:	f7fc f93e 	bl	8000524 <__aeabi_i2d>
 80042a8:	a365      	add	r3, pc, #404	@ (adr r3, 8004440 <_dtoa_r+0x2c0>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f7fc f9a3 	bl	80005f8 <__aeabi_dmul>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4620      	mov	r0, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	f7fb ffe7 	bl	800028c <__adddf3>
 80042be:	4604      	mov	r4, r0
 80042c0:	460d      	mov	r5, r1
 80042c2:	f7fc fc49 	bl	8000b58 <__aeabi_d2iz>
 80042c6:	2200      	movs	r2, #0
 80042c8:	4607      	mov	r7, r0
 80042ca:	2300      	movs	r3, #0
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fc fc04 	bl	8000adc <__aeabi_dcmplt>
 80042d4:	b140      	cbz	r0, 80042e8 <_dtoa_r+0x168>
 80042d6:	4638      	mov	r0, r7
 80042d8:	f7fc f924 	bl	8000524 <__aeabi_i2d>
 80042dc:	4622      	mov	r2, r4
 80042de:	462b      	mov	r3, r5
 80042e0:	f7fc fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80042e4:	b900      	cbnz	r0, 80042e8 <_dtoa_r+0x168>
 80042e6:	3f01      	subs	r7, #1
 80042e8:	2f16      	cmp	r7, #22
 80042ea:	d851      	bhi.n	8004390 <_dtoa_r+0x210>
 80042ec:	4b5b      	ldr	r3, [pc, #364]	@ (800445c <_dtoa_r+0x2dc>)
 80042ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042fa:	f7fc fbef 	bl	8000adc <__aeabi_dcmplt>
 80042fe:	2800      	cmp	r0, #0
 8004300:	d048      	beq.n	8004394 <_dtoa_r+0x214>
 8004302:	3f01      	subs	r7, #1
 8004304:	2300      	movs	r3, #0
 8004306:	9312      	str	r3, [sp, #72]	@ 0x48
 8004308:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800430a:	1b9b      	subs	r3, r3, r6
 800430c:	1e5a      	subs	r2, r3, #1
 800430e:	bf44      	itt	mi
 8004310:	f1c3 0801 	rsbmi	r8, r3, #1
 8004314:	2300      	movmi	r3, #0
 8004316:	9208      	str	r2, [sp, #32]
 8004318:	bf54      	ite	pl
 800431a:	f04f 0800 	movpl.w	r8, #0
 800431e:	9308      	strmi	r3, [sp, #32]
 8004320:	2f00      	cmp	r7, #0
 8004322:	db39      	blt.n	8004398 <_dtoa_r+0x218>
 8004324:	9b08      	ldr	r3, [sp, #32]
 8004326:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004328:	443b      	add	r3, r7
 800432a:	9308      	str	r3, [sp, #32]
 800432c:	2300      	movs	r3, #0
 800432e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004332:	2b09      	cmp	r3, #9
 8004334:	d864      	bhi.n	8004400 <_dtoa_r+0x280>
 8004336:	2b05      	cmp	r3, #5
 8004338:	bfc4      	itt	gt
 800433a:	3b04      	subgt	r3, #4
 800433c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800433e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004340:	f1a3 0302 	sub.w	r3, r3, #2
 8004344:	bfcc      	ite	gt
 8004346:	2400      	movgt	r4, #0
 8004348:	2401      	movle	r4, #1
 800434a:	2b03      	cmp	r3, #3
 800434c:	d863      	bhi.n	8004416 <_dtoa_r+0x296>
 800434e:	e8df f003 	tbb	[pc, r3]
 8004352:	372a      	.short	0x372a
 8004354:	5535      	.short	0x5535
 8004356:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800435a:	441e      	add	r6, r3
 800435c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004360:	2b20      	cmp	r3, #32
 8004362:	bfc1      	itttt	gt
 8004364:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004368:	409f      	lslgt	r7, r3
 800436a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800436e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004372:	bfd6      	itet	le
 8004374:	f1c3 0320 	rsble	r3, r3, #32
 8004378:	ea47 0003 	orrgt.w	r0, r7, r3
 800437c:	fa04 f003 	lslle.w	r0, r4, r3
 8004380:	f7fc f8c0 	bl	8000504 <__aeabi_ui2d>
 8004384:	2201      	movs	r2, #1
 8004386:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800438a:	3e01      	subs	r6, #1
 800438c:	9214      	str	r2, [sp, #80]	@ 0x50
 800438e:	e777      	b.n	8004280 <_dtoa_r+0x100>
 8004390:	2301      	movs	r3, #1
 8004392:	e7b8      	b.n	8004306 <_dtoa_r+0x186>
 8004394:	9012      	str	r0, [sp, #72]	@ 0x48
 8004396:	e7b7      	b.n	8004308 <_dtoa_r+0x188>
 8004398:	427b      	negs	r3, r7
 800439a:	930a      	str	r3, [sp, #40]	@ 0x28
 800439c:	2300      	movs	r3, #0
 800439e:	eba8 0807 	sub.w	r8, r8, r7
 80043a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043a4:	e7c4      	b.n	8004330 <_dtoa_r+0x1b0>
 80043a6:	2300      	movs	r3, #0
 80043a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	dc35      	bgt.n	800441c <_dtoa_r+0x29c>
 80043b0:	2301      	movs	r3, #1
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	9307      	str	r3, [sp, #28]
 80043b6:	461a      	mov	r2, r3
 80043b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80043ba:	e00b      	b.n	80043d4 <_dtoa_r+0x254>
 80043bc:	2301      	movs	r3, #1
 80043be:	e7f3      	b.n	80043a8 <_dtoa_r+0x228>
 80043c0:	2300      	movs	r3, #0
 80043c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	3301      	adds	r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	9307      	str	r3, [sp, #28]
 80043d0:	bfb8      	it	lt
 80043d2:	2301      	movlt	r3, #1
 80043d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80043d8:	2100      	movs	r1, #0
 80043da:	2204      	movs	r2, #4
 80043dc:	f102 0514 	add.w	r5, r2, #20
 80043e0:	429d      	cmp	r5, r3
 80043e2:	d91f      	bls.n	8004424 <_dtoa_r+0x2a4>
 80043e4:	6041      	str	r1, [r0, #4]
 80043e6:	4658      	mov	r0, fp
 80043e8:	f000 fd8e 	bl	8004f08 <_Balloc>
 80043ec:	4682      	mov	sl, r0
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d13c      	bne.n	800446c <_dtoa_r+0x2ec>
 80043f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004460 <_dtoa_r+0x2e0>)
 80043f4:	4602      	mov	r2, r0
 80043f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80043fa:	e6d8      	b.n	80041ae <_dtoa_r+0x2e>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e7e0      	b.n	80043c2 <_dtoa_r+0x242>
 8004400:	2401      	movs	r4, #1
 8004402:	2300      	movs	r3, #0
 8004404:	9309      	str	r3, [sp, #36]	@ 0x24
 8004406:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	9307      	str	r3, [sp, #28]
 8004410:	2200      	movs	r2, #0
 8004412:	2312      	movs	r3, #18
 8004414:	e7d0      	b.n	80043b8 <_dtoa_r+0x238>
 8004416:	2301      	movs	r3, #1
 8004418:	930b      	str	r3, [sp, #44]	@ 0x2c
 800441a:	e7f5      	b.n	8004408 <_dtoa_r+0x288>
 800441c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	9307      	str	r3, [sp, #28]
 8004422:	e7d7      	b.n	80043d4 <_dtoa_r+0x254>
 8004424:	3101      	adds	r1, #1
 8004426:	0052      	lsls	r2, r2, #1
 8004428:	e7d8      	b.n	80043dc <_dtoa_r+0x25c>
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w
 8004430:	636f4361 	.word	0x636f4361
 8004434:	3fd287a7 	.word	0x3fd287a7
 8004438:	8b60c8b3 	.word	0x8b60c8b3
 800443c:	3fc68a28 	.word	0x3fc68a28
 8004440:	509f79fb 	.word	0x509f79fb
 8004444:	3fd34413 	.word	0x3fd34413
 8004448:	08005e0d 	.word	0x08005e0d
 800444c:	08005e24 	.word	0x08005e24
 8004450:	7ff00000 	.word	0x7ff00000
 8004454:	08005ddd 	.word	0x08005ddd
 8004458:	3ff80000 	.word	0x3ff80000
 800445c:	08005f20 	.word	0x08005f20
 8004460:	08005e7c 	.word	0x08005e7c
 8004464:	08005e09 	.word	0x08005e09
 8004468:	08005ddc 	.word	0x08005ddc
 800446c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004470:	6018      	str	r0, [r3, #0]
 8004472:	9b07      	ldr	r3, [sp, #28]
 8004474:	2b0e      	cmp	r3, #14
 8004476:	f200 80a4 	bhi.w	80045c2 <_dtoa_r+0x442>
 800447a:	2c00      	cmp	r4, #0
 800447c:	f000 80a1 	beq.w	80045c2 <_dtoa_r+0x442>
 8004480:	2f00      	cmp	r7, #0
 8004482:	dd33      	ble.n	80044ec <_dtoa_r+0x36c>
 8004484:	4bad      	ldr	r3, [pc, #692]	@ (800473c <_dtoa_r+0x5bc>)
 8004486:	f007 020f 	and.w	r2, r7, #15
 800448a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800448e:	ed93 7b00 	vldr	d7, [r3]
 8004492:	05f8      	lsls	r0, r7, #23
 8004494:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004498:	ea4f 1427 	mov.w	r4, r7, asr #4
 800449c:	d516      	bpl.n	80044cc <_dtoa_r+0x34c>
 800449e:	4ba8      	ldr	r3, [pc, #672]	@ (8004740 <_dtoa_r+0x5c0>)
 80044a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044a8:	f7fc f9d0 	bl	800084c <__aeabi_ddiv>
 80044ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044b0:	f004 040f 	and.w	r4, r4, #15
 80044b4:	2603      	movs	r6, #3
 80044b6:	4da2      	ldr	r5, [pc, #648]	@ (8004740 <_dtoa_r+0x5c0>)
 80044b8:	b954      	cbnz	r4, 80044d0 <_dtoa_r+0x350>
 80044ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c2:	f7fc f9c3 	bl	800084c <__aeabi_ddiv>
 80044c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044ca:	e028      	b.n	800451e <_dtoa_r+0x39e>
 80044cc:	2602      	movs	r6, #2
 80044ce:	e7f2      	b.n	80044b6 <_dtoa_r+0x336>
 80044d0:	07e1      	lsls	r1, r4, #31
 80044d2:	d508      	bpl.n	80044e6 <_dtoa_r+0x366>
 80044d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044dc:	f7fc f88c 	bl	80005f8 <__aeabi_dmul>
 80044e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044e4:	3601      	adds	r6, #1
 80044e6:	1064      	asrs	r4, r4, #1
 80044e8:	3508      	adds	r5, #8
 80044ea:	e7e5      	b.n	80044b8 <_dtoa_r+0x338>
 80044ec:	f000 80d2 	beq.w	8004694 <_dtoa_r+0x514>
 80044f0:	427c      	negs	r4, r7
 80044f2:	4b92      	ldr	r3, [pc, #584]	@ (800473c <_dtoa_r+0x5bc>)
 80044f4:	4d92      	ldr	r5, [pc, #584]	@ (8004740 <_dtoa_r+0x5c0>)
 80044f6:	f004 020f 	and.w	r2, r4, #15
 80044fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004506:	f7fc f877 	bl	80005f8 <__aeabi_dmul>
 800450a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800450e:	1124      	asrs	r4, r4, #4
 8004510:	2300      	movs	r3, #0
 8004512:	2602      	movs	r6, #2
 8004514:	2c00      	cmp	r4, #0
 8004516:	f040 80b2 	bne.w	800467e <_dtoa_r+0x4fe>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1d3      	bne.n	80044c6 <_dtoa_r+0x346>
 800451e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004520:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80b7 	beq.w	8004698 <_dtoa_r+0x518>
 800452a:	4b86      	ldr	r3, [pc, #536]	@ (8004744 <_dtoa_r+0x5c4>)
 800452c:	2200      	movs	r2, #0
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fc fad3 	bl	8000adc <__aeabi_dcmplt>
 8004536:	2800      	cmp	r0, #0
 8004538:	f000 80ae 	beq.w	8004698 <_dtoa_r+0x518>
 800453c:	9b07      	ldr	r3, [sp, #28]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80aa 	beq.w	8004698 <_dtoa_r+0x518>
 8004544:	9b00      	ldr	r3, [sp, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	dd37      	ble.n	80045ba <_dtoa_r+0x43a>
 800454a:	1e7b      	subs	r3, r7, #1
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	4620      	mov	r0, r4
 8004550:	4b7d      	ldr	r3, [pc, #500]	@ (8004748 <_dtoa_r+0x5c8>)
 8004552:	2200      	movs	r2, #0
 8004554:	4629      	mov	r1, r5
 8004556:	f7fc f84f 	bl	80005f8 <__aeabi_dmul>
 800455a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800455e:	9c00      	ldr	r4, [sp, #0]
 8004560:	3601      	adds	r6, #1
 8004562:	4630      	mov	r0, r6
 8004564:	f7fb ffde 	bl	8000524 <__aeabi_i2d>
 8004568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800456c:	f7fc f844 	bl	80005f8 <__aeabi_dmul>
 8004570:	4b76      	ldr	r3, [pc, #472]	@ (800474c <_dtoa_r+0x5cc>)
 8004572:	2200      	movs	r2, #0
 8004574:	f7fb fe8a 	bl	800028c <__adddf3>
 8004578:	4605      	mov	r5, r0
 800457a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800457e:	2c00      	cmp	r4, #0
 8004580:	f040 808d 	bne.w	800469e <_dtoa_r+0x51e>
 8004584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004588:	4b71      	ldr	r3, [pc, #452]	@ (8004750 <_dtoa_r+0x5d0>)
 800458a:	2200      	movs	r2, #0
 800458c:	f7fb fe7c 	bl	8000288 <__aeabi_dsub>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004598:	462a      	mov	r2, r5
 800459a:	4633      	mov	r3, r6
 800459c:	f7fc fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	f040 828b 	bne.w	8004abc <_dtoa_r+0x93c>
 80045a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045aa:	462a      	mov	r2, r5
 80045ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80045b0:	f7fc fa94 	bl	8000adc <__aeabi_dcmplt>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	f040 8128 	bne.w	800480a <_dtoa_r+0x68a>
 80045ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80045be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80045c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f2c0 815a 	blt.w	800487e <_dtoa_r+0x6fe>
 80045ca:	2f0e      	cmp	r7, #14
 80045cc:	f300 8157 	bgt.w	800487e <_dtoa_r+0x6fe>
 80045d0:	4b5a      	ldr	r3, [pc, #360]	@ (800473c <_dtoa_r+0x5bc>)
 80045d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045d6:	ed93 7b00 	vldr	d7, [r3]
 80045da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	ed8d 7b00 	vstr	d7, [sp]
 80045e2:	da03      	bge.n	80045ec <_dtoa_r+0x46c>
 80045e4:	9b07      	ldr	r3, [sp, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f340 8101 	ble.w	80047ee <_dtoa_r+0x66e>
 80045ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80045f0:	4656      	mov	r6, sl
 80045f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045f6:	4620      	mov	r0, r4
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7fc f927 	bl	800084c <__aeabi_ddiv>
 80045fe:	f7fc faab 	bl	8000b58 <__aeabi_d2iz>
 8004602:	4680      	mov	r8, r0
 8004604:	f7fb ff8e 	bl	8000524 <__aeabi_i2d>
 8004608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800460c:	f7fb fff4 	bl	80005f8 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4620      	mov	r0, r4
 8004616:	4629      	mov	r1, r5
 8004618:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800461c:	f7fb fe34 	bl	8000288 <__aeabi_dsub>
 8004620:	f806 4b01 	strb.w	r4, [r6], #1
 8004624:	9d07      	ldr	r5, [sp, #28]
 8004626:	eba6 040a 	sub.w	r4, r6, sl
 800462a:	42a5      	cmp	r5, r4
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	f040 8117 	bne.w	8004862 <_dtoa_r+0x6e2>
 8004634:	f7fb fe2a 	bl	800028c <__adddf3>
 8004638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800463c:	4604      	mov	r4, r0
 800463e:	460d      	mov	r5, r1
 8004640:	f7fc fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 8004644:	2800      	cmp	r0, #0
 8004646:	f040 80f9 	bne.w	800483c <_dtoa_r+0x6bc>
 800464a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800464e:	4620      	mov	r0, r4
 8004650:	4629      	mov	r1, r5
 8004652:	f7fc fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8004656:	b118      	cbz	r0, 8004660 <_dtoa_r+0x4e0>
 8004658:	f018 0f01 	tst.w	r8, #1
 800465c:	f040 80ee 	bne.w	800483c <_dtoa_r+0x6bc>
 8004660:	4649      	mov	r1, r9
 8004662:	4658      	mov	r0, fp
 8004664:	f000 fc90 	bl	8004f88 <_Bfree>
 8004668:	2300      	movs	r3, #0
 800466a:	7033      	strb	r3, [r6, #0]
 800466c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800466e:	3701      	adds	r7, #1
 8004670:	601f      	str	r7, [r3, #0]
 8004672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 831d 	beq.w	8004cb4 <_dtoa_r+0xb34>
 800467a:	601e      	str	r6, [r3, #0]
 800467c:	e31a      	b.n	8004cb4 <_dtoa_r+0xb34>
 800467e:	07e2      	lsls	r2, r4, #31
 8004680:	d505      	bpl.n	800468e <_dtoa_r+0x50e>
 8004682:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004686:	f7fb ffb7 	bl	80005f8 <__aeabi_dmul>
 800468a:	3601      	adds	r6, #1
 800468c:	2301      	movs	r3, #1
 800468e:	1064      	asrs	r4, r4, #1
 8004690:	3508      	adds	r5, #8
 8004692:	e73f      	b.n	8004514 <_dtoa_r+0x394>
 8004694:	2602      	movs	r6, #2
 8004696:	e742      	b.n	800451e <_dtoa_r+0x39e>
 8004698:	9c07      	ldr	r4, [sp, #28]
 800469a:	9704      	str	r7, [sp, #16]
 800469c:	e761      	b.n	8004562 <_dtoa_r+0x3e2>
 800469e:	4b27      	ldr	r3, [pc, #156]	@ (800473c <_dtoa_r+0x5bc>)
 80046a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80046a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80046aa:	4454      	add	r4, sl
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d053      	beq.n	8004758 <_dtoa_r+0x5d8>
 80046b0:	4928      	ldr	r1, [pc, #160]	@ (8004754 <_dtoa_r+0x5d4>)
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7fc f8ca 	bl	800084c <__aeabi_ddiv>
 80046b8:	4633      	mov	r3, r6
 80046ba:	462a      	mov	r2, r5
 80046bc:	f7fb fde4 	bl	8000288 <__aeabi_dsub>
 80046c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80046c4:	4656      	mov	r6, sl
 80046c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046ca:	f7fc fa45 	bl	8000b58 <__aeabi_d2iz>
 80046ce:	4605      	mov	r5, r0
 80046d0:	f7fb ff28 	bl	8000524 <__aeabi_i2d>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046dc:	f7fb fdd4 	bl	8000288 <__aeabi_dsub>
 80046e0:	3530      	adds	r5, #48	@ 0x30
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046ea:	f806 5b01 	strb.w	r5, [r6], #1
 80046ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046f2:	f7fc f9f3 	bl	8000adc <__aeabi_dcmplt>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d171      	bne.n	80047de <_dtoa_r+0x65e>
 80046fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046fe:	4911      	ldr	r1, [pc, #68]	@ (8004744 <_dtoa_r+0x5c4>)
 8004700:	2000      	movs	r0, #0
 8004702:	f7fb fdc1 	bl	8000288 <__aeabi_dsub>
 8004706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800470a:	f7fc f9e7 	bl	8000adc <__aeabi_dcmplt>
 800470e:	2800      	cmp	r0, #0
 8004710:	f040 8095 	bne.w	800483e <_dtoa_r+0x6be>
 8004714:	42a6      	cmp	r6, r4
 8004716:	f43f af50 	beq.w	80045ba <_dtoa_r+0x43a>
 800471a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800471e:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <_dtoa_r+0x5c8>)
 8004720:	2200      	movs	r2, #0
 8004722:	f7fb ff69 	bl	80005f8 <__aeabi_dmul>
 8004726:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <_dtoa_r+0x5c8>)
 8004728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800472c:	2200      	movs	r2, #0
 800472e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004732:	f7fb ff61 	bl	80005f8 <__aeabi_dmul>
 8004736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800473a:	e7c4      	b.n	80046c6 <_dtoa_r+0x546>
 800473c:	08005f20 	.word	0x08005f20
 8004740:	08005ef8 	.word	0x08005ef8
 8004744:	3ff00000 	.word	0x3ff00000
 8004748:	40240000 	.word	0x40240000
 800474c:	401c0000 	.word	0x401c0000
 8004750:	40140000 	.word	0x40140000
 8004754:	3fe00000 	.word	0x3fe00000
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	f7fb ff4c 	bl	80005f8 <__aeabi_dmul>
 8004760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004764:	9415      	str	r4, [sp, #84]	@ 0x54
 8004766:	4656      	mov	r6, sl
 8004768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800476c:	f7fc f9f4 	bl	8000b58 <__aeabi_d2iz>
 8004770:	4605      	mov	r5, r0
 8004772:	f7fb fed7 	bl	8000524 <__aeabi_i2d>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800477e:	f7fb fd83 	bl	8000288 <__aeabi_dsub>
 8004782:	3530      	adds	r5, #48	@ 0x30
 8004784:	f806 5b01 	strb.w	r5, [r6], #1
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	42a6      	cmp	r6, r4
 800478e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	d124      	bne.n	80047e2 <_dtoa_r+0x662>
 8004798:	4bac      	ldr	r3, [pc, #688]	@ (8004a4c <_dtoa_r+0x8cc>)
 800479a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800479e:	f7fb fd75 	bl	800028c <__adddf3>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047aa:	f7fc f9b5 	bl	8000b18 <__aeabi_dcmpgt>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d145      	bne.n	800483e <_dtoa_r+0x6be>
 80047b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047b6:	49a5      	ldr	r1, [pc, #660]	@ (8004a4c <_dtoa_r+0x8cc>)
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7fb fd65 	bl	8000288 <__aeabi_dsub>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047c6:	f7fc f989 	bl	8000adc <__aeabi_dcmplt>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	f43f aef5 	beq.w	80045ba <_dtoa_r+0x43a>
 80047d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80047d2:	1e73      	subs	r3, r6, #1
 80047d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80047d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80047da:	2b30      	cmp	r3, #48	@ 0x30
 80047dc:	d0f8      	beq.n	80047d0 <_dtoa_r+0x650>
 80047de:	9f04      	ldr	r7, [sp, #16]
 80047e0:	e73e      	b.n	8004660 <_dtoa_r+0x4e0>
 80047e2:	4b9b      	ldr	r3, [pc, #620]	@ (8004a50 <_dtoa_r+0x8d0>)
 80047e4:	f7fb ff08 	bl	80005f8 <__aeabi_dmul>
 80047e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047ec:	e7bc      	b.n	8004768 <_dtoa_r+0x5e8>
 80047ee:	d10c      	bne.n	800480a <_dtoa_r+0x68a>
 80047f0:	4b98      	ldr	r3, [pc, #608]	@ (8004a54 <_dtoa_r+0x8d4>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047f8:	f7fb fefe 	bl	80005f8 <__aeabi_dmul>
 80047fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004800:	f7fc f980 	bl	8000b04 <__aeabi_dcmpge>
 8004804:	2800      	cmp	r0, #0
 8004806:	f000 8157 	beq.w	8004ab8 <_dtoa_r+0x938>
 800480a:	2400      	movs	r4, #0
 800480c:	4625      	mov	r5, r4
 800480e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004810:	43db      	mvns	r3, r3
 8004812:	9304      	str	r3, [sp, #16]
 8004814:	4656      	mov	r6, sl
 8004816:	2700      	movs	r7, #0
 8004818:	4621      	mov	r1, r4
 800481a:	4658      	mov	r0, fp
 800481c:	f000 fbb4 	bl	8004f88 <_Bfree>
 8004820:	2d00      	cmp	r5, #0
 8004822:	d0dc      	beq.n	80047de <_dtoa_r+0x65e>
 8004824:	b12f      	cbz	r7, 8004832 <_dtoa_r+0x6b2>
 8004826:	42af      	cmp	r7, r5
 8004828:	d003      	beq.n	8004832 <_dtoa_r+0x6b2>
 800482a:	4639      	mov	r1, r7
 800482c:	4658      	mov	r0, fp
 800482e:	f000 fbab 	bl	8004f88 <_Bfree>
 8004832:	4629      	mov	r1, r5
 8004834:	4658      	mov	r0, fp
 8004836:	f000 fba7 	bl	8004f88 <_Bfree>
 800483a:	e7d0      	b.n	80047de <_dtoa_r+0x65e>
 800483c:	9704      	str	r7, [sp, #16]
 800483e:	4633      	mov	r3, r6
 8004840:	461e      	mov	r6, r3
 8004842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004846:	2a39      	cmp	r2, #57	@ 0x39
 8004848:	d107      	bne.n	800485a <_dtoa_r+0x6da>
 800484a:	459a      	cmp	sl, r3
 800484c:	d1f8      	bne.n	8004840 <_dtoa_r+0x6c0>
 800484e:	9a04      	ldr	r2, [sp, #16]
 8004850:	3201      	adds	r2, #1
 8004852:	9204      	str	r2, [sp, #16]
 8004854:	2230      	movs	r2, #48	@ 0x30
 8004856:	f88a 2000 	strb.w	r2, [sl]
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	3201      	adds	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e7bd      	b.n	80047de <_dtoa_r+0x65e>
 8004862:	4b7b      	ldr	r3, [pc, #492]	@ (8004a50 <_dtoa_r+0x8d0>)
 8004864:	2200      	movs	r2, #0
 8004866:	f7fb fec7 	bl	80005f8 <__aeabi_dmul>
 800486a:	2200      	movs	r2, #0
 800486c:	2300      	movs	r3, #0
 800486e:	4604      	mov	r4, r0
 8004870:	460d      	mov	r5, r1
 8004872:	f7fc f929 	bl	8000ac8 <__aeabi_dcmpeq>
 8004876:	2800      	cmp	r0, #0
 8004878:	f43f aebb 	beq.w	80045f2 <_dtoa_r+0x472>
 800487c:	e6f0      	b.n	8004660 <_dtoa_r+0x4e0>
 800487e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004880:	2a00      	cmp	r2, #0
 8004882:	f000 80db 	beq.w	8004a3c <_dtoa_r+0x8bc>
 8004886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004888:	2a01      	cmp	r2, #1
 800488a:	f300 80bf 	bgt.w	8004a0c <_dtoa_r+0x88c>
 800488e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004890:	2a00      	cmp	r2, #0
 8004892:	f000 80b7 	beq.w	8004a04 <_dtoa_r+0x884>
 8004896:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800489a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800489c:	4646      	mov	r6, r8
 800489e:	9a08      	ldr	r2, [sp, #32]
 80048a0:	2101      	movs	r1, #1
 80048a2:	441a      	add	r2, r3
 80048a4:	4658      	mov	r0, fp
 80048a6:	4498      	add	r8, r3
 80048a8:	9208      	str	r2, [sp, #32]
 80048aa:	f000 fc21 	bl	80050f0 <__i2b>
 80048ae:	4605      	mov	r5, r0
 80048b0:	b15e      	cbz	r6, 80048ca <_dtoa_r+0x74a>
 80048b2:	9b08      	ldr	r3, [sp, #32]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	dd08      	ble.n	80048ca <_dtoa_r+0x74a>
 80048b8:	42b3      	cmp	r3, r6
 80048ba:	9a08      	ldr	r2, [sp, #32]
 80048bc:	bfa8      	it	ge
 80048be:	4633      	movge	r3, r6
 80048c0:	eba8 0803 	sub.w	r8, r8, r3
 80048c4:	1af6      	subs	r6, r6, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	9308      	str	r3, [sp, #32]
 80048ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048cc:	b1f3      	cbz	r3, 800490c <_dtoa_r+0x78c>
 80048ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80b7 	beq.w	8004a44 <_dtoa_r+0x8c4>
 80048d6:	b18c      	cbz	r4, 80048fc <_dtoa_r+0x77c>
 80048d8:	4629      	mov	r1, r5
 80048da:	4622      	mov	r2, r4
 80048dc:	4658      	mov	r0, fp
 80048de:	f000 fcc7 	bl	8005270 <__pow5mult>
 80048e2:	464a      	mov	r2, r9
 80048e4:	4601      	mov	r1, r0
 80048e6:	4605      	mov	r5, r0
 80048e8:	4658      	mov	r0, fp
 80048ea:	f000 fc17 	bl	800511c <__multiply>
 80048ee:	4649      	mov	r1, r9
 80048f0:	9004      	str	r0, [sp, #16]
 80048f2:	4658      	mov	r0, fp
 80048f4:	f000 fb48 	bl	8004f88 <_Bfree>
 80048f8:	9b04      	ldr	r3, [sp, #16]
 80048fa:	4699      	mov	r9, r3
 80048fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048fe:	1b1a      	subs	r2, r3, r4
 8004900:	d004      	beq.n	800490c <_dtoa_r+0x78c>
 8004902:	4649      	mov	r1, r9
 8004904:	4658      	mov	r0, fp
 8004906:	f000 fcb3 	bl	8005270 <__pow5mult>
 800490a:	4681      	mov	r9, r0
 800490c:	2101      	movs	r1, #1
 800490e:	4658      	mov	r0, fp
 8004910:	f000 fbee 	bl	80050f0 <__i2b>
 8004914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004916:	4604      	mov	r4, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 81cf 	beq.w	8004cbc <_dtoa_r+0xb3c>
 800491e:	461a      	mov	r2, r3
 8004920:	4601      	mov	r1, r0
 8004922:	4658      	mov	r0, fp
 8004924:	f000 fca4 	bl	8005270 <__pow5mult>
 8004928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800492a:	2b01      	cmp	r3, #1
 800492c:	4604      	mov	r4, r0
 800492e:	f300 8095 	bgt.w	8004a5c <_dtoa_r+0x8dc>
 8004932:	9b02      	ldr	r3, [sp, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f040 8087 	bne.w	8004a48 <_dtoa_r+0x8c8>
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 8089 	bne.w	8004a58 <_dtoa_r+0x8d8>
 8004946:	9b03      	ldr	r3, [sp, #12]
 8004948:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800494c:	0d1b      	lsrs	r3, r3, #20
 800494e:	051b      	lsls	r3, r3, #20
 8004950:	b12b      	cbz	r3, 800495e <_dtoa_r+0x7de>
 8004952:	9b08      	ldr	r3, [sp, #32]
 8004954:	3301      	adds	r3, #1
 8004956:	9308      	str	r3, [sp, #32]
 8004958:	f108 0801 	add.w	r8, r8, #1
 800495c:	2301      	movs	r3, #1
 800495e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 81b0 	beq.w	8004cc8 <_dtoa_r+0xb48>
 8004968:	6923      	ldr	r3, [r4, #16]
 800496a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800496e:	6918      	ldr	r0, [r3, #16]
 8004970:	f000 fb72 	bl	8005058 <__hi0bits>
 8004974:	f1c0 0020 	rsb	r0, r0, #32
 8004978:	9b08      	ldr	r3, [sp, #32]
 800497a:	4418      	add	r0, r3
 800497c:	f010 001f 	ands.w	r0, r0, #31
 8004980:	d077      	beq.n	8004a72 <_dtoa_r+0x8f2>
 8004982:	f1c0 0320 	rsb	r3, r0, #32
 8004986:	2b04      	cmp	r3, #4
 8004988:	dd6b      	ble.n	8004a62 <_dtoa_r+0x8e2>
 800498a:	9b08      	ldr	r3, [sp, #32]
 800498c:	f1c0 001c 	rsb	r0, r0, #28
 8004990:	4403      	add	r3, r0
 8004992:	4480      	add	r8, r0
 8004994:	4406      	add	r6, r0
 8004996:	9308      	str	r3, [sp, #32]
 8004998:	f1b8 0f00 	cmp.w	r8, #0
 800499c:	dd05      	ble.n	80049aa <_dtoa_r+0x82a>
 800499e:	4649      	mov	r1, r9
 80049a0:	4642      	mov	r2, r8
 80049a2:	4658      	mov	r0, fp
 80049a4:	f000 fcbe 	bl	8005324 <__lshift>
 80049a8:	4681      	mov	r9, r0
 80049aa:	9b08      	ldr	r3, [sp, #32]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dd05      	ble.n	80049bc <_dtoa_r+0x83c>
 80049b0:	4621      	mov	r1, r4
 80049b2:	461a      	mov	r2, r3
 80049b4:	4658      	mov	r0, fp
 80049b6:	f000 fcb5 	bl	8005324 <__lshift>
 80049ba:	4604      	mov	r4, r0
 80049bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d059      	beq.n	8004a76 <_dtoa_r+0x8f6>
 80049c2:	4621      	mov	r1, r4
 80049c4:	4648      	mov	r0, r9
 80049c6:	f000 fd19 	bl	80053fc <__mcmp>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	da53      	bge.n	8004a76 <_dtoa_r+0x8f6>
 80049ce:	1e7b      	subs	r3, r7, #1
 80049d0:	9304      	str	r3, [sp, #16]
 80049d2:	4649      	mov	r1, r9
 80049d4:	2300      	movs	r3, #0
 80049d6:	220a      	movs	r2, #10
 80049d8:	4658      	mov	r0, fp
 80049da:	f000 faf7 	bl	8004fcc <__multadd>
 80049de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049e0:	4681      	mov	r9, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8172 	beq.w	8004ccc <_dtoa_r+0xb4c>
 80049e8:	2300      	movs	r3, #0
 80049ea:	4629      	mov	r1, r5
 80049ec:	220a      	movs	r2, #10
 80049ee:	4658      	mov	r0, fp
 80049f0:	f000 faec 	bl	8004fcc <__multadd>
 80049f4:	9b00      	ldr	r3, [sp, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	4605      	mov	r5, r0
 80049fa:	dc67      	bgt.n	8004acc <_dtoa_r+0x94c>
 80049fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	dc41      	bgt.n	8004a86 <_dtoa_r+0x906>
 8004a02:	e063      	b.n	8004acc <_dtoa_r+0x94c>
 8004a04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004a06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004a0a:	e746      	b.n	800489a <_dtoa_r+0x71a>
 8004a0c:	9b07      	ldr	r3, [sp, #28]
 8004a0e:	1e5c      	subs	r4, r3, #1
 8004a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a12:	42a3      	cmp	r3, r4
 8004a14:	bfbf      	itttt	lt
 8004a16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004a18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004a1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004a1c:	1ae3      	sublt	r3, r4, r3
 8004a1e:	bfb4      	ite	lt
 8004a20:	18d2      	addlt	r2, r2, r3
 8004a22:	1b1c      	subge	r4, r3, r4
 8004a24:	9b07      	ldr	r3, [sp, #28]
 8004a26:	bfbc      	itt	lt
 8004a28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004a2a:	2400      	movlt	r4, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bfb5      	itete	lt
 8004a30:	eba8 0603 	sublt.w	r6, r8, r3
 8004a34:	9b07      	ldrge	r3, [sp, #28]
 8004a36:	2300      	movlt	r3, #0
 8004a38:	4646      	movge	r6, r8
 8004a3a:	e730      	b.n	800489e <_dtoa_r+0x71e>
 8004a3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004a40:	4646      	mov	r6, r8
 8004a42:	e735      	b.n	80048b0 <_dtoa_r+0x730>
 8004a44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a46:	e75c      	b.n	8004902 <_dtoa_r+0x782>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e788      	b.n	800495e <_dtoa_r+0x7de>
 8004a4c:	3fe00000 	.word	0x3fe00000
 8004a50:	40240000 	.word	0x40240000
 8004a54:	40140000 	.word	0x40140000
 8004a58:	9b02      	ldr	r3, [sp, #8]
 8004a5a:	e780      	b.n	800495e <_dtoa_r+0x7de>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a60:	e782      	b.n	8004968 <_dtoa_r+0x7e8>
 8004a62:	d099      	beq.n	8004998 <_dtoa_r+0x818>
 8004a64:	9a08      	ldr	r2, [sp, #32]
 8004a66:	331c      	adds	r3, #28
 8004a68:	441a      	add	r2, r3
 8004a6a:	4498      	add	r8, r3
 8004a6c:	441e      	add	r6, r3
 8004a6e:	9208      	str	r2, [sp, #32]
 8004a70:	e792      	b.n	8004998 <_dtoa_r+0x818>
 8004a72:	4603      	mov	r3, r0
 8004a74:	e7f6      	b.n	8004a64 <_dtoa_r+0x8e4>
 8004a76:	9b07      	ldr	r3, [sp, #28]
 8004a78:	9704      	str	r7, [sp, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dc20      	bgt.n	8004ac0 <_dtoa_r+0x940>
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	dd1e      	ble.n	8004ac4 <_dtoa_r+0x944>
 8004a86:	9b00      	ldr	r3, [sp, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f aec0 	bne.w	800480e <_dtoa_r+0x68e>
 8004a8e:	4621      	mov	r1, r4
 8004a90:	2205      	movs	r2, #5
 8004a92:	4658      	mov	r0, fp
 8004a94:	f000 fa9a 	bl	8004fcc <__multadd>
 8004a98:	4601      	mov	r1, r0
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	4648      	mov	r0, r9
 8004a9e:	f000 fcad 	bl	80053fc <__mcmp>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	f77f aeb3 	ble.w	800480e <_dtoa_r+0x68e>
 8004aa8:	4656      	mov	r6, sl
 8004aaa:	2331      	movs	r3, #49	@ 0x31
 8004aac:	f806 3b01 	strb.w	r3, [r6], #1
 8004ab0:	9b04      	ldr	r3, [sp, #16]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	9304      	str	r3, [sp, #16]
 8004ab6:	e6ae      	b.n	8004816 <_dtoa_r+0x696>
 8004ab8:	9c07      	ldr	r4, [sp, #28]
 8004aba:	9704      	str	r7, [sp, #16]
 8004abc:	4625      	mov	r5, r4
 8004abe:	e7f3      	b.n	8004aa8 <_dtoa_r+0x928>
 8004ac0:	9b07      	ldr	r3, [sp, #28]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8104 	beq.w	8004cd4 <_dtoa_r+0xb54>
 8004acc:	2e00      	cmp	r6, #0
 8004ace:	dd05      	ble.n	8004adc <_dtoa_r+0x95c>
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4658      	mov	r0, fp
 8004ad6:	f000 fc25 	bl	8005324 <__lshift>
 8004ada:	4605      	mov	r5, r0
 8004adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d05a      	beq.n	8004b98 <_dtoa_r+0xa18>
 8004ae2:	6869      	ldr	r1, [r5, #4]
 8004ae4:	4658      	mov	r0, fp
 8004ae6:	f000 fa0f 	bl	8004f08 <_Balloc>
 8004aea:	4606      	mov	r6, r0
 8004aec:	b928      	cbnz	r0, 8004afa <_dtoa_r+0x97a>
 8004aee:	4b84      	ldr	r3, [pc, #528]	@ (8004d00 <_dtoa_r+0xb80>)
 8004af0:	4602      	mov	r2, r0
 8004af2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004af6:	f7ff bb5a 	b.w	80041ae <_dtoa_r+0x2e>
 8004afa:	692a      	ldr	r2, [r5, #16]
 8004afc:	3202      	adds	r2, #2
 8004afe:	0092      	lsls	r2, r2, #2
 8004b00:	f105 010c 	add.w	r1, r5, #12
 8004b04:	300c      	adds	r0, #12
 8004b06:	f001 f837 	bl	8005b78 <memcpy>
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4658      	mov	r0, fp
 8004b10:	f000 fc08 	bl	8005324 <__lshift>
 8004b14:	f10a 0301 	add.w	r3, sl, #1
 8004b18:	9307      	str	r3, [sp, #28]
 8004b1a:	9b00      	ldr	r3, [sp, #0]
 8004b1c:	4453      	add	r3, sl
 8004b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b20:	9b02      	ldr	r3, [sp, #8]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	462f      	mov	r7, r5
 8004b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	9b07      	ldr	r3, [sp, #28]
 8004b2e:	4621      	mov	r1, r4
 8004b30:	3b01      	subs	r3, #1
 8004b32:	4648      	mov	r0, r9
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	f7ff fa9a 	bl	800406e <quorem>
 8004b3a:	4639      	mov	r1, r7
 8004b3c:	9002      	str	r0, [sp, #8]
 8004b3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004b42:	4648      	mov	r0, r9
 8004b44:	f000 fc5a 	bl	80053fc <__mcmp>
 8004b48:	462a      	mov	r2, r5
 8004b4a:	9008      	str	r0, [sp, #32]
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	4658      	mov	r0, fp
 8004b50:	f000 fc70 	bl	8005434 <__mdiff>
 8004b54:	68c2      	ldr	r2, [r0, #12]
 8004b56:	4606      	mov	r6, r0
 8004b58:	bb02      	cbnz	r2, 8004b9c <_dtoa_r+0xa1c>
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	4648      	mov	r0, r9
 8004b5e:	f000 fc4d 	bl	80053fc <__mcmp>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4631      	mov	r1, r6
 8004b66:	4658      	mov	r0, fp
 8004b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b6a:	f000 fa0d 	bl	8004f88 <_Bfree>
 8004b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b72:	9e07      	ldr	r6, [sp, #28]
 8004b74:	ea43 0102 	orr.w	r1, r3, r2
 8004b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b7a:	4319      	orrs	r1, r3
 8004b7c:	d110      	bne.n	8004ba0 <_dtoa_r+0xa20>
 8004b7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004b82:	d029      	beq.n	8004bd8 <_dtoa_r+0xa58>
 8004b84:	9b08      	ldr	r3, [sp, #32]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	dd02      	ble.n	8004b90 <_dtoa_r+0xa10>
 8004b8a:	9b02      	ldr	r3, [sp, #8]
 8004b8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004b90:	9b00      	ldr	r3, [sp, #0]
 8004b92:	f883 8000 	strb.w	r8, [r3]
 8004b96:	e63f      	b.n	8004818 <_dtoa_r+0x698>
 8004b98:	4628      	mov	r0, r5
 8004b9a:	e7bb      	b.n	8004b14 <_dtoa_r+0x994>
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	e7e1      	b.n	8004b64 <_dtoa_r+0x9e4>
 8004ba0:	9b08      	ldr	r3, [sp, #32]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db04      	blt.n	8004bb0 <_dtoa_r+0xa30>
 8004ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004bac:	430b      	orrs	r3, r1
 8004bae:	d120      	bne.n	8004bf2 <_dtoa_r+0xa72>
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	dded      	ble.n	8004b90 <_dtoa_r+0xa10>
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4658      	mov	r0, fp
 8004bba:	f000 fbb3 	bl	8005324 <__lshift>
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4681      	mov	r9, r0
 8004bc2:	f000 fc1b 	bl	80053fc <__mcmp>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	dc03      	bgt.n	8004bd2 <_dtoa_r+0xa52>
 8004bca:	d1e1      	bne.n	8004b90 <_dtoa_r+0xa10>
 8004bcc:	f018 0f01 	tst.w	r8, #1
 8004bd0:	d0de      	beq.n	8004b90 <_dtoa_r+0xa10>
 8004bd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004bd6:	d1d8      	bne.n	8004b8a <_dtoa_r+0xa0a>
 8004bd8:	9a00      	ldr	r2, [sp, #0]
 8004bda:	2339      	movs	r3, #57	@ 0x39
 8004bdc:	7013      	strb	r3, [r2, #0]
 8004bde:	4633      	mov	r3, r6
 8004be0:	461e      	mov	r6, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004be8:	2a39      	cmp	r2, #57	@ 0x39
 8004bea:	d052      	beq.n	8004c92 <_dtoa_r+0xb12>
 8004bec:	3201      	adds	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e612      	b.n	8004818 <_dtoa_r+0x698>
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	dd07      	ble.n	8004c06 <_dtoa_r+0xa86>
 8004bf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004bfa:	d0ed      	beq.n	8004bd8 <_dtoa_r+0xa58>
 8004bfc:	9a00      	ldr	r2, [sp, #0]
 8004bfe:	f108 0301 	add.w	r3, r8, #1
 8004c02:	7013      	strb	r3, [r2, #0]
 8004c04:	e608      	b.n	8004818 <_dtoa_r+0x698>
 8004c06:	9b07      	ldr	r3, [sp, #28]
 8004c08:	9a07      	ldr	r2, [sp, #28]
 8004c0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d028      	beq.n	8004c66 <_dtoa_r+0xae6>
 8004c14:	4649      	mov	r1, r9
 8004c16:	2300      	movs	r3, #0
 8004c18:	220a      	movs	r2, #10
 8004c1a:	4658      	mov	r0, fp
 8004c1c:	f000 f9d6 	bl	8004fcc <__multadd>
 8004c20:	42af      	cmp	r7, r5
 8004c22:	4681      	mov	r9, r0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	f04f 020a 	mov.w	r2, #10
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	4658      	mov	r0, fp
 8004c30:	d107      	bne.n	8004c42 <_dtoa_r+0xac2>
 8004c32:	f000 f9cb 	bl	8004fcc <__multadd>
 8004c36:	4607      	mov	r7, r0
 8004c38:	4605      	mov	r5, r0
 8004c3a:	9b07      	ldr	r3, [sp, #28]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	9307      	str	r3, [sp, #28]
 8004c40:	e774      	b.n	8004b2c <_dtoa_r+0x9ac>
 8004c42:	f000 f9c3 	bl	8004fcc <__multadd>
 8004c46:	4629      	mov	r1, r5
 8004c48:	4607      	mov	r7, r0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	220a      	movs	r2, #10
 8004c4e:	4658      	mov	r0, fp
 8004c50:	f000 f9bc 	bl	8004fcc <__multadd>
 8004c54:	4605      	mov	r5, r0
 8004c56:	e7f0      	b.n	8004c3a <_dtoa_r+0xaba>
 8004c58:	9b00      	ldr	r3, [sp, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bfcc      	ite	gt
 8004c5e:	461e      	movgt	r6, r3
 8004c60:	2601      	movle	r6, #1
 8004c62:	4456      	add	r6, sl
 8004c64:	2700      	movs	r7, #0
 8004c66:	4649      	mov	r1, r9
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4658      	mov	r0, fp
 8004c6c:	f000 fb5a 	bl	8005324 <__lshift>
 8004c70:	4621      	mov	r1, r4
 8004c72:	4681      	mov	r9, r0
 8004c74:	f000 fbc2 	bl	80053fc <__mcmp>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	dcb0      	bgt.n	8004bde <_dtoa_r+0xa5e>
 8004c7c:	d102      	bne.n	8004c84 <_dtoa_r+0xb04>
 8004c7e:	f018 0f01 	tst.w	r8, #1
 8004c82:	d1ac      	bne.n	8004bde <_dtoa_r+0xa5e>
 8004c84:	4633      	mov	r3, r6
 8004c86:	461e      	mov	r6, r3
 8004c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c8c:	2a30      	cmp	r2, #48	@ 0x30
 8004c8e:	d0fa      	beq.n	8004c86 <_dtoa_r+0xb06>
 8004c90:	e5c2      	b.n	8004818 <_dtoa_r+0x698>
 8004c92:	459a      	cmp	sl, r3
 8004c94:	d1a4      	bne.n	8004be0 <_dtoa_r+0xa60>
 8004c96:	9b04      	ldr	r3, [sp, #16]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	9304      	str	r3, [sp, #16]
 8004c9c:	2331      	movs	r3, #49	@ 0x31
 8004c9e:	f88a 3000 	strb.w	r3, [sl]
 8004ca2:	e5b9      	b.n	8004818 <_dtoa_r+0x698>
 8004ca4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ca6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004d04 <_dtoa_r+0xb84>
 8004caa:	b11b      	cbz	r3, 8004cb4 <_dtoa_r+0xb34>
 8004cac:	f10a 0308 	add.w	r3, sl, #8
 8004cb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	4650      	mov	r0, sl
 8004cb6:	b019      	add	sp, #100	@ 0x64
 8004cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f77f ae37 	ble.w	8004932 <_dtoa_r+0x7b2>
 8004cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cc8:	2001      	movs	r0, #1
 8004cca:	e655      	b.n	8004978 <_dtoa_r+0x7f8>
 8004ccc:	9b00      	ldr	r3, [sp, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f77f aed6 	ble.w	8004a80 <_dtoa_r+0x900>
 8004cd4:	4656      	mov	r6, sl
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	4648      	mov	r0, r9
 8004cda:	f7ff f9c8 	bl	800406e <quorem>
 8004cde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ce2:	f806 8b01 	strb.w	r8, [r6], #1
 8004ce6:	9b00      	ldr	r3, [sp, #0]
 8004ce8:	eba6 020a 	sub.w	r2, r6, sl
 8004cec:	4293      	cmp	r3, r2
 8004cee:	ddb3      	ble.n	8004c58 <_dtoa_r+0xad8>
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	220a      	movs	r2, #10
 8004cf6:	4658      	mov	r0, fp
 8004cf8:	f000 f968 	bl	8004fcc <__multadd>
 8004cfc:	4681      	mov	r9, r0
 8004cfe:	e7ea      	b.n	8004cd6 <_dtoa_r+0xb56>
 8004d00:	08005e7c 	.word	0x08005e7c
 8004d04:	08005e00 	.word	0x08005e00

08004d08 <_free_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	2900      	cmp	r1, #0
 8004d0e:	d041      	beq.n	8004d94 <_free_r+0x8c>
 8004d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d14:	1f0c      	subs	r4, r1, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bfb8      	it	lt
 8004d1a:	18e4      	addlt	r4, r4, r3
 8004d1c:	f000 f8e8 	bl	8004ef0 <__malloc_lock>
 8004d20:	4a1d      	ldr	r2, [pc, #116]	@ (8004d98 <_free_r+0x90>)
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	b933      	cbnz	r3, 8004d34 <_free_r+0x2c>
 8004d26:	6063      	str	r3, [r4, #4]
 8004d28:	6014      	str	r4, [r2, #0]
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d30:	f000 b8e4 	b.w	8004efc <__malloc_unlock>
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	d908      	bls.n	8004d4a <_free_r+0x42>
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	1821      	adds	r1, r4, r0
 8004d3c:	428b      	cmp	r3, r1
 8004d3e:	bf01      	itttt	eq
 8004d40:	6819      	ldreq	r1, [r3, #0]
 8004d42:	685b      	ldreq	r3, [r3, #4]
 8004d44:	1809      	addeq	r1, r1, r0
 8004d46:	6021      	streq	r1, [r4, #0]
 8004d48:	e7ed      	b.n	8004d26 <_free_r+0x1e>
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	b10b      	cbz	r3, 8004d54 <_free_r+0x4c>
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d9fa      	bls.n	8004d4a <_free_r+0x42>
 8004d54:	6811      	ldr	r1, [r2, #0]
 8004d56:	1850      	adds	r0, r2, r1
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d10b      	bne.n	8004d74 <_free_r+0x6c>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	4401      	add	r1, r0
 8004d60:	1850      	adds	r0, r2, r1
 8004d62:	4283      	cmp	r3, r0
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	d1e0      	bne.n	8004d2a <_free_r+0x22>
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	6053      	str	r3, [r2, #4]
 8004d6e:	4408      	add	r0, r1
 8004d70:	6010      	str	r0, [r2, #0]
 8004d72:	e7da      	b.n	8004d2a <_free_r+0x22>
 8004d74:	d902      	bls.n	8004d7c <_free_r+0x74>
 8004d76:	230c      	movs	r3, #12
 8004d78:	602b      	str	r3, [r5, #0]
 8004d7a:	e7d6      	b.n	8004d2a <_free_r+0x22>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	1821      	adds	r1, r4, r0
 8004d80:	428b      	cmp	r3, r1
 8004d82:	bf04      	itt	eq
 8004d84:	6819      	ldreq	r1, [r3, #0]
 8004d86:	685b      	ldreq	r3, [r3, #4]
 8004d88:	6063      	str	r3, [r4, #4]
 8004d8a:	bf04      	itt	eq
 8004d8c:	1809      	addeq	r1, r1, r0
 8004d8e:	6021      	streq	r1, [r4, #0]
 8004d90:	6054      	str	r4, [r2, #4]
 8004d92:	e7ca      	b.n	8004d2a <_free_r+0x22>
 8004d94:	bd38      	pop	{r3, r4, r5, pc}
 8004d96:	bf00      	nop
 8004d98:	20000400 	.word	0x20000400

08004d9c <malloc>:
 8004d9c:	4b02      	ldr	r3, [pc, #8]	@ (8004da8 <malloc+0xc>)
 8004d9e:	4601      	mov	r1, r0
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	f000 b825 	b.w	8004df0 <_malloc_r>
 8004da6:	bf00      	nop
 8004da8:	20000018 	.word	0x20000018

08004dac <sbrk_aligned>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4e0f      	ldr	r6, [pc, #60]	@ (8004dec <sbrk_aligned+0x40>)
 8004db0:	460c      	mov	r4, r1
 8004db2:	6831      	ldr	r1, [r6, #0]
 8004db4:	4605      	mov	r5, r0
 8004db6:	b911      	cbnz	r1, 8004dbe <sbrk_aligned+0x12>
 8004db8:	f000 fece 	bl	8005b58 <_sbrk_r>
 8004dbc:	6030      	str	r0, [r6, #0]
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f000 fec9 	bl	8005b58 <_sbrk_r>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d103      	bne.n	8004dd2 <sbrk_aligned+0x26>
 8004dca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004dce:	4620      	mov	r0, r4
 8004dd0:	bd70      	pop	{r4, r5, r6, pc}
 8004dd2:	1cc4      	adds	r4, r0, #3
 8004dd4:	f024 0403 	bic.w	r4, r4, #3
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d0f8      	beq.n	8004dce <sbrk_aligned+0x22>
 8004ddc:	1a21      	subs	r1, r4, r0
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 feba 	bl	8005b58 <_sbrk_r>
 8004de4:	3001      	adds	r0, #1
 8004de6:	d1f2      	bne.n	8004dce <sbrk_aligned+0x22>
 8004de8:	e7ef      	b.n	8004dca <sbrk_aligned+0x1e>
 8004dea:	bf00      	nop
 8004dec:	200003fc 	.word	0x200003fc

08004df0 <_malloc_r>:
 8004df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df4:	1ccd      	adds	r5, r1, #3
 8004df6:	f025 0503 	bic.w	r5, r5, #3
 8004dfa:	3508      	adds	r5, #8
 8004dfc:	2d0c      	cmp	r5, #12
 8004dfe:	bf38      	it	cc
 8004e00:	250c      	movcc	r5, #12
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	4606      	mov	r6, r0
 8004e06:	db01      	blt.n	8004e0c <_malloc_r+0x1c>
 8004e08:	42a9      	cmp	r1, r5
 8004e0a:	d904      	bls.n	8004e16 <_malloc_r+0x26>
 8004e0c:	230c      	movs	r3, #12
 8004e0e:	6033      	str	r3, [r6, #0]
 8004e10:	2000      	movs	r0, #0
 8004e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004eec <_malloc_r+0xfc>
 8004e1a:	f000 f869 	bl	8004ef0 <__malloc_lock>
 8004e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e22:	461c      	mov	r4, r3
 8004e24:	bb44      	cbnz	r4, 8004e78 <_malloc_r+0x88>
 8004e26:	4629      	mov	r1, r5
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f7ff ffbf 	bl	8004dac <sbrk_aligned>
 8004e2e:	1c43      	adds	r3, r0, #1
 8004e30:	4604      	mov	r4, r0
 8004e32:	d158      	bne.n	8004ee6 <_malloc_r+0xf6>
 8004e34:	f8d8 4000 	ldr.w	r4, [r8]
 8004e38:	4627      	mov	r7, r4
 8004e3a:	2f00      	cmp	r7, #0
 8004e3c:	d143      	bne.n	8004ec6 <_malloc_r+0xd6>
 8004e3e:	2c00      	cmp	r4, #0
 8004e40:	d04b      	beq.n	8004eda <_malloc_r+0xea>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	4639      	mov	r1, r7
 8004e46:	4630      	mov	r0, r6
 8004e48:	eb04 0903 	add.w	r9, r4, r3
 8004e4c:	f000 fe84 	bl	8005b58 <_sbrk_r>
 8004e50:	4581      	cmp	r9, r0
 8004e52:	d142      	bne.n	8004eda <_malloc_r+0xea>
 8004e54:	6821      	ldr	r1, [r4, #0]
 8004e56:	1a6d      	subs	r5, r5, r1
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7ff ffa6 	bl	8004dac <sbrk_aligned>
 8004e60:	3001      	adds	r0, #1
 8004e62:	d03a      	beq.n	8004eda <_malloc_r+0xea>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	442b      	add	r3, r5
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	bb62      	cbnz	r2, 8004ecc <_malloc_r+0xdc>
 8004e72:	f8c8 7000 	str.w	r7, [r8]
 8004e76:	e00f      	b.n	8004e98 <_malloc_r+0xa8>
 8004e78:	6822      	ldr	r2, [r4, #0]
 8004e7a:	1b52      	subs	r2, r2, r5
 8004e7c:	d420      	bmi.n	8004ec0 <_malloc_r+0xd0>
 8004e7e:	2a0b      	cmp	r2, #11
 8004e80:	d917      	bls.n	8004eb2 <_malloc_r+0xc2>
 8004e82:	1961      	adds	r1, r4, r5
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	6025      	str	r5, [r4, #0]
 8004e88:	bf18      	it	ne
 8004e8a:	6059      	strne	r1, [r3, #4]
 8004e8c:	6863      	ldr	r3, [r4, #4]
 8004e8e:	bf08      	it	eq
 8004e90:	f8c8 1000 	streq.w	r1, [r8]
 8004e94:	5162      	str	r2, [r4, r5]
 8004e96:	604b      	str	r3, [r1, #4]
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f82f 	bl	8004efc <__malloc_unlock>
 8004e9e:	f104 000b 	add.w	r0, r4, #11
 8004ea2:	1d23      	adds	r3, r4, #4
 8004ea4:	f020 0007 	bic.w	r0, r0, #7
 8004ea8:	1ac2      	subs	r2, r0, r3
 8004eaa:	bf1c      	itt	ne
 8004eac:	1a1b      	subne	r3, r3, r0
 8004eae:	50a3      	strne	r3, [r4, r2]
 8004eb0:	e7af      	b.n	8004e12 <_malloc_r+0x22>
 8004eb2:	6862      	ldr	r2, [r4, #4]
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	bf0c      	ite	eq
 8004eb8:	f8c8 2000 	streq.w	r2, [r8]
 8004ebc:	605a      	strne	r2, [r3, #4]
 8004ebe:	e7eb      	b.n	8004e98 <_malloc_r+0xa8>
 8004ec0:	4623      	mov	r3, r4
 8004ec2:	6864      	ldr	r4, [r4, #4]
 8004ec4:	e7ae      	b.n	8004e24 <_malloc_r+0x34>
 8004ec6:	463c      	mov	r4, r7
 8004ec8:	687f      	ldr	r7, [r7, #4]
 8004eca:	e7b6      	b.n	8004e3a <_malloc_r+0x4a>
 8004ecc:	461a      	mov	r2, r3
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d1fb      	bne.n	8004ecc <_malloc_r+0xdc>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6053      	str	r3, [r2, #4]
 8004ed8:	e7de      	b.n	8004e98 <_malloc_r+0xa8>
 8004eda:	230c      	movs	r3, #12
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f000 f80c 	bl	8004efc <__malloc_unlock>
 8004ee4:	e794      	b.n	8004e10 <_malloc_r+0x20>
 8004ee6:	6005      	str	r5, [r0, #0]
 8004ee8:	e7d6      	b.n	8004e98 <_malloc_r+0xa8>
 8004eea:	bf00      	nop
 8004eec:	20000400 	.word	0x20000400

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	@ (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f7ff b8ba 	b.w	800406a <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	200003f8 	.word	0x200003f8

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	@ (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f7ff b8b5 	b.w	800406c <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	200003f8 	.word	0x200003f8

08004f08 <_Balloc>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	69c6      	ldr	r6, [r0, #28]
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	460d      	mov	r5, r1
 8004f10:	b976      	cbnz	r6, 8004f30 <_Balloc+0x28>
 8004f12:	2010      	movs	r0, #16
 8004f14:	f7ff ff42 	bl	8004d9c <malloc>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	61e0      	str	r0, [r4, #28]
 8004f1c:	b920      	cbnz	r0, 8004f28 <_Balloc+0x20>
 8004f1e:	4b18      	ldr	r3, [pc, #96]	@ (8004f80 <_Balloc+0x78>)
 8004f20:	4818      	ldr	r0, [pc, #96]	@ (8004f84 <_Balloc+0x7c>)
 8004f22:	216b      	movs	r1, #107	@ 0x6b
 8004f24:	f000 fe36 	bl	8005b94 <__assert_func>
 8004f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f2c:	6006      	str	r6, [r0, #0]
 8004f2e:	60c6      	str	r6, [r0, #12]
 8004f30:	69e6      	ldr	r6, [r4, #28]
 8004f32:	68f3      	ldr	r3, [r6, #12]
 8004f34:	b183      	cbz	r3, 8004f58 <_Balloc+0x50>
 8004f36:	69e3      	ldr	r3, [r4, #28]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f3e:	b9b8      	cbnz	r0, 8004f70 <_Balloc+0x68>
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f605 	lsl.w	r6, r1, r5
 8004f46:	1d72      	adds	r2, r6, #5
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 fe40 	bl	8005bd0 <_calloc_r>
 8004f50:	b160      	cbz	r0, 8004f6c <_Balloc+0x64>
 8004f52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f56:	e00e      	b.n	8004f76 <_Balloc+0x6e>
 8004f58:	2221      	movs	r2, #33	@ 0x21
 8004f5a:	2104      	movs	r1, #4
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f000 fe37 	bl	8005bd0 <_calloc_r>
 8004f62:	69e3      	ldr	r3, [r4, #28]
 8004f64:	60f0      	str	r0, [r6, #12]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e4      	bne.n	8004f36 <_Balloc+0x2e>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	6802      	ldr	r2, [r0, #0]
 8004f72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f76:	2300      	movs	r3, #0
 8004f78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f7c:	e7f7      	b.n	8004f6e <_Balloc+0x66>
 8004f7e:	bf00      	nop
 8004f80:	08005e0d 	.word	0x08005e0d
 8004f84:	08005e8d 	.word	0x08005e8d

08004f88 <_Bfree>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	69c6      	ldr	r6, [r0, #28]
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	b976      	cbnz	r6, 8004fb0 <_Bfree+0x28>
 8004f92:	2010      	movs	r0, #16
 8004f94:	f7ff ff02 	bl	8004d9c <malloc>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	61e8      	str	r0, [r5, #28]
 8004f9c:	b920      	cbnz	r0, 8004fa8 <_Bfree+0x20>
 8004f9e:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <_Bfree+0x3c>)
 8004fa0:	4809      	ldr	r0, [pc, #36]	@ (8004fc8 <_Bfree+0x40>)
 8004fa2:	218f      	movs	r1, #143	@ 0x8f
 8004fa4:	f000 fdf6 	bl	8005b94 <__assert_func>
 8004fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fac:	6006      	str	r6, [r0, #0]
 8004fae:	60c6      	str	r6, [r0, #12]
 8004fb0:	b13c      	cbz	r4, 8004fc2 <_Bfree+0x3a>
 8004fb2:	69eb      	ldr	r3, [r5, #28]
 8004fb4:	6862      	ldr	r2, [r4, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fbc:	6021      	str	r1, [r4, #0]
 8004fbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	08005e0d 	.word	0x08005e0d
 8004fc8:	08005e8d 	.word	0x08005e8d

08004fcc <__multadd>:
 8004fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	690d      	ldr	r5, [r1, #16]
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	461e      	mov	r6, r3
 8004fd8:	f101 0c14 	add.w	ip, r1, #20
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f8dc 3000 	ldr.w	r3, [ip]
 8004fe2:	b299      	uxth	r1, r3
 8004fe4:	fb02 6101 	mla	r1, r2, r1, r6
 8004fe8:	0c1e      	lsrs	r6, r3, #16
 8004fea:	0c0b      	lsrs	r3, r1, #16
 8004fec:	fb02 3306 	mla	r3, r2, r6, r3
 8004ff0:	b289      	uxth	r1, r1
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ff8:	4285      	cmp	r5, r0
 8004ffa:	f84c 1b04 	str.w	r1, [ip], #4
 8004ffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005002:	dcec      	bgt.n	8004fde <__multadd+0x12>
 8005004:	b30e      	cbz	r6, 800504a <__multadd+0x7e>
 8005006:	68a3      	ldr	r3, [r4, #8]
 8005008:	42ab      	cmp	r3, r5
 800500a:	dc19      	bgt.n	8005040 <__multadd+0x74>
 800500c:	6861      	ldr	r1, [r4, #4]
 800500e:	4638      	mov	r0, r7
 8005010:	3101      	adds	r1, #1
 8005012:	f7ff ff79 	bl	8004f08 <_Balloc>
 8005016:	4680      	mov	r8, r0
 8005018:	b928      	cbnz	r0, 8005026 <__multadd+0x5a>
 800501a:	4602      	mov	r2, r0
 800501c:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <__multadd+0x84>)
 800501e:	480d      	ldr	r0, [pc, #52]	@ (8005054 <__multadd+0x88>)
 8005020:	21ba      	movs	r1, #186	@ 0xba
 8005022:	f000 fdb7 	bl	8005b94 <__assert_func>
 8005026:	6922      	ldr	r2, [r4, #16]
 8005028:	3202      	adds	r2, #2
 800502a:	f104 010c 	add.w	r1, r4, #12
 800502e:	0092      	lsls	r2, r2, #2
 8005030:	300c      	adds	r0, #12
 8005032:	f000 fda1 	bl	8005b78 <memcpy>
 8005036:	4621      	mov	r1, r4
 8005038:	4638      	mov	r0, r7
 800503a:	f7ff ffa5 	bl	8004f88 <_Bfree>
 800503e:	4644      	mov	r4, r8
 8005040:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005044:	3501      	adds	r5, #1
 8005046:	615e      	str	r6, [r3, #20]
 8005048:	6125      	str	r5, [r4, #16]
 800504a:	4620      	mov	r0, r4
 800504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005050:	08005e7c 	.word	0x08005e7c
 8005054:	08005e8d 	.word	0x08005e8d

08005058 <__hi0bits>:
 8005058:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800505c:	4603      	mov	r3, r0
 800505e:	bf36      	itet	cc
 8005060:	0403      	lslcc	r3, r0, #16
 8005062:	2000      	movcs	r0, #0
 8005064:	2010      	movcc	r0, #16
 8005066:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800506a:	bf3c      	itt	cc
 800506c:	021b      	lslcc	r3, r3, #8
 800506e:	3008      	addcc	r0, #8
 8005070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005074:	bf3c      	itt	cc
 8005076:	011b      	lslcc	r3, r3, #4
 8005078:	3004      	addcc	r0, #4
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507e:	bf3c      	itt	cc
 8005080:	009b      	lslcc	r3, r3, #2
 8005082:	3002      	addcc	r0, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	db05      	blt.n	8005094 <__hi0bits+0x3c>
 8005088:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800508c:	f100 0001 	add.w	r0, r0, #1
 8005090:	bf08      	it	eq
 8005092:	2020      	moveq	r0, #32
 8005094:	4770      	bx	lr

08005096 <__lo0bits>:
 8005096:	6803      	ldr	r3, [r0, #0]
 8005098:	4602      	mov	r2, r0
 800509a:	f013 0007 	ands.w	r0, r3, #7
 800509e:	d00b      	beq.n	80050b8 <__lo0bits+0x22>
 80050a0:	07d9      	lsls	r1, r3, #31
 80050a2:	d421      	bmi.n	80050e8 <__lo0bits+0x52>
 80050a4:	0798      	lsls	r0, r3, #30
 80050a6:	bf49      	itett	mi
 80050a8:	085b      	lsrmi	r3, r3, #1
 80050aa:	089b      	lsrpl	r3, r3, #2
 80050ac:	2001      	movmi	r0, #1
 80050ae:	6013      	strmi	r3, [r2, #0]
 80050b0:	bf5c      	itt	pl
 80050b2:	6013      	strpl	r3, [r2, #0]
 80050b4:	2002      	movpl	r0, #2
 80050b6:	4770      	bx	lr
 80050b8:	b299      	uxth	r1, r3
 80050ba:	b909      	cbnz	r1, 80050c0 <__lo0bits+0x2a>
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	2010      	movs	r0, #16
 80050c0:	b2d9      	uxtb	r1, r3
 80050c2:	b909      	cbnz	r1, 80050c8 <__lo0bits+0x32>
 80050c4:	3008      	adds	r0, #8
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	0719      	lsls	r1, r3, #28
 80050ca:	bf04      	itt	eq
 80050cc:	091b      	lsreq	r3, r3, #4
 80050ce:	3004      	addeq	r0, #4
 80050d0:	0799      	lsls	r1, r3, #30
 80050d2:	bf04      	itt	eq
 80050d4:	089b      	lsreq	r3, r3, #2
 80050d6:	3002      	addeq	r0, #2
 80050d8:	07d9      	lsls	r1, r3, #31
 80050da:	d403      	bmi.n	80050e4 <__lo0bits+0x4e>
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	f100 0001 	add.w	r0, r0, #1
 80050e2:	d003      	beq.n	80050ec <__lo0bits+0x56>
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4770      	bx	lr
 80050e8:	2000      	movs	r0, #0
 80050ea:	4770      	bx	lr
 80050ec:	2020      	movs	r0, #32
 80050ee:	4770      	bx	lr

080050f0 <__i2b>:
 80050f0:	b510      	push	{r4, lr}
 80050f2:	460c      	mov	r4, r1
 80050f4:	2101      	movs	r1, #1
 80050f6:	f7ff ff07 	bl	8004f08 <_Balloc>
 80050fa:	4602      	mov	r2, r0
 80050fc:	b928      	cbnz	r0, 800510a <__i2b+0x1a>
 80050fe:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <__i2b+0x24>)
 8005100:	4805      	ldr	r0, [pc, #20]	@ (8005118 <__i2b+0x28>)
 8005102:	f240 1145 	movw	r1, #325	@ 0x145
 8005106:	f000 fd45 	bl	8005b94 <__assert_func>
 800510a:	2301      	movs	r3, #1
 800510c:	6144      	str	r4, [r0, #20]
 800510e:	6103      	str	r3, [r0, #16]
 8005110:	bd10      	pop	{r4, pc}
 8005112:	bf00      	nop
 8005114:	08005e7c 	.word	0x08005e7c
 8005118:	08005e8d 	.word	0x08005e8d

0800511c <__multiply>:
 800511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	4614      	mov	r4, r2
 8005122:	690a      	ldr	r2, [r1, #16]
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	bfa8      	it	ge
 800512a:	4623      	movge	r3, r4
 800512c:	460f      	mov	r7, r1
 800512e:	bfa4      	itt	ge
 8005130:	460c      	movge	r4, r1
 8005132:	461f      	movge	r7, r3
 8005134:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005138:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800513c:	68a3      	ldr	r3, [r4, #8]
 800513e:	6861      	ldr	r1, [r4, #4]
 8005140:	eb0a 0609 	add.w	r6, sl, r9
 8005144:	42b3      	cmp	r3, r6
 8005146:	b085      	sub	sp, #20
 8005148:	bfb8      	it	lt
 800514a:	3101      	addlt	r1, #1
 800514c:	f7ff fedc 	bl	8004f08 <_Balloc>
 8005150:	b930      	cbnz	r0, 8005160 <__multiply+0x44>
 8005152:	4602      	mov	r2, r0
 8005154:	4b44      	ldr	r3, [pc, #272]	@ (8005268 <__multiply+0x14c>)
 8005156:	4845      	ldr	r0, [pc, #276]	@ (800526c <__multiply+0x150>)
 8005158:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800515c:	f000 fd1a 	bl	8005b94 <__assert_func>
 8005160:	f100 0514 	add.w	r5, r0, #20
 8005164:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005168:	462b      	mov	r3, r5
 800516a:	2200      	movs	r2, #0
 800516c:	4543      	cmp	r3, r8
 800516e:	d321      	bcc.n	80051b4 <__multiply+0x98>
 8005170:	f107 0114 	add.w	r1, r7, #20
 8005174:	f104 0214 	add.w	r2, r4, #20
 8005178:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800517c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005180:	9302      	str	r3, [sp, #8]
 8005182:	1b13      	subs	r3, r2, r4
 8005184:	3b15      	subs	r3, #21
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	3304      	adds	r3, #4
 800518c:	f104 0715 	add.w	r7, r4, #21
 8005190:	42ba      	cmp	r2, r7
 8005192:	bf38      	it	cc
 8005194:	2304      	movcc	r3, #4
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	9b02      	ldr	r3, [sp, #8]
 800519a:	9103      	str	r1, [sp, #12]
 800519c:	428b      	cmp	r3, r1
 800519e:	d80c      	bhi.n	80051ba <__multiply+0x9e>
 80051a0:	2e00      	cmp	r6, #0
 80051a2:	dd03      	ble.n	80051ac <__multiply+0x90>
 80051a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d05b      	beq.n	8005264 <__multiply+0x148>
 80051ac:	6106      	str	r6, [r0, #16]
 80051ae:	b005      	add	sp, #20
 80051b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b4:	f843 2b04 	str.w	r2, [r3], #4
 80051b8:	e7d8      	b.n	800516c <__multiply+0x50>
 80051ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80051be:	f1ba 0f00 	cmp.w	sl, #0
 80051c2:	d024      	beq.n	800520e <__multiply+0xf2>
 80051c4:	f104 0e14 	add.w	lr, r4, #20
 80051c8:	46a9      	mov	r9, r5
 80051ca:	f04f 0c00 	mov.w	ip, #0
 80051ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80051d2:	f8d9 3000 	ldr.w	r3, [r9]
 80051d6:	fa1f fb87 	uxth.w	fp, r7
 80051da:	b29b      	uxth	r3, r3
 80051dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80051e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80051e4:	f8d9 7000 	ldr.w	r7, [r9]
 80051e8:	4463      	add	r3, ip
 80051ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80051ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80051f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80051fc:	4572      	cmp	r2, lr
 80051fe:	f849 3b04 	str.w	r3, [r9], #4
 8005202:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005206:	d8e2      	bhi.n	80051ce <__multiply+0xb2>
 8005208:	9b01      	ldr	r3, [sp, #4]
 800520a:	f845 c003 	str.w	ip, [r5, r3]
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005214:	3104      	adds	r1, #4
 8005216:	f1b9 0f00 	cmp.w	r9, #0
 800521a:	d021      	beq.n	8005260 <__multiply+0x144>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	f104 0c14 	add.w	ip, r4, #20
 8005222:	46ae      	mov	lr, r5
 8005224:	f04f 0a00 	mov.w	sl, #0
 8005228:	f8bc b000 	ldrh.w	fp, [ip]
 800522c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005230:	fb09 770b 	mla	r7, r9, fp, r7
 8005234:	4457      	add	r7, sl
 8005236:	b29b      	uxth	r3, r3
 8005238:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800523c:	f84e 3b04 	str.w	r3, [lr], #4
 8005240:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005248:	f8be 3000 	ldrh.w	r3, [lr]
 800524c:	fb09 330a 	mla	r3, r9, sl, r3
 8005250:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005254:	4562      	cmp	r2, ip
 8005256:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800525a:	d8e5      	bhi.n	8005228 <__multiply+0x10c>
 800525c:	9f01      	ldr	r7, [sp, #4]
 800525e:	51eb      	str	r3, [r5, r7]
 8005260:	3504      	adds	r5, #4
 8005262:	e799      	b.n	8005198 <__multiply+0x7c>
 8005264:	3e01      	subs	r6, #1
 8005266:	e79b      	b.n	80051a0 <__multiply+0x84>
 8005268:	08005e7c 	.word	0x08005e7c
 800526c:	08005e8d 	.word	0x08005e8d

08005270 <__pow5mult>:
 8005270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005274:	4615      	mov	r5, r2
 8005276:	f012 0203 	ands.w	r2, r2, #3
 800527a:	4607      	mov	r7, r0
 800527c:	460e      	mov	r6, r1
 800527e:	d007      	beq.n	8005290 <__pow5mult+0x20>
 8005280:	4c25      	ldr	r4, [pc, #148]	@ (8005318 <__pow5mult+0xa8>)
 8005282:	3a01      	subs	r2, #1
 8005284:	2300      	movs	r3, #0
 8005286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800528a:	f7ff fe9f 	bl	8004fcc <__multadd>
 800528e:	4606      	mov	r6, r0
 8005290:	10ad      	asrs	r5, r5, #2
 8005292:	d03d      	beq.n	8005310 <__pow5mult+0xa0>
 8005294:	69fc      	ldr	r4, [r7, #28]
 8005296:	b97c      	cbnz	r4, 80052b8 <__pow5mult+0x48>
 8005298:	2010      	movs	r0, #16
 800529a:	f7ff fd7f 	bl	8004d9c <malloc>
 800529e:	4602      	mov	r2, r0
 80052a0:	61f8      	str	r0, [r7, #28]
 80052a2:	b928      	cbnz	r0, 80052b0 <__pow5mult+0x40>
 80052a4:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <__pow5mult+0xac>)
 80052a6:	481e      	ldr	r0, [pc, #120]	@ (8005320 <__pow5mult+0xb0>)
 80052a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80052ac:	f000 fc72 	bl	8005b94 <__assert_func>
 80052b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052b4:	6004      	str	r4, [r0, #0]
 80052b6:	60c4      	str	r4, [r0, #12]
 80052b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80052bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052c0:	b94c      	cbnz	r4, 80052d6 <__pow5mult+0x66>
 80052c2:	f240 2171 	movw	r1, #625	@ 0x271
 80052c6:	4638      	mov	r0, r7
 80052c8:	f7ff ff12 	bl	80050f0 <__i2b>
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80052d2:	4604      	mov	r4, r0
 80052d4:	6003      	str	r3, [r0, #0]
 80052d6:	f04f 0900 	mov.w	r9, #0
 80052da:	07eb      	lsls	r3, r5, #31
 80052dc:	d50a      	bpl.n	80052f4 <__pow5mult+0x84>
 80052de:	4631      	mov	r1, r6
 80052e0:	4622      	mov	r2, r4
 80052e2:	4638      	mov	r0, r7
 80052e4:	f7ff ff1a 	bl	800511c <__multiply>
 80052e8:	4631      	mov	r1, r6
 80052ea:	4680      	mov	r8, r0
 80052ec:	4638      	mov	r0, r7
 80052ee:	f7ff fe4b 	bl	8004f88 <_Bfree>
 80052f2:	4646      	mov	r6, r8
 80052f4:	106d      	asrs	r5, r5, #1
 80052f6:	d00b      	beq.n	8005310 <__pow5mult+0xa0>
 80052f8:	6820      	ldr	r0, [r4, #0]
 80052fa:	b938      	cbnz	r0, 800530c <__pow5mult+0x9c>
 80052fc:	4622      	mov	r2, r4
 80052fe:	4621      	mov	r1, r4
 8005300:	4638      	mov	r0, r7
 8005302:	f7ff ff0b 	bl	800511c <__multiply>
 8005306:	6020      	str	r0, [r4, #0]
 8005308:	f8c0 9000 	str.w	r9, [r0]
 800530c:	4604      	mov	r4, r0
 800530e:	e7e4      	b.n	80052da <__pow5mult+0x6a>
 8005310:	4630      	mov	r0, r6
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005316:	bf00      	nop
 8005318:	08005ee8 	.word	0x08005ee8
 800531c:	08005e0d 	.word	0x08005e0d
 8005320:	08005e8d 	.word	0x08005e8d

08005324 <__lshift>:
 8005324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	460c      	mov	r4, r1
 800532a:	6849      	ldr	r1, [r1, #4]
 800532c:	6923      	ldr	r3, [r4, #16]
 800532e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005332:	68a3      	ldr	r3, [r4, #8]
 8005334:	4607      	mov	r7, r0
 8005336:	4691      	mov	r9, r2
 8005338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800533c:	f108 0601 	add.w	r6, r8, #1
 8005340:	42b3      	cmp	r3, r6
 8005342:	db0b      	blt.n	800535c <__lshift+0x38>
 8005344:	4638      	mov	r0, r7
 8005346:	f7ff fddf 	bl	8004f08 <_Balloc>
 800534a:	4605      	mov	r5, r0
 800534c:	b948      	cbnz	r0, 8005362 <__lshift+0x3e>
 800534e:	4602      	mov	r2, r0
 8005350:	4b28      	ldr	r3, [pc, #160]	@ (80053f4 <__lshift+0xd0>)
 8005352:	4829      	ldr	r0, [pc, #164]	@ (80053f8 <__lshift+0xd4>)
 8005354:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005358:	f000 fc1c 	bl	8005b94 <__assert_func>
 800535c:	3101      	adds	r1, #1
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	e7ee      	b.n	8005340 <__lshift+0x1c>
 8005362:	2300      	movs	r3, #0
 8005364:	f100 0114 	add.w	r1, r0, #20
 8005368:	f100 0210 	add.w	r2, r0, #16
 800536c:	4618      	mov	r0, r3
 800536e:	4553      	cmp	r3, sl
 8005370:	db33      	blt.n	80053da <__lshift+0xb6>
 8005372:	6920      	ldr	r0, [r4, #16]
 8005374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005378:	f104 0314 	add.w	r3, r4, #20
 800537c:	f019 091f 	ands.w	r9, r9, #31
 8005380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005388:	d02b      	beq.n	80053e2 <__lshift+0xbe>
 800538a:	f1c9 0e20 	rsb	lr, r9, #32
 800538e:	468a      	mov	sl, r1
 8005390:	2200      	movs	r2, #0
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	fa00 f009 	lsl.w	r0, r0, r9
 8005398:	4310      	orrs	r0, r2
 800539a:	f84a 0b04 	str.w	r0, [sl], #4
 800539e:	f853 2b04 	ldr.w	r2, [r3], #4
 80053a2:	459c      	cmp	ip, r3
 80053a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80053a8:	d8f3      	bhi.n	8005392 <__lshift+0x6e>
 80053aa:	ebac 0304 	sub.w	r3, ip, r4
 80053ae:	3b15      	subs	r3, #21
 80053b0:	f023 0303 	bic.w	r3, r3, #3
 80053b4:	3304      	adds	r3, #4
 80053b6:	f104 0015 	add.w	r0, r4, #21
 80053ba:	4584      	cmp	ip, r0
 80053bc:	bf38      	it	cc
 80053be:	2304      	movcc	r3, #4
 80053c0:	50ca      	str	r2, [r1, r3]
 80053c2:	b10a      	cbz	r2, 80053c8 <__lshift+0xa4>
 80053c4:	f108 0602 	add.w	r6, r8, #2
 80053c8:	3e01      	subs	r6, #1
 80053ca:	4638      	mov	r0, r7
 80053cc:	612e      	str	r6, [r5, #16]
 80053ce:	4621      	mov	r1, r4
 80053d0:	f7ff fdda 	bl	8004f88 <_Bfree>
 80053d4:	4628      	mov	r0, r5
 80053d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053da:	f842 0f04 	str.w	r0, [r2, #4]!
 80053de:	3301      	adds	r3, #1
 80053e0:	e7c5      	b.n	800536e <__lshift+0x4a>
 80053e2:	3904      	subs	r1, #4
 80053e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80053ec:	459c      	cmp	ip, r3
 80053ee:	d8f9      	bhi.n	80053e4 <__lshift+0xc0>
 80053f0:	e7ea      	b.n	80053c8 <__lshift+0xa4>
 80053f2:	bf00      	nop
 80053f4:	08005e7c 	.word	0x08005e7c
 80053f8:	08005e8d 	.word	0x08005e8d

080053fc <__mcmp>:
 80053fc:	690a      	ldr	r2, [r1, #16]
 80053fe:	4603      	mov	r3, r0
 8005400:	6900      	ldr	r0, [r0, #16]
 8005402:	1a80      	subs	r0, r0, r2
 8005404:	b530      	push	{r4, r5, lr}
 8005406:	d10e      	bne.n	8005426 <__mcmp+0x2a>
 8005408:	3314      	adds	r3, #20
 800540a:	3114      	adds	r1, #20
 800540c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005410:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005414:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005418:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800541c:	4295      	cmp	r5, r2
 800541e:	d003      	beq.n	8005428 <__mcmp+0x2c>
 8005420:	d205      	bcs.n	800542e <__mcmp+0x32>
 8005422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005426:	bd30      	pop	{r4, r5, pc}
 8005428:	42a3      	cmp	r3, r4
 800542a:	d3f3      	bcc.n	8005414 <__mcmp+0x18>
 800542c:	e7fb      	b.n	8005426 <__mcmp+0x2a>
 800542e:	2001      	movs	r0, #1
 8005430:	e7f9      	b.n	8005426 <__mcmp+0x2a>
	...

08005434 <__mdiff>:
 8005434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005438:	4689      	mov	r9, r1
 800543a:	4606      	mov	r6, r0
 800543c:	4611      	mov	r1, r2
 800543e:	4648      	mov	r0, r9
 8005440:	4614      	mov	r4, r2
 8005442:	f7ff ffdb 	bl	80053fc <__mcmp>
 8005446:	1e05      	subs	r5, r0, #0
 8005448:	d112      	bne.n	8005470 <__mdiff+0x3c>
 800544a:	4629      	mov	r1, r5
 800544c:	4630      	mov	r0, r6
 800544e:	f7ff fd5b 	bl	8004f08 <_Balloc>
 8005452:	4602      	mov	r2, r0
 8005454:	b928      	cbnz	r0, 8005462 <__mdiff+0x2e>
 8005456:	4b3f      	ldr	r3, [pc, #252]	@ (8005554 <__mdiff+0x120>)
 8005458:	f240 2137 	movw	r1, #567	@ 0x237
 800545c:	483e      	ldr	r0, [pc, #248]	@ (8005558 <__mdiff+0x124>)
 800545e:	f000 fb99 	bl	8005b94 <__assert_func>
 8005462:	2301      	movs	r3, #1
 8005464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005468:	4610      	mov	r0, r2
 800546a:	b003      	add	sp, #12
 800546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005470:	bfbc      	itt	lt
 8005472:	464b      	movlt	r3, r9
 8005474:	46a1      	movlt	r9, r4
 8005476:	4630      	mov	r0, r6
 8005478:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800547c:	bfba      	itte	lt
 800547e:	461c      	movlt	r4, r3
 8005480:	2501      	movlt	r5, #1
 8005482:	2500      	movge	r5, #0
 8005484:	f7ff fd40 	bl	8004f08 <_Balloc>
 8005488:	4602      	mov	r2, r0
 800548a:	b918      	cbnz	r0, 8005494 <__mdiff+0x60>
 800548c:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <__mdiff+0x120>)
 800548e:	f240 2145 	movw	r1, #581	@ 0x245
 8005492:	e7e3      	b.n	800545c <__mdiff+0x28>
 8005494:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005498:	6926      	ldr	r6, [r4, #16]
 800549a:	60c5      	str	r5, [r0, #12]
 800549c:	f109 0310 	add.w	r3, r9, #16
 80054a0:	f109 0514 	add.w	r5, r9, #20
 80054a4:	f104 0e14 	add.w	lr, r4, #20
 80054a8:	f100 0b14 	add.w	fp, r0, #20
 80054ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80054b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	46d9      	mov	r9, fp
 80054b8:	f04f 0c00 	mov.w	ip, #0
 80054bc:	9b01      	ldr	r3, [sp, #4]
 80054be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80054c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	fa1f f38a 	uxth.w	r3, sl
 80054cc:	4619      	mov	r1, r3
 80054ce:	b283      	uxth	r3, r0
 80054d0:	1acb      	subs	r3, r1, r3
 80054d2:	0c00      	lsrs	r0, r0, #16
 80054d4:	4463      	add	r3, ip
 80054d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80054da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80054de:	b29b      	uxth	r3, r3
 80054e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80054e4:	4576      	cmp	r6, lr
 80054e6:	f849 3b04 	str.w	r3, [r9], #4
 80054ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80054ee:	d8e5      	bhi.n	80054bc <__mdiff+0x88>
 80054f0:	1b33      	subs	r3, r6, r4
 80054f2:	3b15      	subs	r3, #21
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	3415      	adds	r4, #21
 80054fa:	3304      	adds	r3, #4
 80054fc:	42a6      	cmp	r6, r4
 80054fe:	bf38      	it	cc
 8005500:	2304      	movcc	r3, #4
 8005502:	441d      	add	r5, r3
 8005504:	445b      	add	r3, fp
 8005506:	461e      	mov	r6, r3
 8005508:	462c      	mov	r4, r5
 800550a:	4544      	cmp	r4, r8
 800550c:	d30e      	bcc.n	800552c <__mdiff+0xf8>
 800550e:	f108 0103 	add.w	r1, r8, #3
 8005512:	1b49      	subs	r1, r1, r5
 8005514:	f021 0103 	bic.w	r1, r1, #3
 8005518:	3d03      	subs	r5, #3
 800551a:	45a8      	cmp	r8, r5
 800551c:	bf38      	it	cc
 800551e:	2100      	movcc	r1, #0
 8005520:	440b      	add	r3, r1
 8005522:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005526:	b191      	cbz	r1, 800554e <__mdiff+0x11a>
 8005528:	6117      	str	r7, [r2, #16]
 800552a:	e79d      	b.n	8005468 <__mdiff+0x34>
 800552c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005530:	46e6      	mov	lr, ip
 8005532:	0c08      	lsrs	r0, r1, #16
 8005534:	fa1c fc81 	uxtah	ip, ip, r1
 8005538:	4471      	add	r1, lr
 800553a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800553e:	b289      	uxth	r1, r1
 8005540:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005544:	f846 1b04 	str.w	r1, [r6], #4
 8005548:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800554c:	e7dd      	b.n	800550a <__mdiff+0xd6>
 800554e:	3f01      	subs	r7, #1
 8005550:	e7e7      	b.n	8005522 <__mdiff+0xee>
 8005552:	bf00      	nop
 8005554:	08005e7c 	.word	0x08005e7c
 8005558:	08005e8d 	.word	0x08005e8d

0800555c <__d2b>:
 800555c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005560:	460f      	mov	r7, r1
 8005562:	2101      	movs	r1, #1
 8005564:	ec59 8b10 	vmov	r8, r9, d0
 8005568:	4616      	mov	r6, r2
 800556a:	f7ff fccd 	bl	8004f08 <_Balloc>
 800556e:	4604      	mov	r4, r0
 8005570:	b930      	cbnz	r0, 8005580 <__d2b+0x24>
 8005572:	4602      	mov	r2, r0
 8005574:	4b23      	ldr	r3, [pc, #140]	@ (8005604 <__d2b+0xa8>)
 8005576:	4824      	ldr	r0, [pc, #144]	@ (8005608 <__d2b+0xac>)
 8005578:	f240 310f 	movw	r1, #783	@ 0x30f
 800557c:	f000 fb0a 	bl	8005b94 <__assert_func>
 8005580:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005584:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005588:	b10d      	cbz	r5, 800558e <__d2b+0x32>
 800558a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	f1b8 0300 	subs.w	r3, r8, #0
 8005594:	d023      	beq.n	80055de <__d2b+0x82>
 8005596:	4668      	mov	r0, sp
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	f7ff fd7c 	bl	8005096 <__lo0bits>
 800559e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80055a2:	b1d0      	cbz	r0, 80055da <__d2b+0x7e>
 80055a4:	f1c0 0320 	rsb	r3, r0, #32
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	430b      	orrs	r3, r1
 80055ae:	40c2      	lsrs	r2, r0
 80055b0:	6163      	str	r3, [r4, #20]
 80055b2:	9201      	str	r2, [sp, #4]
 80055b4:	9b01      	ldr	r3, [sp, #4]
 80055b6:	61a3      	str	r3, [r4, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf0c      	ite	eq
 80055bc:	2201      	moveq	r2, #1
 80055be:	2202      	movne	r2, #2
 80055c0:	6122      	str	r2, [r4, #16]
 80055c2:	b1a5      	cbz	r5, 80055ee <__d2b+0x92>
 80055c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80055c8:	4405      	add	r5, r0
 80055ca:	603d      	str	r5, [r7, #0]
 80055cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80055d0:	6030      	str	r0, [r6, #0]
 80055d2:	4620      	mov	r0, r4
 80055d4:	b003      	add	sp, #12
 80055d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055da:	6161      	str	r1, [r4, #20]
 80055dc:	e7ea      	b.n	80055b4 <__d2b+0x58>
 80055de:	a801      	add	r0, sp, #4
 80055e0:	f7ff fd59 	bl	8005096 <__lo0bits>
 80055e4:	9b01      	ldr	r3, [sp, #4]
 80055e6:	6163      	str	r3, [r4, #20]
 80055e8:	3020      	adds	r0, #32
 80055ea:	2201      	movs	r2, #1
 80055ec:	e7e8      	b.n	80055c0 <__d2b+0x64>
 80055ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80055f6:	6038      	str	r0, [r7, #0]
 80055f8:	6918      	ldr	r0, [r3, #16]
 80055fa:	f7ff fd2d 	bl	8005058 <__hi0bits>
 80055fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005602:	e7e5      	b.n	80055d0 <__d2b+0x74>
 8005604:	08005e7c 	.word	0x08005e7c
 8005608:	08005e8d 	.word	0x08005e8d

0800560c <__sfputc_r>:
 800560c:	6893      	ldr	r3, [r2, #8]
 800560e:	3b01      	subs	r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	b410      	push	{r4}
 8005614:	6093      	str	r3, [r2, #8]
 8005616:	da08      	bge.n	800562a <__sfputc_r+0x1e>
 8005618:	6994      	ldr	r4, [r2, #24]
 800561a:	42a3      	cmp	r3, r4
 800561c:	db01      	blt.n	8005622 <__sfputc_r+0x16>
 800561e:	290a      	cmp	r1, #10
 8005620:	d103      	bne.n	800562a <__sfputc_r+0x1e>
 8005622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005626:	f7fe bc0e 	b.w	8003e46 <__swbuf_r>
 800562a:	6813      	ldr	r3, [r2, #0]
 800562c:	1c58      	adds	r0, r3, #1
 800562e:	6010      	str	r0, [r2, #0]
 8005630:	7019      	strb	r1, [r3, #0]
 8005632:	4608      	mov	r0, r1
 8005634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005638:	4770      	bx	lr

0800563a <__sfputs_r>:
 800563a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	4614      	mov	r4, r2
 8005642:	18d5      	adds	r5, r2, r3
 8005644:	42ac      	cmp	r4, r5
 8005646:	d101      	bne.n	800564c <__sfputs_r+0x12>
 8005648:	2000      	movs	r0, #0
 800564a:	e007      	b.n	800565c <__sfputs_r+0x22>
 800564c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005650:	463a      	mov	r2, r7
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff ffda 	bl	800560c <__sfputc_r>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d1f3      	bne.n	8005644 <__sfputs_r+0xa>
 800565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005660 <_vfiprintf_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	460d      	mov	r5, r1
 8005666:	b09d      	sub	sp, #116	@ 0x74
 8005668:	4614      	mov	r4, r2
 800566a:	4698      	mov	r8, r3
 800566c:	4606      	mov	r6, r0
 800566e:	b118      	cbz	r0, 8005678 <_vfiprintf_r+0x18>
 8005670:	6a03      	ldr	r3, [r0, #32]
 8005672:	b90b      	cbnz	r3, 8005678 <_vfiprintf_r+0x18>
 8005674:	f7fe faf6 	bl	8003c64 <__sinit>
 8005678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800567a:	07d9      	lsls	r1, r3, #31
 800567c:	d405      	bmi.n	800568a <_vfiprintf_r+0x2a>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	059a      	lsls	r2, r3, #22
 8005682:	d402      	bmi.n	800568a <_vfiprintf_r+0x2a>
 8005684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005686:	f7fe fcf0 	bl	800406a <__retarget_lock_acquire_recursive>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	071b      	lsls	r3, r3, #28
 800568e:	d501      	bpl.n	8005694 <_vfiprintf_r+0x34>
 8005690:	692b      	ldr	r3, [r5, #16]
 8005692:	b99b      	cbnz	r3, 80056bc <_vfiprintf_r+0x5c>
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f7fe fc14 	bl	8003ec4 <__swsetup_r>
 800569c:	b170      	cbz	r0, 80056bc <_vfiprintf_r+0x5c>
 800569e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056a0:	07dc      	lsls	r4, r3, #31
 80056a2:	d504      	bpl.n	80056ae <_vfiprintf_r+0x4e>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a8:	b01d      	add	sp, #116	@ 0x74
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	0598      	lsls	r0, r3, #22
 80056b2:	d4f7      	bmi.n	80056a4 <_vfiprintf_r+0x44>
 80056b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056b6:	f7fe fcd9 	bl	800406c <__retarget_lock_release_recursive>
 80056ba:	e7f3      	b.n	80056a4 <_vfiprintf_r+0x44>
 80056bc:	2300      	movs	r3, #0
 80056be:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c0:	2320      	movs	r3, #32
 80056c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ca:	2330      	movs	r3, #48	@ 0x30
 80056cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800587c <_vfiprintf_r+0x21c>
 80056d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056d4:	f04f 0901 	mov.w	r9, #1
 80056d8:	4623      	mov	r3, r4
 80056da:	469a      	mov	sl, r3
 80056dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e0:	b10a      	cbz	r2, 80056e6 <_vfiprintf_r+0x86>
 80056e2:	2a25      	cmp	r2, #37	@ 0x25
 80056e4:	d1f9      	bne.n	80056da <_vfiprintf_r+0x7a>
 80056e6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ea:	d00b      	beq.n	8005704 <_vfiprintf_r+0xa4>
 80056ec:	465b      	mov	r3, fp
 80056ee:	4622      	mov	r2, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff ffa1 	bl	800563a <__sfputs_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	f000 80a7 	beq.w	800584c <_vfiprintf_r+0x1ec>
 80056fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005700:	445a      	add	r2, fp
 8005702:	9209      	str	r2, [sp, #36]	@ 0x24
 8005704:	f89a 3000 	ldrb.w	r3, [sl]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 809f 	beq.w	800584c <_vfiprintf_r+0x1ec>
 800570e:	2300      	movs	r3, #0
 8005710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005718:	f10a 0a01 	add.w	sl, sl, #1
 800571c:	9304      	str	r3, [sp, #16]
 800571e:	9307      	str	r3, [sp, #28]
 8005720:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005724:	931a      	str	r3, [sp, #104]	@ 0x68
 8005726:	4654      	mov	r4, sl
 8005728:	2205      	movs	r2, #5
 800572a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800572e:	4853      	ldr	r0, [pc, #332]	@ (800587c <_vfiprintf_r+0x21c>)
 8005730:	f7fa fd4e 	bl	80001d0 <memchr>
 8005734:	9a04      	ldr	r2, [sp, #16]
 8005736:	b9d8      	cbnz	r0, 8005770 <_vfiprintf_r+0x110>
 8005738:	06d1      	lsls	r1, r2, #27
 800573a:	bf44      	itt	mi
 800573c:	2320      	movmi	r3, #32
 800573e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005742:	0713      	lsls	r3, r2, #28
 8005744:	bf44      	itt	mi
 8005746:	232b      	movmi	r3, #43	@ 0x2b
 8005748:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800574c:	f89a 3000 	ldrb.w	r3, [sl]
 8005750:	2b2a      	cmp	r3, #42	@ 0x2a
 8005752:	d015      	beq.n	8005780 <_vfiprintf_r+0x120>
 8005754:	9a07      	ldr	r2, [sp, #28]
 8005756:	4654      	mov	r4, sl
 8005758:	2000      	movs	r0, #0
 800575a:	f04f 0c0a 	mov.w	ip, #10
 800575e:	4621      	mov	r1, r4
 8005760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005764:	3b30      	subs	r3, #48	@ 0x30
 8005766:	2b09      	cmp	r3, #9
 8005768:	d94b      	bls.n	8005802 <_vfiprintf_r+0x1a2>
 800576a:	b1b0      	cbz	r0, 800579a <_vfiprintf_r+0x13a>
 800576c:	9207      	str	r2, [sp, #28]
 800576e:	e014      	b.n	800579a <_vfiprintf_r+0x13a>
 8005770:	eba0 0308 	sub.w	r3, r0, r8
 8005774:	fa09 f303 	lsl.w	r3, r9, r3
 8005778:	4313      	orrs	r3, r2
 800577a:	9304      	str	r3, [sp, #16]
 800577c:	46a2      	mov	sl, r4
 800577e:	e7d2      	b.n	8005726 <_vfiprintf_r+0xc6>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	1d19      	adds	r1, r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	9103      	str	r1, [sp, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfbb      	ittet	lt
 800578c:	425b      	neglt	r3, r3
 800578e:	f042 0202 	orrlt.w	r2, r2, #2
 8005792:	9307      	strge	r3, [sp, #28]
 8005794:	9307      	strlt	r3, [sp, #28]
 8005796:	bfb8      	it	lt
 8005798:	9204      	strlt	r2, [sp, #16]
 800579a:	7823      	ldrb	r3, [r4, #0]
 800579c:	2b2e      	cmp	r3, #46	@ 0x2e
 800579e:	d10a      	bne.n	80057b6 <_vfiprintf_r+0x156>
 80057a0:	7863      	ldrb	r3, [r4, #1]
 80057a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80057a4:	d132      	bne.n	800580c <_vfiprintf_r+0x1ac>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	9203      	str	r2, [sp, #12]
 80057ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057b2:	3402      	adds	r4, #2
 80057b4:	9305      	str	r3, [sp, #20]
 80057b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800588c <_vfiprintf_r+0x22c>
 80057ba:	7821      	ldrb	r1, [r4, #0]
 80057bc:	2203      	movs	r2, #3
 80057be:	4650      	mov	r0, sl
 80057c0:	f7fa fd06 	bl	80001d0 <memchr>
 80057c4:	b138      	cbz	r0, 80057d6 <_vfiprintf_r+0x176>
 80057c6:	9b04      	ldr	r3, [sp, #16]
 80057c8:	eba0 000a 	sub.w	r0, r0, sl
 80057cc:	2240      	movs	r2, #64	@ 0x40
 80057ce:	4082      	lsls	r2, r0
 80057d0:	4313      	orrs	r3, r2
 80057d2:	3401      	adds	r4, #1
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057da:	4829      	ldr	r0, [pc, #164]	@ (8005880 <_vfiprintf_r+0x220>)
 80057dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057e0:	2206      	movs	r2, #6
 80057e2:	f7fa fcf5 	bl	80001d0 <memchr>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d03f      	beq.n	800586a <_vfiprintf_r+0x20a>
 80057ea:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <_vfiprintf_r+0x224>)
 80057ec:	bb1b      	cbnz	r3, 8005836 <_vfiprintf_r+0x1d6>
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	3307      	adds	r3, #7
 80057f2:	f023 0307 	bic.w	r3, r3, #7
 80057f6:	3308      	adds	r3, #8
 80057f8:	9303      	str	r3, [sp, #12]
 80057fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fc:	443b      	add	r3, r7
 80057fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005800:	e76a      	b.n	80056d8 <_vfiprintf_r+0x78>
 8005802:	fb0c 3202 	mla	r2, ip, r2, r3
 8005806:	460c      	mov	r4, r1
 8005808:	2001      	movs	r0, #1
 800580a:	e7a8      	b.n	800575e <_vfiprintf_r+0xfe>
 800580c:	2300      	movs	r3, #0
 800580e:	3401      	adds	r4, #1
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	4619      	mov	r1, r3
 8005814:	f04f 0c0a 	mov.w	ip, #10
 8005818:	4620      	mov	r0, r4
 800581a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800581e:	3a30      	subs	r2, #48	@ 0x30
 8005820:	2a09      	cmp	r2, #9
 8005822:	d903      	bls.n	800582c <_vfiprintf_r+0x1cc>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0c6      	beq.n	80057b6 <_vfiprintf_r+0x156>
 8005828:	9105      	str	r1, [sp, #20]
 800582a:	e7c4      	b.n	80057b6 <_vfiprintf_r+0x156>
 800582c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005830:	4604      	mov	r4, r0
 8005832:	2301      	movs	r3, #1
 8005834:	e7f0      	b.n	8005818 <_vfiprintf_r+0x1b8>
 8005836:	ab03      	add	r3, sp, #12
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	462a      	mov	r2, r5
 800583c:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <_vfiprintf_r+0x228>)
 800583e:	a904      	add	r1, sp, #16
 8005840:	4630      	mov	r0, r6
 8005842:	f7fd fdcb 	bl	80033dc <_printf_float>
 8005846:	4607      	mov	r7, r0
 8005848:	1c78      	adds	r0, r7, #1
 800584a:	d1d6      	bne.n	80057fa <_vfiprintf_r+0x19a>
 800584c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800584e:	07d9      	lsls	r1, r3, #31
 8005850:	d405      	bmi.n	800585e <_vfiprintf_r+0x1fe>
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	059a      	lsls	r2, r3, #22
 8005856:	d402      	bmi.n	800585e <_vfiprintf_r+0x1fe>
 8005858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800585a:	f7fe fc07 	bl	800406c <__retarget_lock_release_recursive>
 800585e:	89ab      	ldrh	r3, [r5, #12]
 8005860:	065b      	lsls	r3, r3, #25
 8005862:	f53f af1f 	bmi.w	80056a4 <_vfiprintf_r+0x44>
 8005866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005868:	e71e      	b.n	80056a8 <_vfiprintf_r+0x48>
 800586a:	ab03      	add	r3, sp, #12
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	462a      	mov	r2, r5
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <_vfiprintf_r+0x228>)
 8005872:	a904      	add	r1, sp, #16
 8005874:	4630      	mov	r0, r6
 8005876:	f7fe f849 	bl	800390c <_printf_i>
 800587a:	e7e4      	b.n	8005846 <_vfiprintf_r+0x1e6>
 800587c:	08005fe8 	.word	0x08005fe8
 8005880:	08005ff2 	.word	0x08005ff2
 8005884:	080033dd 	.word	0x080033dd
 8005888:	0800563b 	.word	0x0800563b
 800588c:	08005fee 	.word	0x08005fee

08005890 <__sflush_r>:
 8005890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005898:	0716      	lsls	r6, r2, #28
 800589a:	4605      	mov	r5, r0
 800589c:	460c      	mov	r4, r1
 800589e:	d454      	bmi.n	800594a <__sflush_r+0xba>
 80058a0:	684b      	ldr	r3, [r1, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	dc02      	bgt.n	80058ac <__sflush_r+0x1c>
 80058a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dd48      	ble.n	800593e <__sflush_r+0xae>
 80058ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	d045      	beq.n	800593e <__sflush_r+0xae>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80058b8:	682f      	ldr	r7, [r5, #0]
 80058ba:	6a21      	ldr	r1, [r4, #32]
 80058bc:	602b      	str	r3, [r5, #0]
 80058be:	d030      	beq.n	8005922 <__sflush_r+0x92>
 80058c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	0759      	lsls	r1, r3, #29
 80058c6:	d505      	bpl.n	80058d4 <__sflush_r+0x44>
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058ce:	b10b      	cbz	r3, 80058d4 <__sflush_r+0x44>
 80058d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058d2:	1ad2      	subs	r2, r2, r3
 80058d4:	2300      	movs	r3, #0
 80058d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058d8:	6a21      	ldr	r1, [r4, #32]
 80058da:	4628      	mov	r0, r5
 80058dc:	47b0      	blx	r6
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	d106      	bne.n	80058f2 <__sflush_r+0x62>
 80058e4:	6829      	ldr	r1, [r5, #0]
 80058e6:	291d      	cmp	r1, #29
 80058e8:	d82b      	bhi.n	8005942 <__sflush_r+0xb2>
 80058ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005994 <__sflush_r+0x104>)
 80058ec:	410a      	asrs	r2, r1
 80058ee:	07d6      	lsls	r6, r2, #31
 80058f0:	d427      	bmi.n	8005942 <__sflush_r+0xb2>
 80058f2:	2200      	movs	r2, #0
 80058f4:	6062      	str	r2, [r4, #4]
 80058f6:	04d9      	lsls	r1, r3, #19
 80058f8:	6922      	ldr	r2, [r4, #16]
 80058fa:	6022      	str	r2, [r4, #0]
 80058fc:	d504      	bpl.n	8005908 <__sflush_r+0x78>
 80058fe:	1c42      	adds	r2, r0, #1
 8005900:	d101      	bne.n	8005906 <__sflush_r+0x76>
 8005902:	682b      	ldr	r3, [r5, #0]
 8005904:	b903      	cbnz	r3, 8005908 <__sflush_r+0x78>
 8005906:	6560      	str	r0, [r4, #84]	@ 0x54
 8005908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800590a:	602f      	str	r7, [r5, #0]
 800590c:	b1b9      	cbz	r1, 800593e <__sflush_r+0xae>
 800590e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005912:	4299      	cmp	r1, r3
 8005914:	d002      	beq.n	800591c <__sflush_r+0x8c>
 8005916:	4628      	mov	r0, r5
 8005918:	f7ff f9f6 	bl	8004d08 <_free_r>
 800591c:	2300      	movs	r3, #0
 800591e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005920:	e00d      	b.n	800593e <__sflush_r+0xae>
 8005922:	2301      	movs	r3, #1
 8005924:	4628      	mov	r0, r5
 8005926:	47b0      	blx	r6
 8005928:	4602      	mov	r2, r0
 800592a:	1c50      	adds	r0, r2, #1
 800592c:	d1c9      	bne.n	80058c2 <__sflush_r+0x32>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0c6      	beq.n	80058c2 <__sflush_r+0x32>
 8005934:	2b1d      	cmp	r3, #29
 8005936:	d001      	beq.n	800593c <__sflush_r+0xac>
 8005938:	2b16      	cmp	r3, #22
 800593a:	d11e      	bne.n	800597a <__sflush_r+0xea>
 800593c:	602f      	str	r7, [r5, #0]
 800593e:	2000      	movs	r0, #0
 8005940:	e022      	b.n	8005988 <__sflush_r+0xf8>
 8005942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005946:	b21b      	sxth	r3, r3
 8005948:	e01b      	b.n	8005982 <__sflush_r+0xf2>
 800594a:	690f      	ldr	r7, [r1, #16]
 800594c:	2f00      	cmp	r7, #0
 800594e:	d0f6      	beq.n	800593e <__sflush_r+0xae>
 8005950:	0793      	lsls	r3, r2, #30
 8005952:	680e      	ldr	r6, [r1, #0]
 8005954:	bf08      	it	eq
 8005956:	694b      	ldreq	r3, [r1, #20]
 8005958:	600f      	str	r7, [r1, #0]
 800595a:	bf18      	it	ne
 800595c:	2300      	movne	r3, #0
 800595e:	eba6 0807 	sub.w	r8, r6, r7
 8005962:	608b      	str	r3, [r1, #8]
 8005964:	f1b8 0f00 	cmp.w	r8, #0
 8005968:	dde9      	ble.n	800593e <__sflush_r+0xae>
 800596a:	6a21      	ldr	r1, [r4, #32]
 800596c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800596e:	4643      	mov	r3, r8
 8005970:	463a      	mov	r2, r7
 8005972:	4628      	mov	r0, r5
 8005974:	47b0      	blx	r6
 8005976:	2800      	cmp	r0, #0
 8005978:	dc08      	bgt.n	800598c <__sflush_r+0xfc>
 800597a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005982:	81a3      	strh	r3, [r4, #12]
 8005984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598c:	4407      	add	r7, r0
 800598e:	eba8 0800 	sub.w	r8, r8, r0
 8005992:	e7e7      	b.n	8005964 <__sflush_r+0xd4>
 8005994:	dfbffffe 	.word	0xdfbffffe

08005998 <_fflush_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	690b      	ldr	r3, [r1, #16]
 800599c:	4605      	mov	r5, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	b913      	cbnz	r3, 80059a8 <_fflush_r+0x10>
 80059a2:	2500      	movs	r5, #0
 80059a4:	4628      	mov	r0, r5
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	b118      	cbz	r0, 80059b2 <_fflush_r+0x1a>
 80059aa:	6a03      	ldr	r3, [r0, #32]
 80059ac:	b90b      	cbnz	r3, 80059b2 <_fflush_r+0x1a>
 80059ae:	f7fe f959 	bl	8003c64 <__sinit>
 80059b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f3      	beq.n	80059a2 <_fflush_r+0xa>
 80059ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059bc:	07d0      	lsls	r0, r2, #31
 80059be:	d404      	bmi.n	80059ca <_fflush_r+0x32>
 80059c0:	0599      	lsls	r1, r3, #22
 80059c2:	d402      	bmi.n	80059ca <_fflush_r+0x32>
 80059c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059c6:	f7fe fb50 	bl	800406a <__retarget_lock_acquire_recursive>
 80059ca:	4628      	mov	r0, r5
 80059cc:	4621      	mov	r1, r4
 80059ce:	f7ff ff5f 	bl	8005890 <__sflush_r>
 80059d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059d4:	07da      	lsls	r2, r3, #31
 80059d6:	4605      	mov	r5, r0
 80059d8:	d4e4      	bmi.n	80059a4 <_fflush_r+0xc>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	059b      	lsls	r3, r3, #22
 80059de:	d4e1      	bmi.n	80059a4 <_fflush_r+0xc>
 80059e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059e2:	f7fe fb43 	bl	800406c <__retarget_lock_release_recursive>
 80059e6:	e7dd      	b.n	80059a4 <_fflush_r+0xc>

080059e8 <__swhatbuf_r>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	460c      	mov	r4, r1
 80059ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f0:	2900      	cmp	r1, #0
 80059f2:	b096      	sub	sp, #88	@ 0x58
 80059f4:	4615      	mov	r5, r2
 80059f6:	461e      	mov	r6, r3
 80059f8:	da0d      	bge.n	8005a16 <__swhatbuf_r+0x2e>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a00:	f04f 0100 	mov.w	r1, #0
 8005a04:	bf14      	ite	ne
 8005a06:	2340      	movne	r3, #64	@ 0x40
 8005a08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	6031      	str	r1, [r6, #0]
 8005a10:	602b      	str	r3, [r5, #0]
 8005a12:	b016      	add	sp, #88	@ 0x58
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
 8005a16:	466a      	mov	r2, sp
 8005a18:	f000 f87c 	bl	8005b14 <_fstat_r>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	dbec      	blt.n	80059fa <__swhatbuf_r+0x12>
 8005a20:	9901      	ldr	r1, [sp, #4]
 8005a22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a2a:	4259      	negs	r1, r3
 8005a2c:	4159      	adcs	r1, r3
 8005a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a32:	e7eb      	b.n	8005a0c <__swhatbuf_r+0x24>

08005a34 <__smakebuf_r>:
 8005a34:	898b      	ldrh	r3, [r1, #12]
 8005a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a38:	079d      	lsls	r5, r3, #30
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	d507      	bpl.n	8005a50 <__smakebuf_r+0x1c>
 8005a40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	6163      	str	r3, [r4, #20]
 8005a4c:	b003      	add	sp, #12
 8005a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a50:	ab01      	add	r3, sp, #4
 8005a52:	466a      	mov	r2, sp
 8005a54:	f7ff ffc8 	bl	80059e8 <__swhatbuf_r>
 8005a58:	9f00      	ldr	r7, [sp, #0]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	4639      	mov	r1, r7
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f7ff f9c6 	bl	8004df0 <_malloc_r>
 8005a64:	b948      	cbnz	r0, 8005a7a <__smakebuf_r+0x46>
 8005a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a6a:	059a      	lsls	r2, r3, #22
 8005a6c:	d4ee      	bmi.n	8005a4c <__smakebuf_r+0x18>
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	f043 0302 	orr.w	r3, r3, #2
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	e7e2      	b.n	8005a40 <__smakebuf_r+0xc>
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	6020      	str	r0, [r4, #0]
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	9b01      	ldr	r3, [sp, #4]
 8005a86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a8a:	b15b      	cbz	r3, 8005aa4 <__smakebuf_r+0x70>
 8005a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a90:	4630      	mov	r0, r6
 8005a92:	f000 f851 	bl	8005b38 <_isatty_r>
 8005a96:	b128      	cbz	r0, 8005aa4 <__smakebuf_r+0x70>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	431d      	orrs	r5, r3
 8005aa8:	81a5      	strh	r5, [r4, #12]
 8005aaa:	e7cf      	b.n	8005a4c <__smakebuf_r+0x18>

08005aac <_putc_r>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	460d      	mov	r5, r1
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	b118      	cbz	r0, 8005abe <_putc_r+0x12>
 8005ab6:	6a03      	ldr	r3, [r0, #32]
 8005ab8:	b90b      	cbnz	r3, 8005abe <_putc_r+0x12>
 8005aba:	f7fe f8d3 	bl	8003c64 <__sinit>
 8005abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ac0:	07d8      	lsls	r0, r3, #31
 8005ac2:	d405      	bmi.n	8005ad0 <_putc_r+0x24>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	0599      	lsls	r1, r3, #22
 8005ac8:	d402      	bmi.n	8005ad0 <_putc_r+0x24>
 8005aca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005acc:	f7fe facd 	bl	800406a <__retarget_lock_acquire_recursive>
 8005ad0:	68a3      	ldr	r3, [r4, #8]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	60a3      	str	r3, [r4, #8]
 8005ad8:	da05      	bge.n	8005ae6 <_putc_r+0x3a>
 8005ada:	69a2      	ldr	r2, [r4, #24]
 8005adc:	4293      	cmp	r3, r2
 8005ade:	db12      	blt.n	8005b06 <_putc_r+0x5a>
 8005ae0:	b2eb      	uxtb	r3, r5
 8005ae2:	2b0a      	cmp	r3, #10
 8005ae4:	d00f      	beq.n	8005b06 <_putc_r+0x5a>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	6022      	str	r2, [r4, #0]
 8005aec:	701d      	strb	r5, [r3, #0]
 8005aee:	b2ed      	uxtb	r5, r5
 8005af0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005af2:	07da      	lsls	r2, r3, #31
 8005af4:	d405      	bmi.n	8005b02 <_putc_r+0x56>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	059b      	lsls	r3, r3, #22
 8005afa:	d402      	bmi.n	8005b02 <_putc_r+0x56>
 8005afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005afe:	f7fe fab5 	bl	800406c <__retarget_lock_release_recursive>
 8005b02:	4628      	mov	r0, r5
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	4629      	mov	r1, r5
 8005b08:	4622      	mov	r2, r4
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7fe f99b 	bl	8003e46 <__swbuf_r>
 8005b10:	4605      	mov	r5, r0
 8005b12:	e7ed      	b.n	8005af0 <_putc_r+0x44>

08005b14 <_fstat_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4d07      	ldr	r5, [pc, #28]	@ (8005b34 <_fstat_r+0x20>)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	f7fb fc66 	bl	80013f2 <_fstat>
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d102      	bne.n	8005b30 <_fstat_r+0x1c>
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	b103      	cbz	r3, 8005b30 <_fstat_r+0x1c>
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	bd38      	pop	{r3, r4, r5, pc}
 8005b32:	bf00      	nop
 8005b34:	200003f4 	.word	0x200003f4

08005b38 <_isatty_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4d06      	ldr	r5, [pc, #24]	@ (8005b54 <_isatty_r+0x1c>)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4608      	mov	r0, r1
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f7fb fc5a 	bl	80013fc <_isatty>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d102      	bne.n	8005b52 <_isatty_r+0x1a>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	b103      	cbz	r3, 8005b52 <_isatty_r+0x1a>
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	200003f4 	.word	0x200003f4

08005b58 <_sbrk_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d06      	ldr	r5, [pc, #24]	@ (8005b74 <_sbrk_r+0x1c>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fb fc4e 	bl	8001404 <_sbrk>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_sbrk_r+0x1a>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_sbrk_r+0x1a>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	200003f4 	.word	0x200003f4

08005b78 <memcpy>:
 8005b78:	440a      	add	r2, r1
 8005b7a:	4291      	cmp	r1, r2
 8005b7c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005b80:	d100      	bne.n	8005b84 <memcpy+0xc>
 8005b82:	4770      	bx	lr
 8005b84:	b510      	push	{r4, lr}
 8005b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8e:	4291      	cmp	r1, r2
 8005b90:	d1f9      	bne.n	8005b86 <memcpy+0xe>
 8005b92:	bd10      	pop	{r4, pc}

08005b94 <__assert_func>:
 8005b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b96:	4614      	mov	r4, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b09      	ldr	r3, [pc, #36]	@ (8005bc0 <__assert_func+0x2c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	68d8      	ldr	r0, [r3, #12]
 8005ba2:	b954      	cbnz	r4, 8005bba <__assert_func+0x26>
 8005ba4:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <__assert_func+0x30>)
 8005ba6:	461c      	mov	r4, r3
 8005ba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bac:	9100      	str	r1, [sp, #0]
 8005bae:	462b      	mov	r3, r5
 8005bb0:	4905      	ldr	r1, [pc, #20]	@ (8005bc8 <__assert_func+0x34>)
 8005bb2:	f000 f841 	bl	8005c38 <fiprintf>
 8005bb6:	f000 f851 	bl	8005c5c <abort>
 8005bba:	4b04      	ldr	r3, [pc, #16]	@ (8005bcc <__assert_func+0x38>)
 8005bbc:	e7f4      	b.n	8005ba8 <__assert_func+0x14>
 8005bbe:	bf00      	nop
 8005bc0:	20000018 	.word	0x20000018
 8005bc4:	0800603e 	.word	0x0800603e
 8005bc8:	08006010 	.word	0x08006010
 8005bcc:	08006003 	.word	0x08006003

08005bd0 <_calloc_r>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	fba1 5402 	umull	r5, r4, r1, r2
 8005bd6:	b93c      	cbnz	r4, 8005be8 <_calloc_r+0x18>
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f7ff f909 	bl	8004df0 <_malloc_r>
 8005bde:	4606      	mov	r6, r0
 8005be0:	b928      	cbnz	r0, 8005bee <_calloc_r+0x1e>
 8005be2:	2600      	movs	r6, #0
 8005be4:	4630      	mov	r0, r6
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	220c      	movs	r2, #12
 8005bea:	6002      	str	r2, [r0, #0]
 8005bec:	e7f9      	b.n	8005be2 <_calloc_r+0x12>
 8005bee:	462a      	mov	r2, r5
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	f7fe f9bd 	bl	8003f70 <memset>
 8005bf6:	e7f5      	b.n	8005be4 <_calloc_r+0x14>

08005bf8 <__ascii_mbtowc>:
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	b901      	cbnz	r1, 8005bfe <__ascii_mbtowc+0x6>
 8005bfc:	a901      	add	r1, sp, #4
 8005bfe:	b142      	cbz	r2, 8005c12 <__ascii_mbtowc+0x1a>
 8005c00:	b14b      	cbz	r3, 8005c16 <__ascii_mbtowc+0x1e>
 8005c02:	7813      	ldrb	r3, [r2, #0]
 8005c04:	600b      	str	r3, [r1, #0]
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	1e10      	subs	r0, r2, #0
 8005c0a:	bf18      	it	ne
 8005c0c:	2001      	movne	r0, #1
 8005c0e:	b002      	add	sp, #8
 8005c10:	4770      	bx	lr
 8005c12:	4610      	mov	r0, r2
 8005c14:	e7fb      	b.n	8005c0e <__ascii_mbtowc+0x16>
 8005c16:	f06f 0001 	mvn.w	r0, #1
 8005c1a:	e7f8      	b.n	8005c0e <__ascii_mbtowc+0x16>

08005c1c <__ascii_wctomb>:
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	4608      	mov	r0, r1
 8005c20:	b141      	cbz	r1, 8005c34 <__ascii_wctomb+0x18>
 8005c22:	2aff      	cmp	r2, #255	@ 0xff
 8005c24:	d904      	bls.n	8005c30 <__ascii_wctomb+0x14>
 8005c26:	228a      	movs	r2, #138	@ 0x8a
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c2e:	4770      	bx	lr
 8005c30:	700a      	strb	r2, [r1, #0]
 8005c32:	2001      	movs	r0, #1
 8005c34:	4770      	bx	lr
	...

08005c38 <fiprintf>:
 8005c38:	b40e      	push	{r1, r2, r3}
 8005c3a:	b503      	push	{r0, r1, lr}
 8005c3c:	4601      	mov	r1, r0
 8005c3e:	ab03      	add	r3, sp, #12
 8005c40:	4805      	ldr	r0, [pc, #20]	@ (8005c58 <fiprintf+0x20>)
 8005c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c46:	6800      	ldr	r0, [r0, #0]
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	f7ff fd09 	bl	8005660 <_vfiprintf_r>
 8005c4e:	b002      	add	sp, #8
 8005c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c54:	b003      	add	sp, #12
 8005c56:	4770      	bx	lr
 8005c58:	20000018 	.word	0x20000018

08005c5c <abort>:
 8005c5c:	b508      	push	{r3, lr}
 8005c5e:	2006      	movs	r0, #6
 8005c60:	f000 f82c 	bl	8005cbc <raise>
 8005c64:	2001      	movs	r0, #1
 8005c66:	f7fb fbab 	bl	80013c0 <_exit>

08005c6a <_raise_r>:
 8005c6a:	291f      	cmp	r1, #31
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4605      	mov	r5, r0
 8005c70:	460c      	mov	r4, r1
 8005c72:	d904      	bls.n	8005c7e <_raise_r+0x14>
 8005c74:	2316      	movs	r3, #22
 8005c76:	6003      	str	r3, [r0, #0]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c7c:	bd38      	pop	{r3, r4, r5, pc}
 8005c7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c80:	b112      	cbz	r2, 8005c88 <_raise_r+0x1e>
 8005c82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c86:	b94b      	cbnz	r3, 8005c9c <_raise_r+0x32>
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f831 	bl	8005cf0 <_getpid_r>
 8005c8e:	4622      	mov	r2, r4
 8005c90:	4601      	mov	r1, r0
 8005c92:	4628      	mov	r0, r5
 8005c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c98:	f000 b818 	b.w	8005ccc <_kill_r>
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d00a      	beq.n	8005cb6 <_raise_r+0x4c>
 8005ca0:	1c59      	adds	r1, r3, #1
 8005ca2:	d103      	bne.n	8005cac <_raise_r+0x42>
 8005ca4:	2316      	movs	r3, #22
 8005ca6:	6003      	str	r3, [r0, #0]
 8005ca8:	2001      	movs	r0, #1
 8005caa:	e7e7      	b.n	8005c7c <_raise_r+0x12>
 8005cac:	2100      	movs	r1, #0
 8005cae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	4798      	blx	r3
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	e7e0      	b.n	8005c7c <_raise_r+0x12>
	...

08005cbc <raise>:
 8005cbc:	4b02      	ldr	r3, [pc, #8]	@ (8005cc8 <raise+0xc>)
 8005cbe:	4601      	mov	r1, r0
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	f7ff bfd2 	b.w	8005c6a <_raise_r>
 8005cc6:	bf00      	nop
 8005cc8:	20000018 	.word	0x20000018

08005ccc <_kill_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4d07      	ldr	r5, [pc, #28]	@ (8005cec <_kill_r+0x20>)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	f7fb fb69 	bl	80013b0 <_kill>
 8005cde:	1c43      	adds	r3, r0, #1
 8005ce0:	d102      	bne.n	8005ce8 <_kill_r+0x1c>
 8005ce2:	682b      	ldr	r3, [r5, #0]
 8005ce4:	b103      	cbz	r3, 8005ce8 <_kill_r+0x1c>
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	bd38      	pop	{r3, r4, r5, pc}
 8005cea:	bf00      	nop
 8005cec:	200003f4 	.word	0x200003f4

08005cf0 <_getpid_r>:
 8005cf0:	f7fb bb5c 	b.w	80013ac <_getpid>

08005cf4 <_init>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr

08005d00 <_fini>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr
